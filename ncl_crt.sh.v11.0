#!/bin/bash
#--------------------------------------------------------------------------
#  Description:
#    BA shell script to automatically creat NCL demo script.
#    It's convenient to use command line to input read-in files & varibles.
#
#  Usage:
#    > Usage: > sh ncl_crt.sh (-v var1 var2...) (-f file1 file2...) (-t xy cn) ooo.ncl
#      -f is file full name that you want to include in ooo.ncl 
#      -v is varible full name that you want to include in ooo.ncl 
#      -t is plot type NCL resources in ooo.ncl
#
#      use space " " to seperate each file/varibles
#
#  History:
#    2013/05/02  first release
#    2013/06/10  ver  2, FULL CHANGE read command line parameter method
#    2013/06/30  ver  2.1,  1. FULL CHANE read command line parameter method
#                             user can add new command index more easily
#                          2. ADD new command line index "-t" to create different
#                             plot type NCL resources
#    2013/07/01  ver  3, CHANGE plot type = "xy","cn","default" ncl resources
#    2013/07/15  ver  3.1, ADD "ignorant_get_var_files" scripts in "vyny" case
#                         ADD "post process" comment in work station part
#    2013/07/19  ver  3.2, CHANGE "xy" resources  
#    2013/09/16  ver  3.2, ADD title resources in plot type = "cn"
#    2014/04/02  ver  3.2, ADD res "cnFillPalette","cnSpanFillPalette","gsnPanelRowSpec"
#                                 "lbLabelBarOn","gsnPanelLabelBar"
#                             function "gsn_merge_colormaps","ignorant_select_colormap"
#                                      "ignorant_combine_colormaps"
#    2014/04/03  ver  3.2, ADD function "ignorant_define_colormap"
#                         CHANGE function "ignorant_select_colormap"
#
#    2014/08/04/ ver  4.0, REWRITE writing part of file,vars,plot type
#                         ADD command line parameter, -suffix OR -s
#                         ADD command line parameter, -vname
#                         CHANGE "-type,-t" to "-res,-r"
#                         ADD command line parameter, -plot_off
#                         ADD command line parameter, -h,-help
#    2014/09/05  ver  4.1, CHANGE cn,xy resources
#                         DELETE "plot_off" parameter
#    2014/09/16  ver  4.2, ADD "plot_on" paramter
#                         CHANGE resources in plot_res = "xy","cn","default"
#    2014/09/17  ver  4.3, ADD plot_res = "cn_pro"
#    2014/09/26  ver  4.4, CHANGE xy,cn,cn_pro indicator "-r,-res" to "-t,-type"
#                         ADD plot_res codes, user can add specific ncl codes into output file
#                         ADD plot_res = "cldf"
#    2014/10/01  ver  5.0, ADD command line parameter, -m,-modify
#                         ADD -m options: multiply-NUMBER[-v1,v2...]
#                                         write multiply v1,v2... by NUMBER codes into ncl
#                                         NUMBER: a real/integer
#                                         v1,v2 : variables' name, SAME as -vname              
#					  ex: multiply-10.-v1,v2; multiply-1.E+6
#    2014/10/02  ver  5.1, ADD -m options: diff-[a suffix OR a number]
#                                         write substract v1,v2... by a variable or a number
#					  ex: diff-abc; diff-109.45
#
#                         CHANGE -m multiply-NUMBER[-v1,v2...] to multiply-STRING[-v1,v2...]
#			                  STRING: any string
#					  ex: multiply-1.E+6-v1,v2; multiply-abcd
#    2014/10/03  ver  5.2, REWRITE -m multiply to multiply-[a suffix OR STRING]-[v1,v2,...]
#                         REWRITE -m diff     to diff-[a suffix OR STRING]-[v1,v2,...]
#                         ADD -m option: dimavg-[STRING]-[v1,v2...]
#                         ADD command parameter -d OR -dim
#    2014/10/06  ver  6.0, ADD write plot funtion & panel codes
#                         DIVIDE panel resources from xy,cn to independent code
#    2014/10/15  ver  6.1, ADD check part for plot res & plot type
#                         ADD plot_type [type of plot, ex: xy,cn] 
#                             plot_custom [custom plot, ex: cn_pro, cn_2LB, both share plot_type = "cn" res]
#                         CHANGE write plot res codes structure
#                         ADD plot res = lwtoa_cn, swtoa_cn, prec_cn
#                         ADD plot type = cn_2LB, draw two independent label bars on contour plot
#                        
#    2014/10/16  ver  6.2, ADD plot custom = "xy_3xy": draw 3 xy plot, can use draw time-precipitation plot
#                         ADD plot res    = "qc_cn" : resources of cloud water mixing ratio
#                         ADD ncl_crt description file in $ncl_usage, 
#                             if type "> ncl_crt.sh -h" would show these description
#    2014/10/17  ver  6.3, ADD -m option: code-"code"-[v1,v2...]
#                                        write any code into NCL script
#                                        use 'var' to indicate variables' name
#                         CHANGE -r option: more than one res is allowed
#                         CHANGE -m option: read parameter part & if 
#                                           allow '-' exist in parameter part
#    2014/10/28  ver  6.4  ADD plot res = "cwp_cn" : resources of cloud water path (kg/m2)
#                         ADD more uasge discrption
#                         MODIFY -m bug when not given any variables
#                         MODIFY cn res
#    2014/11/04  ver  6.4  ADD additional resources in plot res = "cwp_cn"
#    2014/11/05  ver  6.4  ADD additional resources in plot type = "cn"
#    2015/02/09  ver  6.4  ADD additional resources in plot type = "rh_cn"
#    2015/03/25  ver  6.4  ADD plot function "gsn_csm_pres_hgt" in plot type = "cn"
#    2016/02/26  ver  6.5  ADD -func options, include sever al useful NCL functions
#    2016/03/01  ver  6.6  ADD ncl_func, show -func results at screen
#    2016/05/19  ver  6.7  CHANGE panel codes, add row1,column1 
#    2016/05/25  ver  6.7  ADD some label bar resources
#    2016/06/23  ver  7.0  INCORPORATE ncl_case.sh.v4.6 into it
#    2016/08/15  ver  7.1  ADD case "nc-compare-var"
#                         MODIFY case "cesm-contour-2files" to make it more flexible
#                         REWRITE read pram_idx position code to speed up
#    2016/08/29  ver  7.2  REWRITE set suffix & file in option_case,option_suffix,option_add part
#                         ADD case "cesm-massflux_siglvl-2files", "cesm-prec_siglvl-2files", "cesm-omega_siglvl-2files"
#    2016/09/01  ver  7.3  MODIFY case "planck"
#    2016/09/08  ver  7.4  ADD case "cesm-regrid_2files-CERES_EBAF", "cesm-regrid_2files-ERAIN_w500", "cesm-regrid_2files-ERAIN_ts", "cesm-regrid_2files-GPCP"
#    2016/10/07  ver  7.5  ADD case "taylor-diagram"
#    2016/10/20  ver  7.5  CHANGE gsn_csm_contour_map_avg setup
#    2016/11/14  ver  7.6  ADD case "cesm-file-time_series"
#    2016/11/16  ver  7.7  ADD case "rrtmg-coutour-band_diff"
#    2016/11/18  ver  7.8  ADD case "cesm-contour-3files"
#                         ADD description part of "option_add"
#    2016/11/23  ver  7.9  ADD case "cesm-contour-files"
#    2016/11/25  ver  8.0  ADD case "cesm-contour-vars"
#    2016/12/04  ver  8.0  MODIFY case "cesm-contour-files" slightly
#    2016/12/05  ver  8.1  ADD case "cesm-cross_sec-files"
#                         ADD case "ncl-case-bash" 
#    2016/12/21  ver  8.2  ADD case "cesm-xy-zonal"
#                         ADD "-codes" option, sort resources into different files
#                         ADD "-colormaps" option to show suitbale colormaps for different variables
#    2016/12/24  ver  8.3  ADD case "cesm-xy-profile"
#    2017/01/05  ver  8.4  MODIFY case "cesm-contour-files", "cesm-contour-vars"
#    2017/02/17  ver  8.5  ADD case "barchart-basic"
#    2017/03/26  ver  8.6  ADD case "eof-exp_coeffs-1file", "eof-pc_contour-1file"
#                                  "eof-variance_cumsum-1file", "kmeans_cluster-contour-file1"
#    2017/04/14  ver  8.7  ADD case "cloudsat-groundtrack-ascd_dscd" and "cloudsat-groundtrack-time_series"
#    2017/08/02  ver  8.8  ADD check part of ncl_name, starting with '-' is not allowed, e.g. -r.ncl
#                         ADD general setting writing part, wks_name & wks_type 
#    2017/09/04  ver  8.9  ADD case "scam-arm95-time_series"
#                         MODIFY: write general setting part unless using case
#    2017/09/09  ver  8.9  DEBUG case "cesm-contour-2files" and "cesm-contour-files"
#    2017/09/11  ver  8.9  DEBUG case "cesm-massflux_siglvl-2files", "cesm-precc_siglvl-2files", "cesm-w500_siglvl-2files"
#			  ADD description of case "scam-arm95-time_series"
#    2017/09/16  ver  8.9  CHANGE "-help" texts
#    2017/09/20  ver  9.0  REMOVE "-res & -r" relevant codes.
#			  REPLACE command option "-codes" with "-res & -r"
#			  ADD case "scatter_critera-input_1D" and "scatter_critera-input_2D"
#    2017/10/06  ver  9.1  ADD option "files_on"
#    2017/10/20  ver  9.2  ADD case "barchart_stacked"
#    2017/10/24  ver  9.2  ADD case "check-filevar-missing"
#    2017/10/25  ver  9.2  ADD case "scatter-sort"
#    2017/12/05  ver  9.3  REWRITE "-func" part to separate each function codes
#                         MODIFY only update nclcrt documents, e.g. help,codes,funcs, when execute "> ncl_crt.sh" without any parameter to prevent write a bunch of documents ever y time.
#    2018/01/19  ver  9.4  MODIFY case "cesm-contour-files" to add multiple variables in it
#    2018/02/20  ver  9.5  ADD case "cesm-cn_map-specified","cesm-cn_map-flexible","scam-time_series-flexible","scam-time_pressure-flexible"
#    2018/03/12  ver  9.6  ADD case "cesm-print_direct" & "cesm-print_obtain"
#    2018/03/26  ver  9.7  ADD case "cesm-xy-flexible"
#    2018/03/30  ver  9.8  ADD choice4 in the case "cesm-xy-flexible"
#    2018/04/03  ver  9.9  ADD write variables in the case "cesm-print_obtain"
#    2018/04/18  ver 10.0  MERGE case "cesm-print_direct" and "cesm-print_obtain" to "cesm-print-vars"
#    2018/04/10  ver 10.1  ADD choice5 in the case "cesm-xy-flexible"
#    2018/04/23  ver 10.1  ADD variables in the case "cesm-print-vars"
#    2018/04/29  ver 10.2  ADD variables that need interpolation in the case "cesm-print-vars"
#    2018/05/04  ver 10.3  ADD case "cesm-cn_2dim-flexible"
#    2018/05/05  ver 10.3  Update description files
#    2018/05/10  ver 10.4  MODIFY case "cesm-cn_2dim-flexible", add "lat_time-lon_avg" option
#                          Update description files
#    2018/05/11  ver 10.5  MODIFY case "cesm-cn_map-flexible" to use ignorant_convert_2Ddata
#                          Update description files
#    2018/05/15  ver 10.5  Update description files
#    2018/05/19  ver 10.6  ADD case "cesm-wind_cn_map-flexible"
#                          DEBUG "cesm-cn_2dim-flexible", "cesm-cn_map-flexible"
#    2018/05/24  ver 10.6  Update description file
#    2018/05/28  ver 10.6  Update description file
#                          Update case cesm-cn_map-flexible        
#    2018/05/30  ver 10.6  Update description file
#                          ADD var "EVAP" in case cesm-print-vars
#    2018/05/31  ver 10.7  MODIFY "cesm-cn_map-flexible", choice3: ntimes to allow use the same labelbar for all plots
#                          MODIFY "cesm-xy-flexible", add x_coordinate = "12months"
#    2018/06/01  ver 10.7  ADD var "P_minus_E", "FLDSC" in case cesm-print-vars
#    2018/06/03  ver 10.7  ADD var "SWCF_SURF" in case cesm-print-vars
#    2018/06/03  ver 10.7  ADD var "SWCF_SURF" in case cesm-print-vars
#    2018/06/06  ver 10.7  CHANGE typepo in some cases
#    2018/06/07  ver 10.7  Update description file
#    2018/06/08  ver 10.8  MODIFY case "cesm-cn_map-flexible" with a NCL procedure "change_var_atts"
#    2018/06/10  ver 10.8  Update description of the case "cesm-print-vars"
#    2018/06/12  ver 10.9  ADD choice6 in the case "cesm-cn_map-flexible"
#    2018/06/15  ver 10.9  MODIFY variable interpolation part in the case "cesm-print-vars"
#    2018/06/17  ver 11.0  REWRITE "-type cn" default ncl codes
#
#  Author:
#    Yi-Hsuan Chen, Taiwan
#      yihsuan@umich.edu
#-------------------------------------------------------------------------

#=================================================================
# user defined parameters
#
#  ncargroot is the path of ncarg library.
#  ignorant_root is the full name of user-defined NCL script
#  ncl_usage is detail description of ncl_crt.sh
#
#=================================================================

#homepath="/home/yihsuan/"
homepath="/home/yihsuan/Downloads/yihsuan/"
wrkdir="./"

ncargroot='$NCARG_ROOT'
ignorant_name1="${homepath}/script/ncl/ignorantNCL.ncl"
ignorant_name2="${homepath}/script/ncl/ignorantNCL-colormaps.ncl"

ncl_usage="${homepath}/script/ncl/ncl_crt.sh.usage"
ncl_plotvars="${homepath}/script/ncl/ncl_crt.sh.plotvars"

ncl_codes="${homepath}/script/ncl/ncl_crt.sh.codes"
#codes_index=(colormap cn legend labelbar panel text tickmark wks xy)
codes_index=(cmap cn lg lb panel text tm wks xy)
ncl_codes_colormap=${ncl_codes}.cmap
ncl_codes_cn=${ncl_codes}.cn
ncl_codes_legend=${ncl_codes}.lg
ncl_codes_labelbar=${ncl_codes}.lb
ncl_codes_panel=${ncl_codes}.panel
ncl_codes_text=${ncl_codes}.text
ncl_codes_tickmark=${ncl_codes}.tm
ncl_codes_wks=${ncl_codes}.wks
ncl_codes_xy=${ncl_codes}.xy
#ncl_codes_=${ncl_codes}.

ncl_func="${homepath}/script/ncl/ncl_crt.sh.func"
func_index=(string math file array variable ignorant atmos cnplot)
ncl_func_string=${ncl_func}.string
ncl_func_math=${ncl_func}.math
ncl_func_file=${ncl_func}.file
ncl_func_array=${ncl_func}.array
ncl_func_variable=${ncl_func}.variable
ncl_func_ignorant=${ncl_func}.ignorant
ncl_func_atmos=${ncl_func}.atmos
ncl_func_cnplot=${ncl_func}.cnplot
#ncl_func_=${ncl_func}.

temp=`date +%Y%m%d%H%M%S`

#=================
#  program start
#=================

# get total number of parameters
# set meaingful indexes in command line 
pram_num=$#
pram_idx=(-f -file -v -var -t -type -s -suffix -m -modify -d -dim -vname -func -c -case -a -add -add_fixed -plot_on -files_on)
type_avil=(xy xy_3xy cn cn_pro cn_2LB)
res_avil=(cldf_cn lwtoa_cn swtoa_cn prec_cn cwp_cn qc_cn rh_cn)
notes=(-func -r -res -plotvars)
mod_avil="multiply-[a suffix OR a STRING]-[v1,v2...] diff-[a suffix OR a STRING]-[v1,v2...] dimavg-[STRING]-[v1,v2...] code-\"[STRING]\"-[v1,v2 ...],USE 'var' to represent variables' name"

# for adding a new case, search "newcase" for proper location to add codes
       #newcase
cases=(\
       barchart-basic \
       barchart-stacked \
       barchart-stacked_old \
       binmap-one \
       binmap-overlay \
       cam-hybrid2pres        \
       cesm-cn_2dim-flexible   \
       cesm-cn_map-flexible \
       cesm-cn_map-specified     \
       cesm-wind_cn_map-flexible  \
       cesm-cross_sec-files     \
       cesm-contour-vars     \
       cesm-contour-2files     \
       cesm-contour-3files \
       cesm-file-time_series   \
       cesm-profile-2files     \
       cesm-cldf_global-3files \
       cesm-cldf_zonal-3files  \
       cesm-div_plev-2files    \
       cesm-massflux_siglvl-2files \
       cesm-moist_conv_plev-2files  \
       cesm-moist_conv_vint-2files  \
       cesm-omega_siglvl-2files \
       cesm-prec_global-2files \
       cesm-prec_monthly_contour-2sets \
       cesm-prec_monthly_zonal-2sets \
       cesm-prec_siglvl-2files \
       cesm-print-vars \
       cesm-regrid_2files-CERES_EBAF \
       cesm-regrid_2files-ERAIN_w500 \
       cesm-regrid_2files-ERAIN_ts \
       cesm-regrid_2files-GPCP \
       cesm-wind_prec_monthly-2sets \
       cesm-write-moist_conv-2sets \
       cesm-xy-flexible \
       cesm-xy-profile \
       cesm-xy-zonal \
       check-filevar-missing \
       cloudsat-cldclass-series  \
       cloudsat-cldlayer-series  \
       cloudsat-groundtrack-ascd_dscd \
       cloudsat-groundtrack-time_series \
       cloudsat-radar-series  \
       cloudsat-track-series  \
       contour-2xy            \
       eof-exp_coeffs-1file   \
       eof-pc_contour-1file   \
       eof-variance_cumsum-1file \
       es                     \
       kmeans_cluster-contour-file1 \
       pdf                    \
       kohler                 \
       nc-replace-values      \
       nc-compare-var         \
       ncl-case-bash          \
       planck                 \
       rrtmg-contour-band_diff \
       scam-arm95-time_series \
       scam-time_series-flexible \
       scam-time_pressure-flexible \
       scatter_criteria-input_1D \
       scatter_criteria-input_2D \
       scatter-sort \
       surface_type-single    \
       surface_type-monthly   \
       taylor-diagram         \
       ttest                  \
       )
usage="(-file OR -f file1 file2...) (-suffix OR -s suffix1 suffix2...) (-var OR -v var1 var2...) (-vname v1 v2...) (-d OR -dim 0,:,: :,:) (-m OR -modify $mod_avil) (-type OR -t ${type_avil[@]}) (-plot_on) (${notes[@]}) (-c OR -case ${cases[@]}) ooo.ncl ||| (-a OR -add file1.ncl case_name) ooo.sh"

#*** if not given any parameter, update NCL documents ***
if [ $pram_num -eq 0 ]; then

#-----------------
# write ncl usage
#-----------------

cat > $ncl_usage << EOF

Usage: > sh ncl_crt.sh [OPTIONS]	ooo.ncl   	# create a NCL file
       > sh ncl_crt.sh -func			  	# show some NCL functions on screen
       > sh ncl_crt.sh -res OR -r		  	# show some NCL resources codes on screen
       > sh ncl_crt.sh -plotvars			# show some NCL res for plotting variables (e.g. colormap, scale, string, etc) on screen
       > sh ncl_crt.sh (-a file1.ncl case_name)	ooo.sh	# create a BASH file by giving an input NCL file
       > sh ncl_crt.sh					# print error message and update nclcrt documents

Full Usage: > sh ncl_crt.sh $usage

OPTIONS:

  -a OR -add     file1.ncl case_name    :  Convert a NCL script to a shell script that can be added into this ncl_crt.sh [search "newcase" in the ncl_crt.sh]

  -plotvars				:  show some NCL res for plotting variables (e.g. colormap, scale, string, etc) on screen

  -f OR -file 	 file1 file2 ...	:  input files' names
  -s OR -suffix	 suffix1 suffix2 ...	:  input files' suffix names (MUST equal to input file number)
  -v OR -var	 var1 var2 ...		:  input variables' names in file
  -vname	 v1 v2			:  variables' name in NCL script (MUST equal to input vars' number)

  -d OR -dim	 0,:,: :,:		:  anything behind read variables' part in NCL
		 lon\|:,lat\|			:  ex: file->var1(0,:,:), file->var2(:,:)
					   MUST equal or less than varaibles' number

  -plot_on				: write NCL plot script

  -files_on -f ...			: **OUTDATED** write NCL variables that is consistent with given files through the command line

  -func					: write several NCL useful functions

  -t OR -type 				: available plot types
                                          (${type_avil[@]})

  -r OR -res				: print out NCL resources on the screen

  -m OR -modify	 opt1 opt2 ... 		: modify variables script
					  NOTE THAT if user want to include "-" in STRING part, please replace '"' by '"\\"'
					  NOTE THAT if user want to include "!" in STRING part, please type "\!", and it would write "\!" into script because "!" is a special character in bash

					  ex: code-"\"var = -100"\"
					      multiply-"\"-999"\"-v1,v2
					      code-"var\!lat = lat"

					  opt1: multiply-[a suffix OR a STRING]-[v1,v2...]
						  multiply STRING to given variables' names
						  ex: multiply-10.-v1 ==> v1_1 = multiply(v1_1, 10.)
						  
					  opt2: diff-[a suffix OR a STRING]-[v1,v2...]
						  substract STRING to given variables' names
						  ex: diff-ddd-v2  ==> v2_diff_1Const = diff(v2_1, ddd)

					  opt3: dimavg-[STRING]-[v1,v2...] 
						  use NCL dim_avg_Wrap_n function to calculate dimension mean  
						  ex: dimavg-1,2-v1 ==> v1_2_dimavg = dim_avg_n_Wrap(v1_2, (/1,2/))

					  opt4: code-"[STRING]"-[v1,v2...] 
						  write [STRING] into NCL script, note that [STRING] MUST enclosed by ""
						  use "var" to indicate variable's name
						  ex: code-"1000." 
                                                      code-"\"var@_FillValue = -999.99"\"-v1,v2
						      code-"\"var@units = \"mm/day\""\"
						      code-"var&x = var&x / 1000."

  -c OR -case    casename               :  case name
                                           (${cases[@]})

                                           --------------------------
                                           -- CESM cases / general --
                                           --------------------------

                                           ***[cesm-cn_2dim-flexible]          	: draw contours for two dimensions (e.g. pres-time, lat-pres) and diff for multiple variables, multiple time steps of multiple CESM ouputs. Files and also variables can be added in the NCL file

                                           ***[cesm-cn_map-flexible]          	: draw contours over map and diff for multiple variables, multiple time steps of multiple CESM ouputs. Files and also variables can be added in the NCL file

                                           ***[cesm-wind_cn_map-flexible]      	: draw wind bard and contours over map and diff for multiple variables, multiple time steps of multiple CESM ouputs. Files and also variables can be added in the NCL file

					   ***[cesm-xy-flexible]		: plot CESM outputs on XY plot flexibly.
										    Current options: 1. var_latlon_avg_L_time          , e.g. time series of global-avg OLR
												     2. pressure_L_var_latlontime_avg   , e.g. vertical profile ot global mean temperauture

					   *** [cesm-print-vars]		: print var(time,lat,lon) in files or diagnosed in this script with (1) Time-average, area-mean, (2) Time standard deviation of area mean (3) Time standard error of area mean

                                           ***[cesm-cn_map-specified]         	: draw contours and diff for multiple variables, multiple time steps of multiple CESM ouputs. Files are fixed through command line while variables can be added in the NCL file

                                           ---------------------------
                                           -- CESM cases / specific --
                                           ---------------------------

                                           ***[cam-hybrid2pres]                 : interpolate CAM hybrid coordinate to pressure coordinate and write to a new file

                                           ***[cesm-cldf_global-3files]         : draw 2 or 3 CESM output files' global cloud fraction on different levels

                                           ***[cesm-cldf_zonal-3files]          : draw 2 or 3 CESM output files' zonal mean cloud fraction

                                           ***[cesm-div_plev-2files]            : compute and draw divergence at user-specified pressure level of 2 CESM output files

					   ***[cesm-massflux_siglvl-2files]	: draw convectice mass flux of 2 CESM files and student t-test for the difference

                                           ***[cesm-moist_conv_plev-2files]     : compute and draw moisture flux convergence at user-specified pressure level of 2 CESM output files

                                           ***[cesm-moist_conv_vint-2files]     : compute and draw vertically-integrated moisture flux convergence of 2 CESM output files

					   ***[cesm-omega_siglvl-2files]	: draw omega at a specific level of 2 CESM files and student t-test for the difference

                                           ***[cesm-prec_monthly_contour-2sets] : draw monthly precipitation contour and the difference at map of 2 CESM cases output files

                                           ***[cesm-prec_monthly_zonal-2sets]   : draw monthly zonal precipitation of 2 CESM cases output files

                                           ***[cesm-prec_global-2files]		: draw 2 CESM outputs' global convective,stratiform,total precipitation and their difference

					   ***[cesm-prec_siglvl-2files]		: draw precipitation of 2 CESM files and student t-test for the difference

					   ***[cesm-regrid_2files-CERES_EBAF]	: Regrid CERES_EBAF data and compare with 2 CESM outputs
 
					   ***[cesm-regrid_2files-ERAIN_w500]	: Regrid ERA-Interim w500 data and compare with 2 CESM outputs

					   ***[cesm-regrid_2files-ERAIN_ts]	: Regrid ERA-Interim surface temperature data and compare with 2 CESM outputs

					   ***[cesm-regrid_2files-GPCP] 	: Regrid GPCP data and compare with 2 CESM outputs

                                           ***[cesm-wind_prec_monthly-2sets]    : draw monthly precipitation & wind fields and the difference at map of 2 CESM cases output files

                                           ***[cesm-write-moist_conv-2sets]     : compute and/or write out four moisture flux convergence (i.e. q1v1,q1v2,q2v1,q2v2) of 2 CESM files set

                                           OUTDATED ***[cesm-contour-2files]            : draw 2 CESM ouputs variable contour and difference
                                           OUTDATED ***[cesm-contour-3files]            : draw 3 CESM ouputs variable contour and difference
                                           OUTDATED ***[cesm-contour-vars]             	: draw contours of multiple variables of a CESM ouput
                                           OUTDATED ***[cesm-cross_sec-files]           : draw contours either on a interpolated pressure level or cross-section of multiple CESM ouputs
					   OUTDATED ***[cesm-file-time_series]		: draw selected variables of all time steps in a CESM output

                                           OUTDATED ***[cesm-profile-2files]            : interpolate CESM variables to pressure coordinate & comput lat/lon average & draw XY plot
					   OUTDATED ***[cesm-xy-profile]			: draw area-mean profile (X axis is mean variable, Y axis is pressure levels)  of multiple varaibles and CESM files
					   OUTDATED ***[cesm-xy-zonal]			: draw zonal average (X axis is latitude, Y axis is zonal mean value) of multiple varaibles and CESM files

                                           ------------------------
                                           -- SCAM related cases --
                                           ------------------------

					   ***[scam-time_series-flexible]	: Draw SCAM time series of multiple variables. Files and varialbes can be added into the NCL file.

					   ***[scam-time_pressure-flexible]	: Draw SCAM time-pressure of multiple variables. Files and varialbes can be added into the NCL file.

					   ***[scam-arm95-time_series]		: Draw SCAM with ARM 1995 IOP time series					   

                                           ----------------------------
                                           -- CloudSat related cases --
                                           ----------------------------

                                           ***[cloudsat-cldclass-series]: draw CloudSat 2B-CLDCLASS-LIDAR cloud classification time/height plot

                                           ***[cloudsat-cldlayer-series]: draw cloud layer (cloud type and cloud fraction) with height 

					   ***[cloudsat-groundtrack-ascd_dscd]: plot cloudsat groundtrack based on a sorted ascending/descending track data

				           ***[cloudsat-groundtrack-time_series]: plot cloudsat groundtrack based on a time series of track data

                                           ***[cloudsat-radar-series]   : draw CloudSat 2B-GEOPROF radar reflectivity time/height plot

                                           ***[cloudsat-track-series]   : draw CloudSat track on map

                                           --------------------
                                           -- RRTMG LW cases --
                                           --------------------

					   ***[rrtmg-contour-band_diff]	: draw global contour of RRTMG LW 4 or 16 band difference

                                           ------------------
                                           -- EOF analysis --
                                           ------------------

				           ***[eof-exp_coeffs-1file]        : Compute EOF expansion coefficients of a dataset and then plot time series of each PC

				           ***[eof-pc_contour-1file]        : Compute EOF of a dataset and then plot PCs on map

					   ***[eof-variance_cumsum-1file]   : Compute EOF and plot cumulative sum of fraction variance explained by each PC

     					   ***[kmeans_cluster-contour-file1]: Do k-means cluster analysis and then plot each cluster on map

                                           ------------------
                                           -- Surface type --
                                           ------------------

                                           ***[surface_type-single]     : draw a surface type map (current available data set: IGBP, EMIS)

                                           ***[surface_type-monthly]    : draw monthly surface type map (current available data set: IGBP, EMIS)

                                           ------------------
                                           -- Plot Example --
                                           ------------------

					   ***[barchart-basic]  : plot basic bar chart for user-given information
								  reference: polyg_10.ncl, http://www.ncl.ucar.edu/Applications/bar.shtml

                                           ***[barchart-stacked]: bin a data and then plot stacked bar chart for user-given number of bars and variables
                                         	                    reference: bar_18.ncl , http://www.ncl.ucar.edu/Applications/bar.shtml

                                           ***[barchart-stacked_old]: plot stacked bar chart for user-given number of bars and variables
                                           	                      reference: bar_18.ncl , http://www.ncl.ucar.edu/Applications/bar.shtml

                                           ***[binmap-one]      : draw mean/standard deviation at each bin

                                           ***[binmap-overlay]  : draw mean/standard deviation at each bin of 2 variables

                                           ***[contour-2xy]     : plot a contour with two x_avg and y_avg XY plots

                                           ***[pdf]             : plot Probability Density Function (PDF) using NCL built-in function pdfx

					   ***[scatter_criteria-input_1D]: draw a scatter plot with given criteria for an input 1-D array

					   ***[scatter_criteria-input_2D]: draw a scatter plot with given criteria for an input 2-D array

					   ***[scatter-sort]	: sort xdata and ydata by zdata and plot a scattering plot with X and Y

					   ***[taylor-diagram]	: plot taylor diagram

                                          -------------------------
                                           -- Scientific function --
                                           -------------------------

                                           ***[es]    : compute water/ice saturation vapor pressure 

                                           ***[kohler]: compute and draw kolher curve

                                           ***[planck]: compute Planck's function

                                           ***[ttest] : perform student t-test

                                           ----------------------
                                           -- netCDF operation --
                                           ----------------------

					   ***[nc-compare-var]   : compare a variable value in multiple files

                                           ***[nc-replace-values]: replace values in .nc file according to another file (e.g. land/ocean fraction)

                                           ---------
                                           -- NCL --
                                           ---------

					   ***[ncl-case-bash]: write a BASH file for writing a NCL case

					   ***[check-filevar-missing]: check all variables in a file to see if there is any missing data

=====================================================================================================
Usage: > sh ncl_crt.sh [OPTIONS]	ooo.ncl   	# create a NCL file
       > sh ncl_crt.sh -func				# show some NCL functions on screen
       > sh ncl_crt.sh -res OR -r		  	# show some NCL resources codes on screen
       > sh ncl_crt.sh -plotvars			# show some NCL res for plot variables (e.g. colormap, scale, string, etc) on screen
       > sh ncl_crt.sh (-a file1.ncl case_name)	ooo.sh  # convert the input NCL file into a BASH file that can be added into ncl_crt.sh [search "newcase" in ncl_crt.sh]
       > sh ncl_crt.sh					# print error message and update nclcrt documents
=====================================================================================================

EOF

#-----------------
# write ncl codes
#-----------------

# write ncl codes - cmap
cat > $ncl_codes_colormap << EOF

;-------------
; set colors
;-------------
;
;  option_foreback = False	; set to True if want to include the foreground and background colors, i.e. white and black
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,1) 	; 1 -> combine total cmap1,cmap2, else: exclude the first and second colors of cmap2
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)			; use user-predefine colormaps in ignorantNCL-colormaps.ncl
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;  cmap_name = "CBR_coldhot"
;  cmap_values = read_colormap_file(cmap_name)
;  cmap_values = cmap_values(::-1,:) ; reverse the color map 

;-----------------------------------------------
; modify colors returned from cnColors_PosNeg
;-----------------------------------------------
;  cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
;  ;printVarSummary(res_diff_vars1)
;
; if (isatt(res_diff_vars1,"cnFillColors")) then
;   qqcncolors = res_diff_vars1@cnFillColors
;   qqcncolors(4,:) = 1.   ; change the colors in the middle to white
;   qqcncolors(5,:) = 1.
;   res_diff_vars1@cnFillColors = qqcncolors
;   delete(qqcncolors)
; end if

;-----------------------
; general color scales
;-----------------------

;*** dry (-) / wet (+) ***
;  opt_cncolors = True
;  opt_cncolors@colormap_positive = "MPL_YlGnBu"   ; http://www.ncl.ucar.edu/Document/Graphics/ColorTables/MPL_YlGnBu.shtml
;  opt_cncolors@colormap_positive_index_start = 2
;  opt_cncolors@colormap_positive_index_end = 113
;
;  opt_cncolors@colormap_negative = "MPL_YlOrBr"   ; http://www.ncl.ucar.edu/Document/Graphics/ColorTables/MPL_YlOrBr.shtml
;  opt_cncolors@colormap_negative_index_start = 113
;  opt_cncolors@colormap_negative_index_end = 2

;*** warm (+) / cold (-) ***
;  opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; http://www.ncl.ucar.edu/Document/Graphics/ColorTables/WhiteYellowOrangeRed.shtml
;  opt_cncolors@colormap_negative = "WhiteBlue"             ; http://www.ncl.ucar.edu/Document/Graphics/ColorTables/WhiteBlue.shtml

;*** absolute value ***
  cmap_name = "WhiteBlueGreenYellowRed"   ; http://www.ncl.ucar.edu/Document/Graphics/ColorTables/WhiteBlueGreenYellowRed.shtml

EOF

# write ncl codes - cn
cat > $ncl_codes_cn << EOF

;-------------------
; contour plot res
;-------------------

;*** gsn resources ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
;  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
;  res@cnLinesOn = False
;  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =

EOF

# write ncl codes - legend
cat > $ncl_codes_legend << EOF

;--------------
; draw legend
;--------------
;
;  lgres = True
;  lgres@lgMonoLineColor = False
;  lgres@lgLineColors = res@xyLineColors
;  lgres@lgMonoDashIndex = res@xyMonoDashPattern
;  lgres@lgDashIndex = res@xyDashPattern
;  lgres@lgDashIndexes = res@xyDashPatterns
;  lgres@lgMonoLineThickness = True
;  lgres@lgLineThicknessF = res@xyLineThicknessF

;  lgres@lgAutoManage = False
;  lgres@lgLabelFontHeightF = 0.08

;  lgres@vpWidthF = 0.15
;  lgres@vpHeightF = 0.05

;  lgres@lgPerimOn = False

;  lg_x = 0.59
;  lg_y = 0.46
;  label_names = (/" "," "/)
;
;  gsn_legend_ndc(wks,2,label_names,lg_x,lg_y,lgres)
;
;--------------------
; legend in XY plot
;--------------------
;
;  res@pmLegendDisplayMode = "Always"
;  res@pmLegendSide = "Top"
;  res@pmLegendWidthF = 0.15 
;  res@pmLegendHeightF = 0.18
;  res@xyExplicitLegendLabels = (/"",""/)
;  res@lgLabelFontHeightF = 0.01
;  res@pmLegendOrthogonalPosF = -0.1  ; move up(+) / down(-)
;  res@pmLegendParallelPosF = 0.8  ; move right (left(-) / right(+)
;  res@lgPerimOn = False
;  res@lgItemOrder = (/3,2,1,0/)

EOF

# write ncl codes - labelbar
cat > $ncl_codes_labelbar << EOF

;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)

EOF

# write ncl codes - panel
cat > $ncl_codes_panel << EOF

;-------
; panel
;-------
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5
; 
;  resp@gsnPanelFigureStrings= (/"(a)","(b)","(c)","(d)"/) 	; add figure string
;  resp@amJust   = "TopLeft"  					; adjust figure string to top left
;  resp@gsnPanelFigureStringsBackgroundFillColor = -1		; set background color to transparent
;  resp@gsnPanelFigureStringsJust = "topright"			; adjust figure string (Available in version 6.4.0 and later.)
								; ("top", "center", "bottom") + ("left", "center", "right")
;  resp@gsnPanelFigureStringsPerimOn = False			; Turn off perimeter
;
;  row1    = 1  ; row number of panel plot
;  column1 = 2  ; column number of panel plot
;  start1  = 0  ; start index of plots
;  end1    = 10 ; end index of plots 
;  stride1 = 1  ; stride of plots
;  gsn_panel(wks,plot,(/row1,column1/),resp)
;  gsn_panel(wks,plot(start1:end1:stride1),(/row1,column1/),resp)

EOF

# write ncl codes - text
cat > $ncl_codes_text << EOF

;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)

EOF

# write ncl codes - tick mark
cat > $ncl_codes_tickmark << EOF

;-----------
; tick mark
;-----------

;res@tmXBMode = "Explicit"
;res@tmXBValues = (//)
;res@tmXBLabels = tostring(res@tmXBValues)

;res@tmXBMode = "Manual"
;res@tmXBTickStartF =
;res@tmXBTickEndF =
;res@tmXBTickSpacingF =

;-------------------
; tick mark labels
;-------------------
;  res@tmXBPrecision = 6  ; e,g, 100.000
;  res@tmXBFormat    = "0*+^e"  ; see tm_4.ncl at https://www.ncl.ucar.edu/Applications/tickmarks.shtml

;------
; Grid
;------
; res@tmXMajorGrid = True
; res@tmXMajorGridLineColor = 2
; res@tmXMajorGridLineDashPattern = 14
; res@tmXMajorGridThicknessF = 1

;---------------------
; draw reference line 
;---------------------
; res@gsnYRefLine = 0.

EOF

# write ncl codes - wks
cat > $ncl_codes_wks << EOF

;-------------------
; set work station
;-------------------
;  wks_type = "png"
;  wks_type@wkWidth = 1600
;  wks_type@wkHeight = 1200
;
;  wks_type = "x11"
;  wks_type = "pdf"
;  wks_type = "ncgm"
;  wks_type = "png"
;  wks_name = "test111"
;  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

EOF

# write ncl codes - xy
cat > $ncl_codes_xy << EOF

;--------------
; XY plot res
;--------------

;
;*** gsn res ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;
;*** adjust axis type ***
;  res@xyYStyle = "log"  ;  "Linear" "Irregular"
;  res@trYReverse = True
;
;*** adjust XY range ***
;  res@trXMinF = 
;  res@trXMaxF = 
;  res@trYMinF = 
;  res@trYMaxF = 
;
;*** adjust xy line mode ***
;  res@xyMonoMarkLineMode = False
;  res@xyMarkLineMode  = "MarkLines"  ; "Lines" "Markers" 
;  res@xyMarkLineModes = (/"MarkLines"/)
;
;*** adjust xy dash pattern ***
;  res@xyMonoDashPattern = False
;  res@xyDashPattern = 1
;  res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  res@xyMonoLineColor = False
;  res@xyLineColors = (/1,3,3,14,14/)
;  res@xyLineColor = 10
;
;*** adjust xy markers ***
;  res@xyMonoMarker = False
;  res@xyMarker = 1
;  res@xyMarkers = (//)
;
;  res@xyMonoMarkerColor = False
;  res@xyMarkerColor = 1
;  res@xyMarkerColors = (//)
;
;*** adjust xy line thickness ***
;  res@xyMonoLineThickness = True
;  res@xyLineThicknessF = 3.
;  res@xyLineThicknesses = 
;
;*** adjust tickmark ***
;  res@tmXTOn = False
;  res@tmXTLabelsOn = False
;
;  res@tmXBMode = "Explicit"
;  res@tmXBValues = (//)
;  res@tmXBLabels = flt2string(res@tmXBValues)
;  res@tmXBLabels = (//)
;  res@tmXBMinorValues = (//)
;
;*** draw the reference line ***
; res@gsnYRefLine = 0.
;
;*** adjust grids ***
;  res@tmYMajorGrid = True
;  res@tmYMinorGrid = True
;  res@tmYMajorGridLineDashPattern = 2
;  res@tmYMinorGridLineDashPattern = 2
;  res@tmYMajorGridLineColor = 1
;  res@tmYMinorGridLineColor = 1
;
;*** adjust string ***
;  res@tiMainString =
;  res@tiXAxisString = 
;  res@tiYAxisString = 
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;*** set legend ***
;  res@pmLegendDisplayMode = "Always"
;  res@pmLegendSide = "Top"
;  res@pmLegendWidthF = 0.15 
;  res@pmLegendHeightF = 0.18
;  res@xyExplicitLegendLabels = (/"",""/)
;  res@lgLabelFontHeightF = 0.01
;  res@pmLegendOrthogonalPosF = -0.1  ; move up(+) / down(-)
;  res@pmLegendParallelPosF = 0.8  ; move right (left(-) / right(+)
;  res@lgPerimOn = False
;  res@lgItemOrder = (/3,2,1,0/)

EOF

#----------------------
# write ncl plotvars 
#----------------------
cat > $ncl_plotvars << EOF

;*****************
; cloud fraction
;*****************
  cmap_cldf = ignorant_define_colormap("WhBlGrYlRd",(/0,3,4,5, \\
                                                      7,8,9,10,11,12,14/))
  cmap_cldf_diff = ignorant_define_colormap("brown_green",(/0,1,2,3,4, \\
                                                            7,7, \\
                                                            8,9,10,11,12/))
  res@cnLevelSelectionMode = "ExplicitLevels"
  res@cnLevels = 100.*(/0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9/)
  ;res@cnLevels = (/0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9/)
  res@cnFillPalette = cmap_cldf
  res@cnSpanFillPalette = False

  dres@cnLevelSelectionMode = "ExplicitLevels"
  ;dres@cnLevels = (/-0.15,-0.1,-0.05,-0.01,0.,0.01,0.05,0.1,0.15/)
  ;dres@cnLevels = 100.*(/-0.4,-0.2,-0.1,-0.05,-0.01,0.,0.01,0.05,0.1,0.2,0.4/)
  dres@cnLevels = 100.*(/-0.6,-0.4,-0.2,-0.1,-0.05,0.,0.05,0.1,0.2,0.4,0.6/)
  dres@cnFillPalette = cmap_cldf_diff
  dres@cnSpanFillPalette = False

;**************
; cloud water 
;**************

  res@cnFillPalette = "WhiteBlueGreenYellowRed"   	; cloud water absolute value
  res@cnFillPalette = "WhBlGrYeRe"                	; cloud water absolute value

  res_diff@cnFillPalette = "precip_diff_12lev"    	; cloud water difference 

;*******************
; cloud water path
;*******************

  cmap_cwp = ignorant_select_colormap("WhiteBlueGreenYellowRed",(/2,10,17,33,49,65,81, \\
                                                               97,113,129, \\
                                                               145,161,177, \\
                                                               193,225,255/) ,False)
;********
; omega
;********

  cmap_omega = read_colormap_file("CBR_coldhot")   	; omega absolute value
  cmap_omega = cmap_omega(::-1,:)                  	; reverse the color map 
  res@cnFillPalette = cmap_omega                   	; upward(-) is reddish while downward(+) is bluish

  cmap_omega_diff = read_colormap_file("GMT_polar")	; omega difference value
  cmap_omega_diff = cmap_omega_diff(::-1,:)          	; reverse the color map 
  res_diff@cnFillPalette = cmap_omega_diff           	; upward(-) is reddish while downward(+) is bluish

;****************
; precipitation 
;****************

  res@cnFillPalette = "precip2_17lev"           	; precipitation absolute value

  res_diff@cnFillPalette = "precip_diff_12lev"  	;  precipitation diff value

  res@cnLevelSelectionMode = "ExplicitLevels"
  res@cnLevels = (/0.5,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15./)

;************
; radiation
;************

;--- SW flux at the TOA ---
  res@cnFillPalette = "MiYlOrRdPk"           	; SW flux at TOA absolute value

  res_diff@cnFillPalette = "blue_red"		; SW flux at TOA absolute difference

;--- LW flux at the TOA ---
  res@cnFillPalette = "CBR_wet"           	; LW flux at TOA absolute value

  res_diff@cnFillPalette = "blue_red"		; LW flux at TOA absolute difference
  

;--- LW upward/downward flux ---
  res@cnFillPalette = "BlAqGrYeOrReVi200"	; LW upward/downward flux value

  res_diff@cnFillPalette = "BlueWhiteOrangeRed"	; LW upward/downward flux diff

;--- LW heating rate ---
  res@cnFillPalette = "BlueDarkRed18"		; LW heating rate value

  res_diff@cnFillPalette = "GMT_polar"		; LW heating rate diff

;********************************
; relative humidity, in unit: % 
;********************************

  cmap_rh  = ignorant_define_colormap("brown_green",(/1,2,3,4,5,6, \\
                                                      9,10,11,12,13,14/))
  res@cnLevelSelectionMode = "ExplicitLevels"
  res@cnLevels = (/5,10,20,30,40,50,60,70,80,90,100/)
  res@cnFillPalette = cmap_rh
  res@cnSpanFillPalette = False

;**************
; temperature 
;**************

  res@cnFillPalette = "WhiteBlueGreenYellowRed"   	; temperature absolute value

  res_diff@cnFillPalette = "BlueWhiteOrangeRed"   	; temperature diff value

;***********
; u,v wind 
;***********

  res@cnFillPalette = "WhiteBlueGreenYellowRed"    	; wind speed
  res@cnLevelSelectionMode = "ManualLevels"        	; show wind direction

  cmap_u_diff = read_colormap_file("MPL_PRGn")  	; u difference
  cmap_u_diff = cmap_u_diff(::-1,:)
  res_diff@cnFillPalette = cmap_u_diff          	; easterly(+) is purple while westerly(-) is green

  res@cnFillPalette = "GreenMagenta16" 			; v wind, southerly(-) is green while northly(+) is purple
  cmap_v_diff = read_colormap_file("MPL_PRGn")  	; v difference
  cmap_v_diff = cmap_v_diff(::-1,:)
  res_diff@cnFillPalette = cmap_v_diff          	; northly(+) is purple while southly(-) is green

;**********
; strings
;**********

  ;--------
  ; cloud
  ;--------
  if ( varvar .eq. "CLDLOW" ) then
    res_vars1@gsnLeftString = "Low cloud fraction"
    res_diff_vars1@gsnLeftString = "Low cld frac diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "TGCLDLWP" ) then
    res_vars1@gsnLeftString = "Grid-box liquid water path"
    res_diff_vars1@gsnLeftString = "Grid-box LWP diff at "+siglev+"% level"
  end if

  ;----------------
  ; precipitation
  ;----------------
  if ( varvar .eq. "PRECC") then
    res_vars1@gsnLeftString = "Conv Prec"
    res_diff_vars1@gsnLeftString = "Conv Prec diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "PRECL" ) then
    res_vars1@gsnLeftString = "Stratiform Prec"
    res_diff_vars1@gsnLeftString = "St Prec diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "PRECT" ) then
    res_vars1@gsnLeftString = "Total Prec"
    res_diff_vars1@gsnLeftString = "Total Prec diff at "+siglev+"% level"
  end if

  ;--------------
  ; temperature
  ;--------------
  if ( varvar .eq. "TS" ) then
    res_vars1@gsnLeftString = "Surf Rad temperature"
    res_diff_vars1@gsnLeftString = "Surf rad temp diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "TREFHT" ) then
    res_vars1@gsnLeftString = "Surface air temperature"
    res_diff_vars1@gsnLeftString = "Surf air temp diff at "+siglev+"% level"
  end if

  ;--------------------------
  ; radiative column cooling
  ;--------------------------
  if ( varvar .eq. "RADCOOL_TOA_TO_SURF" ) then
    res_vars1@gsnLeftString = "Net Column Rad cooling"
    res_diff_vars1@gsnLeftString = "Rad cooling diff at "+siglev+"% level"
  end if

  ;--------------
  ; velocity
  ;--------------
  if ( varvar .eq. "OMEGA500" ) then
    res_vars1@gsnLeftString = "~F33~w~F~ at 500 hPa"
    res_diff_vars1@gsnLeftString = "~F33~w~F~500 diff at "+siglev+"% level"
  end if

  ;---------------------------
  ; surface energy fluxes
  ;---------------------------
  if ( varvar .eq. "FSDS" ) then
    res_vars1@gsnLeftString = "Dn SW flux at the surf"
    res_diff_vars1@gsnLeftString = "Dn SW flux diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "FSDSC" ) then
    res_vars1@gsnLeftString = "clr-sky Dn SW flux at the surf"
    res_diff_vars1@gsnLeftString = "Dn SW flux diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "SHFLX" ) then
    res_vars1@gsnLeftString = "Sensible heat flux"
    res_diff_vars1@gsnLeftString = "SH flux diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "LHFLX" ) then
    res_vars1@gsnLeftString = "Latent heat flux"
    res_diff_vars1@gsnLeftString = "LH flux at "+siglev+"% level"
  end if

  if ( varvar .eq. "FLNS" ) then
    res_vars1@gsnLeftString = "Net Up LW flux at the surface"
    res_diff_vars1@gsnLeftString = "Net Up LW flux diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "FLNSC" ) then
    res_vars1@gsnLeftString = "clrsky Surf Net Up LW flux"
    res_diff_vars1@gsnLeftString = "diff at "+siglev+"% level"
  end if

  if ( varvar .eq. "FLDS" ) then
    res_vars1@gsnLeftString = "Dn LW flux at the surf"
    res_diff_vars1@gsnLeftString = "Dn LW flux at "+siglev+"% level"
  end if

  if ( varvar .eq. "FLDSC" ) then
    res_vars1@gsnLeftString = "clrsky Dn LW flux at the surf"
    res_diff_vars1@gsnLeftString = "clrsky Dn LW flux at "+siglev+"% level"
  end if

EOF

#--------------------------
# write ncl function codes
#--------------------------

# write ncl func - string
cat > $ncl_func_string << EOF

;-----------------
; function codes
;-----------------
  ; ~S~: superscripts
  ; ~N~: back to normal
  ; ~B~: subscript 
  ; ~C~: start a new line below
  ; others: https://www.ncl.ucar.edu/Applications/fcodes.shtml

  ; type small "pi" : ~F33~p~F~

;----------------
; format string
;----------------

  aa = sprintf ("%5.2f" , x), ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/sprintf.shtml
  bb = sprinti ("%0.4i" , y), ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/sprinti.shtml 

EOF

# write ncl func - math
cat > $ncl_func_math << EOF

;-----------------------
; arithmetic operation
;-----------------------

  ;=== basic arithemetic operation ===
  ; = plus(a,b)      ; a+b    ignorant-defined function
  ; = diff(a,b)      ; a-b
  ; = divide(a,b)    ; a/b
  ; = multiply(a,b)  ; a*b
  ;
  ; = mod(n,m)       ; return remainder of n/m. e.g. mod(17,3) = 2

  ;=== numerical integral ===
  ;  = ftcurvi(,,,)  ; Calculates integrals of an interpolatory spline under tension between two user-specified limits.
  ;                  ; ex: ftcurvi(xl,xr,xx,yy), give xx,yy values then integral from xl to xr

  ;=== get PDF ===
  ; opt = True
  ; opt@bin_min  =  ; minimum value for the bin boundary.
  ; opt@bin_max  =  ; maximum value for the bin boundary.
  ; opt@bin_nice =  ; "nice" bin boundary values and spacing will be calculated. If the user has specified nbin, it will be ignored and the calculated number of bins will be used.
  ; = pdfx(x,nbin,opt) ; Generates a univariate probability density distribution (PDF).

EOF

# write ncl func - file
cat > $ncl_func_file << EOF

;-------
; file
;-------
  
  ;=== read ASCII file ===
  ; filename = "./z1.txt"
  ; row1    = 5
  ; column1 = 3
  ; = asciiread(filename, (/row1,column1/), "float") ; Reads a file that contains ASCII representations of basic data types.

EOF

# write ncl func - array
cat > $ncl_func_array << EOF

;-------------
; array
;-------------
  ; = dimsizes       (x)    ; Returns the dimension sizes of the input variable, x=x(nlat,nlon) => (/nlat,nlon/)
  ; = dim_avg_n      (x,2)  ; average second dimension, ex: x=(/3,5,10/) => x_avg = (/3,5/)
  ; = dim_avg_n_Wrap (x,2)  ; same as dim_avg_n except retains metadata

  ;=== reshape ===, http://www.ncl.ucar.edu/Document/Functions/Built-in/reshape.shtml
  ; x = random_uniform(-100,100,(/10,20,30/))
  ; xreshape = reshape(x,(/200,30/))

  ; x1d = ndtooned(x)         ; convert a N- array to a 1-d array

  ; xnd = onedtond(x,(/5,5/)) ; convert a 1-d array to N-d array
  
  ;=== logical expression  ===
  ;  a(ind(ismissing(a))) = 0;			; when using ind, the array "a" MUST be a one-dimensional array
  ;  a(ind(a.ne.0)) = -a(ind(a.ne.0)) * 2 + 1	; ind ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ind.shtml

;----------------
; useful command
;----------------
  ; = ismissing (x) ; Returns True for every element of the input that contains a missing value.

;------------
; find index
;------------

  ;=== find the closet index of a given value ===
  ; = closest_val(value, x)  ; Finds the index value in a monotonically increasing one-dimensional array closest to a desired value.

  ;=== find the index of maximum ===
  ; = dim_maxind(arg, dim)   ; Returns the index of the first occurrence of a maximum value within the specified dimension.
                             ; arg is the input array

  ; local_max_1d( x:1d numeric array, cyclic:logical, delta:numeric, iopt:integer) ; Determines the relative maxima for a 1-dimensional array.
                  cyclic: True - x is cyclic, False - x is not
                  delta : Tolerance level (positive). 
                  iopt=0    means return the maximum values. 
                      .ne.0 means return the indices [subscripts] where maximum values occured.

  ;=== find the index of minimum ===
  ; = dim_minind(arg, dim)   ; Returns the index of the first occurrence of a minimum value within the specified dimension.
                             ; arg is the input array

  ; local_mix_1d( x:1d numeric array, cyclic:logical, delta:numeric, iopt:integer) ; Determines the relative minima for a 1-dimensional array.
                  cyclic: True - x is cyclic, False - x is not
                  delta : Tolerance level (negative). 
                  iopt=0    means return the minimum values. 
                      .ne.0 means return the indices [subscripts] where minimum values occured.

EOF

# write ncl func - variable
cat > $ncl_func_variable << EOF

;--------------------------
; copy variable attributes 
;--------------------------
  ; copy_VarAtts(,)   ; copy one variable's attributes to another ex: (var_from,var_to)
  ; copy_VarCoords(,) ; Copies all named dimensions and coordinate variables from one variable to another, ex: (var_from,var_to)

EOF

# write ncl func - ignorant
cat > $ncl_func_ignorant << EOF

;-----------------------------
; ignorant defined functions 
;-----------------------------

  ; function binmap (xx:numeric,yy:numeric,xx_min[1]:numeric,xx_max[1]:numeric,xx_int[1]:numeric)
  ;          sort yy into xx bin based on user defined min,max,interval values
  ;          Return: zz(3,binsize), Index 0: number in each bin; Index 1: Average value in each bin; Index 2: standard deviation in each bin
  ;          xx    : multidimension array
  ;          yy    : multidimension array
  ;          xx_min: minimum value of bin
  ;          xx_max: maximum value of bin
  ;          xx_int: bin interal
  
  ; function binmap2(xdata[*]:numeric, ydata:numeric, nbin:integer, opt:logical)
  ;          sort ydata into xdata bin based on user defined min,max,interval values
  ;          this is an updated version of binmap2
  ;            xdata: an input 1-D data
  ;            ydata: an input 1D or 2D data, the rightmost dimension must be the same as xdata
  ;            nbin : number of bins for xdata
  ;            opt  : logical variable
  ;              opt@x_max = 100.  ; max value for bin x, if not set, max(xdata) will be used
  ;              opt@x_min =   0.  ; min value for bin x, if not set, min(xdata) will be used
  ;
  ;          return: a 3D array, [variable | 1] x [index | 5] x [bin | 4]
  ;                     dim variable: the same as the first dimension of ydata
  ;                     dim index   : Index 0: number in each bin; 
  ;                                   Index 1: Sum in each bin; 
  ;                                   Index 2: Average value in each bin; 
  ;                                   Index 3: standard deviation in each bin; 
  ;                                   Index 4: PDF of each bin
  ;                     dim bin     : number of bins

  ; procedure cnColors_PosNeg (varvar[*][*]:numeric, res[1]:logical, opt_cncolors[1]:logical)
  ;   assign colors to positive and negative values in NCL resources for plotting contour
  ;   return: res@cnFillColors
  ;     varvar       : 2-D array for plotting
  ;     res          : NCL resources
  ;     opt_cncolors : a logical varialbe to control availabe features in this procedure
  ;        opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
  ;      
  ;        opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
  ;                                                   ; False - contour levels will be computed in this procedure
  ;      
  ;        opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
  ;        opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
  ;        opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
  ;      
  ;        opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
  ;        opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
  ;        opt_cncolors@colormap_negative_index_end = 2             ; the least negative color

  ; function gsn_csm_contour_map_avg(wks[1]:graphic, data_input[*][*]:numeric, \
  ;                                  nclres[1]:logical, opt[1]:logical)
  ;          using NCL funtion gsn_csm_contour_map and ADD 2D-data average at @gsnCenterString 
  ;          there are also user-defined resources, opt
  ;
  ;          Return    : graphic, contour at map plot
  ;          wks       : work station
  ;          data_input: input 2-D data array
  ;          nclres    : any resources at NCL
  ;          opt       : user-define options
  ;            opt@LatWeighted = False    ; do average considering latitude transformation effects
  ;                                       ; if turn on, data_input coordinate variable's MUST in correct format
  ;            opt@MeanFormat = "%7.3f"   ; set mean value format
  ;            opt@MeanPrefix = "mean: "  ; set prefix of mean value

  ; function ignorant_convert_2Ddata (infilename[1]:string, varvar[1]:string, opt_2Ddata:logical)
  ;   convert input dataset to 2-D dataset for plotting a contour
  ;     infilename: input file name (CESM for now)
  ;     varvar    : variable in infilename
  ;     opt_2Ddata: option
  ;       opt_2Ddata@return_type = "pressure_time-latlon_avg" ; input: var(time,pressure,lat,lon). return var(pressure,time) averaged over lat & lon 
  ;       opt_2Ddata@plev        = (/500.,880.1000./)         ; pressure levels for interpolation
  ;
  ;       opt_2Ddata@return_type = "lat_time-lon_avg"         ; input: var(time,lat,lon). return variable(latitdue,time) averaged over lon
  ;
  ;       opt_2Ddata@return_type = "time-lat_lon-lon_mono"    ; input: var(time,lat,lon1). return variable(time,lat,lon2). lon2 is monotonic
  ;       opt_2Ddata@time_step   = 1                          ; set read-in time step

  ; function ignorant_get_var_files(infile_names:string, read_var_name[1]:string)
  ;          get same varible from different files, if [read_var_name] has dimension as (time,lat,lon)
  ;          the return dimension could be (file,time,lat,lon)
  ;
  ;          Return         : same type as [read_var_name], but add a extra dimension [file]
  ;          infile_names   : one-dimension string, full path of read-in files
  ;          read_var_name  : string, ONE varible name in infile_names
  
  ; function ignorant_get_vars_file(infilenames[0]:string, varvars[*]:string)
  ;          get all varibles from a file, if [varvars] has dimension as (time,lat,lon)
  ;          the return dimension could be (variable,time,lat,lon)
  ;
  ;          Return         : same type as [read_var_name], but add a extra dimension [variable]
  ;          infilename s   : string, ONE path of the read-in file
  ;          read_var_name  : string, read-in variables with the SAME dimension
  
  ; function ignorant_xy(wks:graphic, xx:numeric, yy:numeric , \
  ;                      labels:string, nclres:logical, opt:logical)
  ;          ignorant defined XY-plot function. gsn_csm_xy is the basic.
  ;
  ;          Return : graphic, XY plot.
  ;          wks    : work station
  ;          xx     : x-value
  ;          yy     : y-value
  ;          labels : each line title
  ;          nclres : any resources in NCL
  ;          opt    : user resources, not define
  ;            opt@legend_mean = True or False   ; turn on/off mean values on legends
  ;            opt@MeanFormat = "%6.2f"          ; format of the mean values

  ; function lat_wgt_avg(data_in:numeric)
  ;          compute latitude-weighted mean fields
  ;          Return  : longitude and latitude-weighted mean fields
  ;          data_in : numeric array, acceptable dimension orders are (lat,lon),(time,lat,lon),(time,?,lat,lon), (time,?,?,lat,lon).

  ; function sort_for_xyplot(xdata[*]:numeric, ydata[*]:numeric, zdata[*]:numeric, nbin:integer)
  ;          sort input zdata into several bins, and then return a data that can use for plotting a XY plot
  ;            xdata: an input 1-D data that would be plot on X-axis
  ;            ydata: an input 1-D data that would be plot on Y-axis
  ;            zdata: an input 1-D data that would be sorted into several bins
  ;            nbin : number of bins for zdata
  ;
  ;          return: a 3-D data plotvars (2,nbin,dimension of X,Y)
  ;                   plotvars@index = "0: x_plot_var, 1: y_plot_var"
  ;                   plotvars@nbin_labels = labels
  ;                   plotvars@nbin_mid    = layers
  ;                   plotvars@nbin_edge   = levels

  ; function taylor_diagram (wks:graphic ,RATIO[*][*]:numeric, CC[*][*]:numeric \
  ;                                     ,rOpts:logical)
  ;          wks  : work station
  ;          RATIO: ratio of the normalized standard deviation respect to the reference variable  
  ;          CC   : correlation coefficient
  ;          rOpts: NCL resources for taylor diagram
  ;
  ;          ref: http://www.ncl.ucar.edu/Applications/taylor.shtml

EOF

# write ncl func - atmos
cat > $ncl_func_atmos << EOF

  ;=== compute water vapor mixing ratio , given P,Td ===
  ; p_pa  =      ; pressure in Pa
  ; td_k  =      ; dew point temp in K
  ; iswit = 1    ; 1 = mixing ratio (kg/kg), 2 = specific humidity (kg/kg). A negative value changes the units to g/kg.
  ; = mixhum_ptd(p_pa,td_k,iswit)  ; Calculates the mixing ratio or specific humidity given pressure and dew point temperature.
  
  ;=== compute water vapor mixing ratio , given P,T,RH ===
  ; p_hpa =     ; pressure in hPa
  ; t_k   =     ; temperature in K
  ; rh    =     ; relative humidity in %
  ; iswit = 1   ; 1 = mixing ratio (kg/kg), 2 = specific humidity (kg/kg). A negative value changes the units to g/kg.
  ; = mixhum_ptrh(p_hpa, t_k, rh, iswit) ; Calculates the mixing ratio or specific humidity given pressure, temperature and relative humidity.

  ;=== interpolate to other pressure levels ===
  ; pin  = (/100.,200.,300./)   ; pressure levels of input varialbe 
  ; pout = (/150.,250./)        ; pressure levels of output varialbe 
  ; linlog = 1                  ; type of interpolation, linear=1, log != 1
  ; = intp(pin,xin,pout,linlog) ; interpolate xin from pin to pout

EOF

# write ncl func - cnplot
cat > $ncl_func_cnplot << EOF

;---------------
; contour plot
;---------------

;********************************************
  ; procedure cnColors_PosNeg (varvar[*][*]:numeric, res[1]:logical, opt_cncolors[1]:logical)
  ;   assign colors to positive and negative values in NCL resources for plotting contour
  ;   return: res@cnFillColors
  ;     varvar       : 2-D array for plotting
  ;     res          : NCL resources
  ;     opt_cncolors : a logical varialbe to control availabe features in this procedure
  ;        opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
  ;      
  ;        opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
  ;                                                   ; False - contour levels will be computed in this procedure
  ;      
  ;        opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
  ;        opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
  ;        opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
  ;      
  ;        opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
  ;        opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
  ;        opt_cncolors@colormap_negative_index_end = 2             ; the least negative color

;********************************************
  ; function gsn_csm_contour_map_avg(wks[1]:graphic, data_input[*][*]:numeric, \
  ;                                  nclres[1]:logical, opt[1]:logical)
  ;          using NCL funtion gsn_csm_contour_map and ADD 2D-data average at @gsnCenterString 
  ;          there are also user-defined resources, opt
  ;
  ;          Return    : graphic, contour at map plot
  ;          wks       : work station
  ;          data_input: input 2-D data array
  ;          nclres    : any resources at NCL
  ;          opt       : user-define options
  ;            opt@LatWeighted = False    ; do average considering latitude transformation effects
  ;                                       ; if turn on, data_input coordinate variable's MUST in correct format
  ;            opt@MeanFormat = "%7.3f"   ; set mean value format
  ;            opt@MeanPrefix = "mean: "  ; set prefix of mean value

;********************************************
  ; function ignorant_convert_2Ddata (infilename[1]:string, varvar[1]:string, opt_2Ddata:logical)
  ;   convert input dataset to 2-D dataset for plotting a contour
  ;     infilename: input file name (CESM for now)
  ;     varvar    : variable in infilename
  ;     opt_2Ddata: option
  ;       opt_2Ddata@return_type = "pressure_time-latlon_avg" ; input: var(time,pressure,lat,lon). return var(pressure,time) averaged over lat & lon 
  ;       opt_2Ddata@plev        = (/500.,880.1000./)         ; pressure levels for interpolation
  ;
  ;       opt_2Ddata@return_type = "lat_time-lon_avg"         ; input: var(time,lat,lon). return variable(latitdue,time) averaged over lon
  ;
  ;       opt_2Ddata@return_type = "time-lat_lon-lon_mono"    ; input: var(time,lat,lon1). return variable(time,lat,lon2). lon2 is monotonic
  ;       opt_2Ddata@time_step   = 1                          ; set read-in time step

EOF

# write ncl func - 
#cat > $ncl_func_ << EOF

#EOF

fi 
#*** end if of updating NCL documents ***

#--------------
# initialize 
#--------------

pram_idx_num=${#pram_idx[@]}

#check whether ncl script name is given
if [ -z $1 ]; then
  echo ""
  echo "Warning: ncl sciprt name is not define!"
  echo "program stop"
  echo ""
  echo "Usage: > sh ncl_crt.sh $usage"
  echo ""
  echo "Update nclcrt documents"
  echo ""
  #cat $ncl_usage || exit 1
  #rm -f $ncl_usage
  exit 101
fi

# initialize
option_case="F"
option_file="F"
option_var="F"
option_vname="F"
option_suffix="F"
option_plot="F"
option_fileson="F"
option_post="T"
option_diff="F"
option_func="F"
option_type="F"
plot_type="default"

#----------------------------------
# read parameters from command line
#----------------------------------

k=1
for ((i=1; i<=$pram_num; i=i+1))
do
  # read every parameters
  pram[i]=$1
  shift

  # read position of indexes
  case "${pram[$i]}" in
    [-][f] | [-][f][i][l][e] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][v] | [-][v][a][r] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][t] | [-][t][y][p][e] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][s] | [-][s][u][f][f][i][x] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][m] | [-][m][o][d][i][f][y] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][d] | [-][d][i][m] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][c] | [-][c][a][s][e] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][a] | [-][a][d][d] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][a][d][d][_][f][i][x][e][d] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][v][n][a][m][e] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][p][l][o][t][_][o][n] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][f][i][l][e][s][_][o][n] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;

    [-][f][u][n][c] )
      idx_pos[k]=$i
      k=$(($k+1))
      ;;
  esac

done

#--------------------------
# read indexes parameters
#--------------------------

# ncl script name
ncl_name=${pram[$pram_num]}

if [ $ncl_name == "-h" ] || [ $ncl_name == "-help" ] ; then
  echo ""
  echo "********************************"
  echo "*** Create NCL sample script ***"
  echo "********************************"
  echo ""
  #echo "Usage: > sh ncl_crt.sh $usage ooo.ncl"
  #echo "Usage: > sh ncl_crt.sh [OPTIONS] ooo.ncl"

  cat $ncl_usage || exit 1
  #rm -f $ncl_usage

  exit 0

#elif [ $ncl_name == "-func" ]; then
#  echo ""
#  echo "****************************"
#  echo "*** NCL useful functions ***"
#  echo "****************************"
#  echo ""
#
#  cat $ncl_func || exit 1
#  exit 0

elif [ $ncl_name == "-plotvars" ]; then
  echo ""
  echo "******************************"
  echo "*** NCL res for variables  ***"
  echo "******************************"
  echo ""

  cat $ncl_plotvars || exit 1
  exit 0

elif [ $ncl_name == "-res" ] || [ $ncl_name == "-r" ]; then
  echo ""
  echo "****************************"
  echo "*** NCL common resources ***"
  echo "****************************"
  echo ""
  echo "avialable: (${codes_index[@]})"
  read -p "Which one do you want to view? (type 11 to exit): " choice

  file1=${ncl_codes}.${choice}

  if [ $choice == "11" ]; then
    aa=0
  elif [ -f $file1 ]; then
    cat $file1
  else
    echo "ERROR: file [$file1] doesn't exist!"
  fi
  echo ""
  exit 0

elif [ $ncl_name == "-func" ]; then
  echo ""
  echo "*********************"
  echo "*** NCL functions ***"
  echo "*********************"
  echo ""
  echo "avialable: (${func_index[@]})"
  read -p "Which one do you want to view? (type 11 to exit): " choice

  file1=${ncl_func}.${choice}

  if [ $choice == "11" ]; then
    aa=0
  elif [ -f $file1 ]; then
    cat $file1
  else
    echo "ERROR: file [$file1] doesn't exist!"
  fi
  echo ""
  exit 0

fi

# do not allow script name started with "-" because it is hard to delete, e.g -r.ncl
if [ ${ncl_name:0:1} == "-" ]; then
  echo "WARNING: ncl script name [$ncl_name] start with [-]"
  echo "please re-enter the script name"
  echo "refer to notes: [${notes[@]}]"
  echo "program stop"
  exit 0
fi

if [ -f $ncl_name ]; then
  echo "[$ncl_name] is already exist!"
  read -p "Do you want to overwrite it? (y/n) " choice

  if [ $choice -a $choice == "y" ]; then
    rm -f $ncl_name && echo "Done. remove [$ncl_name]" || exit 203
  else
    echo "[$ncl_name] can not overwrite!"
    echo "program stop"
    exit 201
  fi
fi

# add ncl script name index to extra index position
nn=${#idx_pos[@]}
idx_pos[$nn+1]=$pram_num
idx_num=${#idx_pos[@]}

# divide parameters to used varibles 
for ((i=1; i<$idx_num; i=i+1))
do
 

   n1=${idx_pos[$i]}
   n2=${idx_pos[$i+1]}
   nn=$(($n2-$n1-1))

   idx_name=${pram[$n1]}
   kk=0

   
   if [ $idx_name == "-plot_on" ]; then
     option_plot="T"
   fi

   if [ $idx_name == "-files_on" ]; then
     option_fileson="T"
   fi

   if [ $idx_name == "-func" ]; then
     option_func="T"
   fi

   if [ $nn -ge 1 ]; then

     if [ $idx_name == "-f" ] || [ $idx_name == "-file" ] ; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_file="T"
         infile[kk]=${pram[$j]}
         filenames="$filenames${infile[kk]},"
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-v" ] || [ $idx_name == "-var" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_var="T"
         var[kk]=${pram[$j]}
         varnames="$varnames${var[kk]},"
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-vname" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_vname="T"
         vname[kk]=${pram[$j]}
         newvarnames="${newvarnames}${vname[kk]},"
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-s" ] || [ $idx_name == "-suffix" ] ; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_suffix="T"
         suffix[kk]=${pram[$j]}
         suffixnames="${suffixnames}${suffix[kk]},"
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-t" ] || [ $idx_name == "-type" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_plot="T"
         option_type="T"
         plot_custom=${pram[$j]}
       done

     elif [ $idx_name == "-m" ] || [ $idx_name == "-modify" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         modify[kk]=${pram[$j]}
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-d" ] || [ $idx_name == "-dim" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         dims[kk]=${pram[$j]}
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-c" ] || [ $idx_name == "-case" ]; then
       option_case="T"
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         casename=${pram[$j]}
       done

     elif [ $idx_name == "-a" ] || [ $idx_name == "-add" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_add="T"
         add_parameter[kk]=${pram[$j]}
         kk=$(($kk+1))
       done

     elif [ $idx_name == "-add_fixed" ]; then
       for ((j=$n1+1; j<$n2; j=j+1))
       do
         option_add="T"
         option_add_fixed="T"
         add_parameter[kk]=${pram[$j]}
         kk=$(($kk+1))
       done

     fi

   fi
done

if [ $option_case -a $option_case == "T" ]; then
  option_file="F"
  option_post="F"
fi

#=============
# check part
#=============

# get number of files and suffixes
num_suffix=${#suffix[@]}
num_files=${#infile[@]}
num_vars=${#var[@]}
num_vname=${#vname[@]}
num_case=${#cases[@]}
num_type_avil=${#type_avil[@]}

#-----------------
# check suffix
#-----------------

# if user given suffixes
if [ $option_suffix -a $option_suffix == "T" ] && [ $option_case != "T" ]; then

  # number of files and suffixes is the same, set user-given suffixes
  if [ $num_files -eq $num_suffix ]; then
    for ((i=0; i<$num_files; i=i+1))
    do
      suffix_work[$i]=${suffix[$i]}
    done

  # number of files and suffixes is not the same, set suffix from 1 to $num_files
  else
    echo ""
    echo "WARNING: number of files and suffixes is not the same"
    echo "  suffix use number 1,2,3..."
    echo ""
    for ((i=0; i<$num_files; i=i+1))
    do
      suffix_work[$i]="set$(($i+1))"
    done
  fi

# if user setup a case
elif [ $option_case -a $option_case == "T" ]; then 

  if [ $num_files -ne $num_suffix ]; then
    num_suffix=$num_files
  fi

  for ((i=0; i<$num_suffix; i=i+1))
  do
    suffix_work[$i]=${suffix[$i]}
    if [ ! ${suffix_work[$i]} ]; then
      suffix_work[$i]="set$(($i+1))"
    fi
  done

# if user not given suffixes
else

  for ((i=0; i<$num_files; i=i+1))
  do
    suffix_work[$i]="set$(($i+1))"
  done

#*** end of option_suffix ***
fi

#---------------------
# check vname
#---------------------
if [ $option_vname -a $option_vname == "T" ]; then

  # number of vars and vnames is the same, set user-given vnamees
  if [ $num_vars -eq $num_vname ]; then
    for ((i=0; i<$num_vars; i=i+1))
    do
      vname_work[$i]=${vname[$i]}
    done

  # number of vars and vnames is not the same, set vname equal var
  else
    echo ""
    echo "WARNING: number of vars and vnames is not the same"
    echo "  vname use number vars"
    echo ""
    for ((i=0; i<$num_vars; i=i+1))
    do
      vname_work[$i]=${var[$i]}
    done
  fi

# if user not given vnamees
else

  for ((i=0; i<$num_vars; i=i+1))
  do
    vname_work[$i]=${var[$i]}
  done

fi # end of option_vname

#---------------------
# check dimensions
#---------------------

if [ $option_case -a $option_case == "T" ]; then
  if [ $dims ]; then
    dim_work="(${dims})"
  else
    dim_work=""
  fi

else

  for ((dd=0; dd<$num_vars; dd=dd+1))
  do
    if [ ${dims[$dd]} -a ${dims[$dd]} == "xx" ]; then
      dims_work[$dd]=""

    elif [ ! ${dims[$dd]} ]; then
      dims_work[$dd]=""

    else
      dims_work[$dd]="(${dims[$dd]})"
    fi
done

fi

#---------------------
# check plot_custom
#---------------------
plot_type=""

if [ $option_type -a $option_type == "T" ]; then

for ((i=0; i<$num_type_avil; i=i+1))
do
  if [ $plot_custom -a $plot_custom == ${type_avil[$i]} ]; then
    type00=${plot_custom:0:2}

    if [ $type00 -a $type00 == "xy" ]; then
      plot_type="xy"
    elif [ $type00 -a $type00 == "cn" ]; then
      plot_type="cn"
    fi
  fi
done

if [ ! $plot_type ]; then
  echo ""
  echo "!!! WARNING: plot type [$plot_custom] is not available !!!"
  echo "!!! set to default !!!"
  echo ""
  plot_type="default"
  plot_custom=""
fi

fi # end if of option_type

#------------------
# check plot_res
#------------------

#set -x

num_res_in=${#plot_res[@]}
num_res_avil=${#res_avil[@]}
check1=""

for ((j=0; j<$num_res_in; j=j+1))
do
  check1=""
  for ((i=0; i<$num_res_avil; i=i+1))
  do
    if [ ${plot_res[$j]} -a ${plot_res[$j]} == ${res_avil[$i]} ]; then
      check1="aaa"
  
    elif [ ! $plot_res ]; then
      check1="bbb"

    fi
  done

  if [ ! $check1 ]; then
    echo ""
    echo "!!! WARNING: plot res [${plot_res[$j]}] is not available !!!"
    echo ""
  fi
done

# set right plot type to given res
res_cn=(cldf_cn lwtoa_cn swtoa_cn prec_cn cwp_cn qc_cn rh_cn)
num_res_cn=${#res_cn[@]}

for ((j=0; j<$num_res_in; j=j+1))
do
  for((i=0; i<$num_res_cn; i=i+1))
  do
    if [ ${plot_res[$j]} -a ${plot_res[$j]} == ${res_cn[$i]} ]; then
      option_plot="T"

      if [ $plot_type ] && [ ! $plot_type == "cn" ]; then
        echo ""
        echo "!!! WARNING: plot res [$plot_res] MUST be contour plot !!!"
        echo "!!! set plot type to [cn] !!!"
        echo ""

        plot_type="cn"
        plot_custom="cn"
      fi
    fi
  done
done

#---------------------
# check case
#---------------------

if [ $option_case -a $option_case == "T" ]; then

# check case name
casename_work=""

# set casename_work
for((i=0; i<$num_case; i=i+1))
do
  if [ $casename -a $casename == ${cases[$i]} ]; then
    casename_work=$casename
    break
  fi
done

# check whether available case name
if [ ! $casename_work ]; then
  echo ""
  echo "ERROR: unvalid case name [$casename]"
  echo ""
  echo "available case names :"
    for ((i=0; i<$num_case; i=i+1))
    do
      echo "                       $(($i+1)), ${cases[$i]}"    
    done
  echo "program stop"
  echo ""
  exit 1
fi

# get varaibles = "v1","v2","v3" & suffix = "s1","s2","s3"
  bbb=`echo ${var[@]} | sed "s/ /\",\"/g"`
  bbb=\"${bbb}
  bbb=${bbb}\"
  var01s=$bbb

  ccc=`echo ${suffix_work[@]} | sed "s/ /\",\"/g"`
  ccc=\"${ccc}
  ccc=${ccc}\"
  suffix01s=$ccc

#*** check case == "cesm-pres_global-2files" ***
if [ $casename_work -a $casename_work == "cesm-prec_global-2files" ]; then

  # file number must equals 2
  if [ $num_files -a $num_files -eq 2 ]; then
    num_file_write=2
    num_suffix_write=2

  else
    echo ""
    echo "!!! ERROR: number of input files [$num_files] for case [$casename_work] is MUST 2 !!!"
    echo "!!! input files: [${num_files}#, ${infile[@]}]"
    echo ""
    echo "program stop"
    echo ""
    exit 1
  fi

  # dim work
  if [ ! $dim_work ]; then
    dim_work="(ttt,:,:)"
  fi

#*** check case == "cam-hybrid2pres" ***
elif [ $casename_work -a $casename_work == "cam-hybrid2pres" ]; then

  aa=0

#*** check case == "cesm-pres_global-2files" ***
elif [ $casename_work -a $casename_work == "cesm-cldf_global-3files" ]; then

  # file number equals 3
  if [ $num_files -a $num_files -eq 3 ]; then
    num_file_write=3
    num_suffix_write=3

  # file number equals 2
  elif [ $num_files -a $num_files -eq 2 ]; then
    num_file_write=2
    num_suffix_write=2

    file03=$temp
    suffix03=$temp

    echo ""
    echo "!!! WARNING: only input TWO files !!!"
    echo "!!! Please edit NCL script if necessary !!!"
    echo ""

  else
    echo ""
    echo "!!! ERROR: number of input files [$num_files] for case [$casename_work] is MUST 3 or 2 !!!"
    echo "!!! input files: [${num_files}#, ${infile[@]}]"
    echo ""
    echo "program stop"
    echo ""
    exit 1
  fi

#*** check case == "cesm-pres_zonal-2files" ***
elif [ $casename_work -a $casename_work == "cesm-cldf_zonal-3files" ]; then

  # file number equals 3
  if [ $num_files -a $num_files -eq 3 ]; then
    num_file_write=3
    num_suffix_write=3

  # file number equals 2
  elif [ $num_files -a $num_files -eq 2 ]; then
    num_file_write=2
    num_suffix_write=2

    file03=$temp
    suffix03=$temp

    echo ""
    echo "!!! WARNING: only input TWO files !!!"
    echo "!!! Please edit NCL script if necessary !!!"
    echo ""

  else
    echo ""
    echo "!!! ERROR: number of input files [$num_files] for case [$casename_work] is MUST 3 or 2 !!!"
    echo "!!! input files: [${num_files}#, ${infile[@]}]"
    echo ""
    echo "program stop"
    echo ""
    exit 1
  fi

#*** check case == "cesm-contour-2filess" ***
elif [ $casename_work -a $casename_work == "cesm-contour-2files" ]; then

    # file number equals 2
    if [ $num_files -a $num_files -eq 2 ]; then
      num_file_write=2
      num_suffix_write=2
      var01=${var[0]}

    else
      echo ""
      echo "!!! ERROR: number of input files [$num_files] for case [$casename_work] is MUST 2 !!!"
      echo "!!! input files: [${num_files}#, ${infile[@]}]"
      echo ""
      echo "program stop"
      echo ""
      exit 1
    fi

#*** check case == "ttest" ***
elif [ $casename -a $casename == "ttest" ]; then
  num_file_write=2
  num_suffix_write=2

  var01=${var[0]}

#*** check case == "cesm-profile-2files" ***
elif [ $casename -a $casename == "cesm-profile-2files" ]; then

  # file number equals 2
  if [ $num_files -a $num_files -eq 2 ]; then
    num_file_write=2
    num_suffix_write=2
    var01=${var[0]}

  else

    echo ""
    echo "!!! ERROR: number of input files [$num_files] for case [$casename_work] is MUST 2 !!!"
    echo "!!! input files: [${num_files}#, ${infile[@]}]"
    echo ""
    echo "program stop"
    echo ""
    exit 1
  fi

#*** check case == "binmap-one" ***
elif [ $casename -a $casename == "binmap-one" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "binmap-overlay" ***
elif [ $casename -a $casename == "binmap-overlay" ]; then
  num_file_write=2
  num_suffix_write=2

  var01=${var[0]}
  var02=${var[1]}

#*** check case == "cloudsat-radar-series" ***
elif [ $casename -a $casename == "cloudsat-radar-series" ]; then
    num_suffix_write=1

#*** check case == "cloudsat-cldclass-series" ***
elif [ $casename -a $casename == "cloudsat-cldclass-series" ]; then
    num_suffix_write=1

#*** check case == "pdf" ***
elif [ $casename -a $casename == "pdf" ]; then
    num_file_write=1
    num_suffix_write=1
    var01=${var[0]}

#*** check case == "cloudsat-cldclass-series" ***
elif [ $casename -a $casename == "cloudsat-cldlayer-series" ]; then
    num_file_write=1
    num_suffix_write=1

#*** check case == "contour-2xy" ***
elif [ $casename -a $casename == "contour-2xy" ]; then
    num_file_write=1
    num_suffix_write=1
    var01=${var[0]}

#*** check case == "cesm-prec_monthly_contour-2sets" ***
elif [ $casename -a $casename == "cesm-prec_monthly_contour-2sets" ]; then

  check1=`echo $(($num_files % 2))`  # get remainder of num_files/2
  if [ $check1 -ne 0 ]; then
    echo ""
    echo "ERROR: input files number [$num_files] MUST be EVEN NUMBER (2,4,6...) for case [$casename]"
    echo "program stop"
    echo ""
    exit 1
  fi

  # set suffix
  num_suffix_write=2

#*** check case == "cesm-wind_prec_monthly-2sets" ***
elif [ $casename -a $casename == "cesm-wind_prec_monthly-2sets" ]; then

  check1=`echo $(($num_files % 2))`  # get remainder of num_files/2
  if [ $check1 -ne 0 ]; then
    echo ""
    echo "ERROR: input files number [$num_files] MUST be EVEN NUMBER (2,4,6...) for case [$casename]"
    echo "program stop"
    echo ""
    exit 1
  fi

  # set suffix
  num_suffix_write=2

#*** check case == "cesm-prec_monthly_zonal-2sets" ***
elif [ $casename -a $casename == "cesm-prec_monthly_zonal-2sets" ]; then

  check1=`echo $(($num_files % 2))`  # get remainder of num_files/2
  if [ $check1 -ne 0 ]; then
    echo ""
    echo "ERROR: input files number [$num_files] MUST be EVEN NUMBER (2,4,6...) for case [$casename]"
    echo "program stop"
    echo ""
    exit 1
  fi

  # set suffix
  num_suffix_write=2

#*** check case == "cesm-div_plev-2files" ***
elif [ $casename -a $casename == "cesm-div_plev-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "cesm-moist_conv_plev-2files" ***
elif [ $casename -a $casename == "cesm-moist_conv_plev-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "cesm-moist_conv_vint-2files" ***
elif [ $casename -a $casename == "cesm-moist_conv_vint-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "surface_type-single" ***
elif [ $casename -a $casename == "surface_type-single" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "surface_type-monthly" ***
elif [ $casename -a $casename == "surface_type-monthly" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "cesm-write-moist_conv-2sets" ***
elif [ $casename -a $casename == "cesm-write-moist_conv-2sets" ]; then

  check1=`echo $(($num_files % 2))`  # get remainder of num_files/2
  if [ $check1 -ne 0 ]; then
    echo ""
    echo "ERROR: input files number [$num_files] MUST be EVEN NUMBER (2,4,6...) for case [$casename]"
    echo "program stop"
    echo ""
    exit 1
  fi

  # set suffix
  num_suffix_write=2

#*** check case == "nc-compare-var" ***
elif [ $casename -a $casename == "nc-compare-var" ]; then
  var01=${var[0]}

#*** check case == "cesm-massflux_siglvl-2files" ***
elif [ $casename -a $casename == "cesm-massflux_siglvl-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "cesm-omega_siglvl-2files" ***
elif [ $casename -a $casename == "cesm-omega_siglvl-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "cesm-prec_siglvl-2files" ***
elif [ $casename -a $casename == "cesm-prec_siglvl-2files" ]; then
  num_file_write=2
  num_suffix_write=2

#*** check case == "cesm-regrid_2files-CERES_EBAF" ***
elif [ $casename -a $casename == "cesm-regrid_2files-CERES_EBAF" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "cesm-regrid_2files-ERAIN_w500" ***
elif [ $casename -a $casename == "cesm-regrid_2files-ERAIN_w500" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "cesm-regrid_2files-ERAIN_ts" ***
elif [ $casename -a $casename == "cesm-regrid_2files-ERAIN_ts" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "cesm-regrid_2files-GPCP" ***
elif [ $casename -a $casename == "cesm-regrid_2files-GPCP" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "taylor-diagram" ***
elif [ $casename -a $casename == "taylor-diagram" ]; then
  num_file_write=1
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "cesm-file-time_series" ***
elif [ $casename -a $casename == "cesm-file-time_series" ]; then
  num_file_write=1
  num_suffix_write=1

#*** check case == "rrtmg-contour-band_diff" ***
elif [ $casename -a $casename == "rrtmg-contour-band_diff" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "cesm-contour-3files" ***
elif [ $casename -a $casename == "cesm-contour-3files" ]; then
  num_file_write=3
  num_suffix_write=3
  var01=${var[0]}

#*** check case == "cesm-cn_map-specified" ***
elif [ $casename -a $casename == "cesm-cn_map-specified" ]; then
  var01=$var01s

#*** check case == "cesm-cn_map-flexible" ***
elif [ $casename -a $casename == "cesm-cn_map-flexible" ]; then
  var01=$var01s
  suffix01=$suffix01s

#*** check case == "scam-time_series-flexible" ***
elif [ $casename -a $casename == "scam-time_series-flexible" ]; then
  var01=$var01s
  suffix01=$suffix01s

#*** check case == "scam-time_pressure-flexible" ***
elif [ $casename -a $casename == "scam-time_pressure-flexible" ]; then
  var01=$var01s
  suffix01=$suffix01s

#*** check case == "cesm-contour-vars" ***
elif [ $casename -a $casename == "cesm-contour-vars" ]; then
  num_file_write=1
  num_suffix_write=1

#*** check case == "cesm-cross_sec-files" ***
elif [ $casename -a $casename == "cesm-cross_sec-files" ]; then
  var01=${var[0]}

#*** check case == "barchart-basic" ***
elif [ $casename -a $casename == "barchart-basic" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "eof-exp_coeffs-1file" ***
elif [ $casename -a $casename == "eof-exp_coeffs-1file" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "eof-pc_contour-1file" ***
elif [ $casename -a $casename == "eof-pc_contour-1file" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "eof-variance_cumsum-1file" ***
elif [ $casename -a $casename == "eof-variance_cumsum-1file" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "kmeans_cluster-contour-file1" ***
elif [ $casename -a $casename == "kmeans_cluster-contour-file1" ]; then
  num_file_write=1
  num_suffix_write=1
  var01=${var[0]}

#*** check case == "cloudsat-groundtrack-ascd_dscd" ***
elif [ $casename -a $casename == "cloudsat-groundtrack-ascd_dscd" ]; then
  num_file_write=1
  num_suffix_write=1

#*** check case == "cloudsat-groundtrack-time_series" ***
elif [ $casename -a $casename == "cloudsat-groundtrack-time_series" ]; then
  num_file_write=1
  num_suffix_write=1

#*** check case == "scam-arm95-time_series" ***
elif [ $casename -a $casename == "scam-arm95-time_series" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "scatter_criteria-input_1D" ***
elif [ $casename -a $casename == "scatter_criteria-input_1D" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "scatter_criteria-input_1D" ***
elif [ $casename -a $casename == "scatter_criteria-input_2D" ]; then
  num_file_write=2
  num_suffix_write=2
  var01=${var[0]}

#*** check case == "check-filevar-missing" ***
elif [ $casename -a $casename == "check-filevar-missing" ]; then
  num_file_write=1
  num_suffix_write=1

#*** check case == "cesm-print-vars" ***
elif [ $casename -a $casename == "cesm-print-vars" ]; then
  var01=${var01s}
  suffix01=${suffix01s}

#*** check case == "cesm-xy-flexible" ***
elif [ $casename -a $casename == "cesm-xy-flexible" ]; then
  var01=${var01s}
  suffix01=${suffix01s}

#*** check case == "cesm-cn_2dim-flexible" ***
elif [ $casename -a $casename == "cesm-cn_2dim-flexible" ]; then
  var01=${var01s}
  suffix01=${suffix01s}

#*** check case == "cesm-wind_cn_map-flexible" ***
elif [ $casename -a $casename == "cesm-wind_cn_map-flexible" ]; then
  var01=${var01s}
  suffix01=${suffix01s}

#*** check case == "newcase" ***
#elif [ $casename -a $casename == "newcase" ]; then

fi # end if of check case
fi # end if of option_case


# set write filenames 
if   [ $num_file_write ] && [ $num_file_write -eq 1 ]; then 
  file01=${infile[0]}

elif [ $num_file_write ] && [ $num_file_write -eq 2 ]; then 
  file01=${infile[0]}
  file02=${infile[1]}

elif [ $num_file_write ] && [ $num_file_write -eq 3 ]; then 
  file01=${infile[0]}
  file02=${infile[1]}
  file03=${infile[2]}
fi

# set write suffix 
if   [ $num_suffix_write ] && [ $num_suffix_write -eq 1 ]; then 
  suffix01=${suffix_work[0]}

elif [ $num_suffix_write ] && [ $num_suffix_write -eq 2 ]; then 
  suffix01=${suffix_work[0]}
  suffix02=${suffix_work[1]}

elif [ $num_suffix_write ] && [ $num_suffix_write -eq 3 ]; then 
  suffix01=${suffix_work[0]}
  suffix02=${suffix_work[1]}
  suffix03=${suffix_work[2]}
fi

#if [ ! $suffix01 ]; then
#  suffix01="set1"
#fi
#if [ ! $suffix02 ]; then
#  suffix02="set2"
#fi
#if [ ! $suffix03 ]; then
#  suffix03="set3"
#fi

#==============================================
# create sample scripts based on input NCL file
#==============================================

temp=`date +%Y%m%d%H%M%S`
ftemp="$wrkdir/ggmmiirr.$temp"
ftemp01="$ftemp.temp01"
ftemp02="$ftemp.temp02"
ftemp03="$ftemp.temp03"
ftemp04="$ftemp.temp04"
ftempXX="$ftemp.temp.final"

if [ $option_add -a $option_add == "T" ]; then

  sample_file=${add_parameter[0]}
  sample_case=${add_parameter[1]}

  # if sample_file does not exist
  if [ ! $sample_file ] || [ ! -f $sample_file ]; then
    echo ""
    echo "ERROR: file [$sample_file] does not exist!"
    echo "Usage: ncl_case.sh -a (file name) (case name) output.sh"
    echo "program stop"
    exit 1

  # if casename does not exist
  elif [ ! $sample_case ]; then
    echo ""
    echo "ERROR: case name [$sample_case] is not given!"
    echo "Usage: ncl_case.sh -a (file name) (case name) output.sh"
    echo "program stop"
    exit 1

  fi

  #******************
  # write NCL codes
  #******************

  # find line number of begin and end
  num_ss=`grep -n ^begin$ $sample_file | cut -d ':' -f 1`
  num_ee=`grep -n ^end$   $sample_file | cut -d ':' -f 1`

  if [ ! $num_ss ]; then
    echo "ERROR: cannot find 'begin' in file [$sample_file]"
    echo "program stop"
    exit 1
  elif [ ! $num_ee ]; then
    echo "ERROR: cannot find 'end' in file [$sample_file]"
    echo "program stop"
    exit 1
  fi

  # grep NCL codes between begin and end
  cat $sample_file | sed -n "$(($num_ss+1)),$(($num_ee-1))p" > $ftemp01

  # replace '\' to '\\'
  sed -i 's,\\,\\\\,g' $ftemp01 || exit 3

  # replace '$' to '\$'
  sed -i 's,\$,\\\$,g' $ftemp01 || exit 3

  # replace infilenames
  n1_sss=`grep -n infilenames $ftemp01 | sed -n 1p | cut -d ':' -f 1`  # get line number of infilenames
  grep -n \/\) $ftemp01 > $ftemp04 || exit 5
  num1=`wc -l $ftemp04 | cut -d ' ' -f 1`
  stop1="F"
  for ((i=1; i<=$num1; i=i+1))
  do
    if [ ! $stop1 == "T" ]; then
      n1=`sed -n ${i}p $ftemp04 | cut -d ":" -f 1`
      if [ $n1 -ge $n1_sss ]; then
        n1_eee=$n1   # get line number of infilenames end
        stop1="T"
      fi
    fi
  done

  # delete infilenames codes
  sed -i "${n1_sss},${n1_eee}d" $ftemp01 || exit 5  
  sed -i "${n1_sss}i ${temp}${temp}" $ftemp01 || exit 5

cat > $ftemp04 << EOF1
EOF

  cat >> \$ncl_name << EOF

  infilenames = (/  \\\\
EOF

  for (( j=0; j<\${num_files}; j=j+1 ))
  do
     if [ \$j -eq \$((num_files-1)) ]; then
       cat >> \$ncl_name << EOF
                  "\${infile[\$j]}" /)
EOF
     else
       cat >> \$ncl_name << EOF
                  "\${infile[\$j]}", \\\\
EOF
     fi
  done

  cat >> \$ncl_name << EOF
EOF1

  sed -i "/${temp}${temp}/ r $ftemp04" $ftemp01 || exit 5  
  sed -i "/${temp}${temp}/d" $ftemp01 || exit 5

  # replace varvars and suffixes
  sed -i "s/varvars = (.*/varvars = (\/\${var01}\/)/g" $ftemp01 || exit 5
  sed -i "s/suffixes = (.*/suffixes = (\/\${suffix01}\/)/g" $ftemp01 || exit 5

  #--------------------------------
  # given certain amount of files
  #--------------------------------
  if [ $option_add_fixed -a $option_add_fixed == "T" ]; then

    # get number & names of addfile
    grep "=.*addfile[^s]" $ftemp01 | sed "s/=.*//g" | sed "s/ //g" > $ftemp02
    num_infiles=`wc -l $ftemp02 | cut -d ' ' -f 1`
  
    for ((i=1; i<=$num_infiles; i=i+1))
    do
      # get file and suffix name in sample_file
      file1=`cat $ftemp02 | sed -n $i'p'`
      suffix1=`echo $file1 | sed "s/.*_//g"`
      #echo $file1,$suffix1
  
      # count number
      ii=`printf %2.2i $i`
  
      # new file name
      newfile1="\\\${file${ii}}"
  
      # new file var
      newvar1="file_\\\${suffix${ii}}"
  
      # new suffix
      newsuffix1="\\\${suffix${ii}}"
  
      #echo $newfile1,$newsuffix1
  
      # replace to new value
      sed -i "s/.*${file1}.*addfile.*/  ${newvar1} = addfile( \"$newfile1\" , \"r\" )/g" $ftemp01 || exit 3
      sed -i "s/${file1}/${newvar1}/g"      $ftemp01 || exit 3
      sed -i "s/${suffix1}/${newsuffix1}/g" $ftemp01 || exit 3
    done
  fi  # end if of option_add_fixed

  # replace '\' to '\\'
  #sed -i 's,\\,\\\\,g' $ftemp01 || exit 3

  # replace '$' to '\$'
  #sed -i 's,\$,\\\$,g' $ftemp01 || exit 3

  # write head and end to ftemp01
  sed -i "1i #*** case: \"$sample_case\" start ***" $ftemp01 || exit 3
  sed -i "1a elif [ \$casename_work -a \$casename_work == \"$sample_case\" ]; then" $ftemp01 || exit 3
  sed -i "2a cat >> \$ncl_name << EOF" $ftemp01 || exit 3
  sed -i "3a ;--------------------" $ftemp01 || exit 3
  sed -i "4a ; Description:" $ftemp01 || exit 3
  sed -i "5a ; " $ftemp01 || exit 3
  sed -i "6a ;--------------------" $ftemp01 || exit 3

  echo "EOF" >> $ftemp01 || exit 3
  echo "#*** case: \"$sample_case\" end ***" >> $ftemp01 || exit 3

  #****************************
  # write file & suffix codes
  #****************************

  #num_file_write=$num_infiles
  #num_suffix_write=$num_infiles

  # bash start
  cat > $ftempXX << EOF
#!/bin/bash

#*** check case == "$sample_case" ***
elif [ \$casename -a \$casename == "$sample_case" ]; then
  var01=\${var01s}
  suffix01=\${suffix01s}

EOF

  #**********************************
  # combine file,suffix & NCL codes
  #**********************************
  cat $ftemp01 >> $ftempXX

  cp -i $ftempXX $ncl_name || exit 5
  rm $ftemp.*

  #*********************
  # echo information
  #*********************
  echo ' '
  echo '----------------------------'
  echo 'Transform Sample NCL script to ncl_case.sh'
  echo ' '
  echo "out file name is [$ncl_name]"
  echo ' '
  echo "read file     is [$sample_file]"
  echo "out case name is [$sample_case]"
  echo '----------------------------'
  echo ' '

  exit 0

fi # end if of option_add

#====================
# create ncl script
#====================

#***********************
# shared loading part
#***********************
cat > $ncl_name << EOF
load "$ncargroot/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "$ncargroot/lib/ncarg/nclscripts/wrf/WRFUserARW.ncl"
load "$ncargroot/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "$ncargroot/lib/ncarg/nclscripts/csm/contributed.ncl"
load "$ncargroot/lib/ncarg/nclscripts/csm/shea_util.ncl"
load "$ignorant_name1"
load "$ignorant_name2"

begin

EOF

if [ $option_case != "T" ]; then

  if [ $option_fileson == "T" ]; then
    cat >> $ncl_name << EOF
;------------------
; general settings
;------------------

EOF

  loop_vars_1d=(title wks_name xaxisstring yaxisstring)
  loop_vars_2d=(labelname)

  # write all file names to variable $infilenames
  cat >> $ncl_name << EOF
  filenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  # write other variables
  cat >> $ncl_name << EOF

  nfile = dimsizes(filenames)
  titles = filenames
  wks_names = filenames
  xaxisstrings = filenames
  yaxisstrings = filenames
  labelnames = new( (/nfile,2/) , "string")

EOF

  for var111 in ${loop_vars_1d[@]}
  do
    for (( j=0; j<${num_files}; j=j+1 ))
    do
      echo "  ${var111}s(${j}) = \"\"" >> $ncl_name
    done
    echo "" >> $ncl_name
  done

  for var111 in ${loop_vars_2d[@]}
  do
    for (( j=0; j<${num_files}; j=j+1 ))
    do
      echo "  ${var111}s(${j},:) = (/\"\"" , \"\""/)" >> $ncl_name
    done
    echo "" >> $ncl_name
  done
  
  # write do-loop
  cat >> $ncl_name << EOF
  do ff=0,nfile-1
    filename = filenames(ff)
    print("processing "+ff+"/"+nfile+",  ["+filename+"]")

EOF

  for var111 in ${loop_vars_1d[@]}
  do
    echo "    ${var111} = ${var111}s(ff)" >> $ncl_name
  done
  for var111 in ${loop_vars_2d[@]}
  do
    echo "    ${var111} = ${var111}s(ff,:)" >> $ncl_name
  done
  cat >> $ncl_name << EOF

;-----------------------------
; open files & read varibles
;-----------------------------

    file_${suffix_work[0]} = addfile( filename , "r" )

  end do  ; loop of filenames

EOF

  else  # if option_fileson == "F"

    cat >> $ncl_name << EOF
;------------------
; general settings
;------------------

  wks_name = "test111"
  wks_type = "png"  ; or x11,pdf,ncgm

EOF
  fi

  if [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_type   -a $plot_type   == "cn" ]; then
    cat >> $ncl_name << EOF
  opt_2Ddata = True                                                     ; use ignorant_convert_2Ddata to read variables
  opt_2Ddata@time_step = 0
  ;opt_2Ddata@return_type = "time_lat_lon-plev"  
  ;opt_2Ddata@plev = 600.
  ;opt_2Ddata@do_lon_mono = True

  opt_cnmap = True                 ; opt_cnmapion of gsn_csm_contour_map_avg
  ;opt_cnmap@LatWeighted = False   ; .True. (default) : do latitude cosine-weighted average, 
                                   ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                                   ; .False.          : no weighted average
  ;opt_cnmap@MeanFormat = "%7.3f"   ; set mean value format
  ;opt_cnmap@MeanPrefix = "mean: "  ; set prefix of mean value

EOF
  fi

fi

#*******************
# write NCL script 
#******************

#-------------------
# 2) write files
#-------------------

if [ $option_file -a $option_file == "T" ]; then

# write comment
  cat >> $ncl_name << EOF

;-------------
; open files
;-------------

EOF

# write open file part
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  filename_${suffix_work[$i]} = "${infile[$i]}"
EOF
  done

# write all file names to variable $infilenames
  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  echo "" >> $ncl_name

# write open file part
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( filename_${suffix_work[$i]} , "r" )
EOF
  done

#*** end of option_file ***
fi

#-------------------
# 3) write variables
#-------------------

if [ $option_file -a $option_file == "T" ] && \
   [ $option_var  -a $option_var  == "T" ]; then

  # loop of files
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    echo "" >> $ncl_name

    # loop of vars
    for (( j=0; j<${num_vars}; j=j+1 ))
    do
    cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = ignorant_convert_2Ddata(filename_${suffix_work[$i]},${var[$j]},opt_2Ddata)
EOF
    done
  #${vname_work[$j]}_${suffix_work[$i]} = file_${suffix_work[$i]}->${var[$j]}${dims_work[$j]}

  done

  # additional read varibles part - use addfiles
  cat >> $ncl_name << EOF

;  infiles = addfiles( infilenames , "r" )
EOF

  for (( j=0; j<${num_vars}; j=j+1 ))
  do
     cat >> $ncl_name << EOF
;  ${vname_work[$j]} = infiles[:]->${var[$j]}
EOF
  done
  cat >> $ncl_name << EOF

;  varvar = ""
;  varvars = (/"",""/)
;  varvar_allfiles = ignorant_get_var_files(infilenames , varvar ) ; get the varvar from all files
;  varvar_all      = ignorant_get_vars_file(filename , varvars)    ; get all varvars from a file
EOF

#*** end of option_var ***
fi

#--------------------------
# 3.1) write post process 
#--------------------------

if [ $option_post -a $option_post == "T" ]; then

  # if add NCL functions
  if [ $option_func -a $option_func == "T" ]; then
  
    cat >> $ncl_name << EOF
  
;print()
;printVarSummary()
  
;---------------
; post process
;---------------
EOF
  
    cat $ncl_func >> $ncl_name || exit 1
  
  # if not use NCL functions
  else
  
    cat >> $ncl_name << EOF
  
;print()
;printVarSummary()
  
;---------------
; post process
;---------------
EOF
  
  fi

fi # end if of option_post

# get number of modify parameters
num_mod=${#modify[@]}

#********************************
# do-loop for each modify parameters
#********************************
for((i=0; i<$num_mod; i=i+1))
do

  # initialize
  for (( vv1=0; vv1<${num_vars}; vv1=vv1+1 ))
  do
    var_mod[$vv1]=""
  done

  #**********************************
  # get command, parameters and varaibles
  #**********************************

  # check if parameter is enclosed by '"', for '-' in parameter case
  check1=`echo ${modify[$i]} | grep \" > /dev/null ; echo $?`

  # if '"' in parameter
  if [ $check1 -a $check1 -eq 0 ]; then
    comd1=${modify[$i]%%-*}
    par0=${modify[$i]#*\"}
    par1=${par0%\"*}
    var0=${modify[$i]##*\"}
    var0=`echo $var0 | sed "s/-//g"`

  # if no '"' in parameter
  else
    comd1=`echo ${modify[$i]} | cut -d '-' -f 1`
    par1=`echo ${modify[$i]} | cut -d '-' -f 2`
    var0=`echo ${modify[$i]} | cut -d '-' -f 3`
  fi

  #*** get process option ***
  opt_mod="string"

  if [ "$par1" ]; then
    for (( ff=0; ff<${num_files}; ff=ff+1 ))
    do
       if [ "$par1" -a "$par1" == ${suffix_work[$ff]} ]; then
         opt_mod="suffix"
       fi
    done
  fi

  #*** get process variables ***
  if [ ! "$var0" ]; then
    var1=${newvarnames}
  else
    var1=${var0}","
  fi

  jj=0
  for (( vv=1; vv<=${num_vars}; vv=vv+1 ))
  do
    var_temp=`echo $var1 | cut -d ',' -f $vv`

    for (( vv1=0; vv1<${num_vars}; vv1=vv1+1 ))
    do
      if [ "$var_temp" -a "$var_temp" ==  ${vname_work[$vv1]} ]; then
        var_mod[$jj]=$var_temp
        jj=$(($jj+1))
      fi
    done
  done

  if [ $jj -gt 0 ]; then
    num_var_mod=$jj 
    echo ""
    echo "!!! ECHO: -m command          : [${modify[$i]}] !!!"
    echo "!!! ECHO: -m input   variables: [${var0}] !!!"
    echo "!!! ECHO: -m process variables: [${var_mod[@]}] !!!"

  else
    num_var_mod=0 
    echo ""
    echo "!!! WARNING: -m process variables [${var0}] do not exist !!!"
  fi

  #********************************
  #*** if command == "multiply" ***
  #********************************
  if [ $comd1 -a $comd1 == "multiply" ]; then

    for (( vv=0; vv<${num_var_mod}; vv=vv+1 ))
    do
      for (( ff=0; ff<${num_files}; ff=ff+1 ))
      do
        if [ $opt_mod == "string" ]; then
          vname1="${var_mod[$vv]}_${suffix_work[$ff]}"
          vname2=$vname1
          vname3=$par1

        elif [ $opt_mod == "suffix" ]; then
          vname1="${var_mod[$vv]}_${suffix_work[$ff]}"
          vname2=$vname1
          vname3=${var_mod[$vv]}_$par1

        fi

         # write code
         cat >> $ncl_name << EOF
  ${vname1} = multiply($vname2, $vname3)
EOF

      done

      # write space
      cat >> $ncl_name << EOF

EOF
    done

  #********************************
  #*** if command == "diff" ***
  #********************************
  elif [ $comd1 -a $comd1 == "diff" ]; then
    option_diff="T"
    nn=0

    for (( vv=0; vv<${num_var_mod}; vv=vv+1 ))
    do
      for (( ff=0; ff<${num_files}; ff=ff+1 ))
      do
        if [ $opt_mod == "string" ]; then
          vname1="${var_mod[$vv]}_diff_${suffix_work[$ff]}Const"
          vname2=${var_mod[$vv]}_${suffix_work[$ff]}
          vname3=$par1

          plot_vars_diff[nn]=$vname1
          nn=$(($nn+1))

        elif [ $opt_mod == "suffix" ]; then
          vname1="${var_mod[$vv]}_diff_${suffix_work[$ff]}${par1}"
          vname2=${var_mod[$vv]}_${suffix_work[$ff]}
          vname3=${var_mod[$vv]}_$par1

          plot_vars_diff[nn]=$vname1
          nn=$(($nn+1))

        fi

         # write code
         cat >> $ncl_name << EOF
  ${vname1} = diff($vname2, $vname3)
EOF

      done

      # write space
      cat >> $ncl_name << EOF

EOF
    done

  #********************************
  #*** if command == "dimavg" ***
  #********************************
  elif [ $comd1 -a $comd1 == "dimavg" ]; then

    for (( vv=0; vv<${num_var_mod}; vv=vv+1 ))
    do
      for (( ff=0; ff<${num_files}; ff=ff+1 ))
      do
        if [ $opt_mod == "string" ] || [ $opt_mod == "suffix" ] ; then
          vname1="${var_mod[$vv]}_${suffix_work[$ff]}_dimavg"
          vname2=${var_mod[$vv]}_${suffix_work[$ff]}
          vname3=$par1

         # write code
         cat >> $ncl_name << EOF
  ${vname1} = dim_avg_n_Wrap($vname2, (/$vname3/))
EOF
        fi
      done

      # write space
      cat >> $ncl_name << EOF

EOF
    done

  #********************************
  #*** if command == "code" ***
  #********************************
  elif [ $comd1 -a $comd1 == "code" ]; then
    var99="var"

    for (( vv=0; vv<${num_var_mod}; vv=vv+1 ))
    do
      for (( ff=0; ff<${num_files}; ff=ff+1 ))
      do
        if [ $opt_mod == "string" ] || [ $opt_mod == "suffix" ] ; then
          vname1="${var_mod[$vv]}_${suffix_work[$ff]}"
          code1=`echo $par1 | sed "s/${var99}/${vname1}/g"`

         # write code
         cat >> $ncl_name << EOF
  $code1
EOF
        fi
      done

      # write space
      cat >> $ncl_name << EOF

EOF
    done

  #********************************
  #*** if unavailable command   ***
  #********************************
  else
    echo ""
    echo "!!! WARNING: unavailable -m command [${comd1}] !!!"
    echo ""

  fi

#********************************
# end of do-loop for each modify parameters
#********************************
done

#----------------
# 4) write plot 
#----------------

#**************************************
# 4.0) share part: color maps and wks
#**************************************

if [ $option_plot -a $option_plot == "T" ]; then
  cat >> $ncl_name << EOF
;
;-------------------
; set work station
;-------------------

  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;drawNDCGrid(wks)
EOF

#*** end of option_plot, shared part *****
fi

#*********************************
# 4.1) basic plot: xy,cn,default
#*********************************
if [ $option_plot -a $option_plot == "T" ] && \
   [ $plot_type   -a $plot_type   == "xy" ]; then

  cat >> $ncl_name << EOF

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** gsn res ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;
;*** adjust axis type ***
;  res@xyYStyle = "log"  ;  "Linear" "Irregular"
;  res@trYReverse = True
;
;*** adjust XY range ***
;  res@trXMinF = 
;  res@trXMaxF = 
;
;*** adjust xy line mode ***
;  res@xyMonoMarkLineMode = False
;  res@xyMarkLineMode  = "MarkLines"  ; "Lines" "Markers" 
;  res@xyMarkLineModes = (/"MarkLines"/)
;
;*** adjust xy dash pattern ***
;  res@xyMonoDashPattern = False
;  res@xyDashPattern = 1
;  res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  res@xyMonoLineColor = False
;  res@xyLineColors = (/1,3,3,14,14/)
;  res@xyLineColor = 10
;
;*** adjust xy markers ***
;  res@xyMonoMarker = False
;  res@xyMarker = 1
;  res@xyMarkers = (//)
;
;  res@xyMonoMarkerColor = False
;  res@xyMarkerColor = 1
;  res@xyMarkerColors = (//)
;
;*** adjust xy line thickness ***
;  res@xyMonoLineThickness = True
;  res@xyLineThicknessF = 3.
;  res@xyLineThicknesses = 
;
EOF

#*** plot res = contour plot ***

elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_type   -a $plot_type   == "cn" ]; then

  cat >> $ncl_name << EOF

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
  res@cnFillPalette = "WhiteBlueGreenYellowRed"
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
EOF

#*** plot res = default plot ***
elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_type   -a $plot_type   == "default" ]; then

  cat >> $ncl_name << EOF

;----------------
; set resources
;----------------
  opt = True
;  opt@WRFfile = True
;
  res = True
;
;*** gsn resources ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False

;-------
; plot
;-------

;  plot1 = ignorant_contour(wks,data[*][*],res)
;  plot2 = ignorant_nc_contour(wks,infile,data[*][*],opt,nclres)
;
;  label_names = (//)
;  plot3 = ignorant_xy(wks,xx,yy,label_names,res,opt)
;
;  plot = new(2,graphic)
;  plot(0) = plot1
;  plot(1) = plot2
;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5
; 
;  row1    = 1  ; row number of panel plot
;  column1 = 2  ; column number of panel plot
;  start1  = 0  ; start index of plots
;  end1    = 10 ; end index of plots 
;  stride1 = 1  ; stride of plots
;  gsn_panel(wks,plot,(/row1,column1/),resp)
;  gsn_panel(wks,plot(start1:end1:stride1),(/row1,column1/),resp)
;
EOF
fi

#***************************************
# 4.2) customized plot: cn, cn_pro, cn_2LB
#***************************************

#*** plot custom =  general xy plot ***
if [ $option_plot -a $option_plot == "T" ] && \
   [ $plot_custom -a $plot_custom == "xy" ]; then

  cat >> $ncl_name << EOF
;-------
; plot
;-------
;plot_var_flag01
;
;plot_var_flag02
;
;-------
; frame
;-------
;  frame(wks)
EOF

#*** plot custom =  3 xy plots ***
elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_custom -a $plot_custom == "xy_3xy" ]; then

  cat >> $ncl_name << EOF
;*** share res ***
  res@vpXF = 0.15
  res@vpHeightF  = 0.2
  res@vpWidthF   = 0.8
  res@gsnFrame = False
  res@tiYAxisString = "  "

  res@pmLegendDisplayMode = "Always"
  res@pmLegendSide = "Top"
  res@pmLegendWidthF = 0.1
  res@pmLegendHeightF = 0.1
  res@lgPerimOn = False
  res@lgAutoManage = False
  res@lgLabelFontHeightF = 0.015

;*** bottom plot ***
  bpres = res
  bpres@tmXTOn = False
  bpres@vpYF       = 0.3
  bpres@gsnLeftString = ""
  bpres@pmLegendHeightF = 0.12
  bpres@pmLegendOrthogonalPosF = -0.73
  bpres@xyExplicitLegendLabels = (/"", "", "", ""/)
  bpres@lgItemOrder = (/3,2,1,0/)

;*** middle plot ***
  mpres = res
  mpres@tmXTOn = False
  mpres@tmXBLabelsOn = False
  mpres@vpYF       = 0.575
  mpres@tiYAxisString = ""
  mpres@gsnLeftString = ""
  mpres@xyExplicitLegendLabels = (/"","","",""/)

  mpres@pmLegendOrthogonalPosF = -0.85
  mpres@lgItemOrder = (/3,2,1,0/)

;*** upper plot ***
  upres = res
  upres@tmXTOn = False
  upres@tmXBLabelsOn = False
  upres@vpYF       = 0.85
  upres@tiMainString = ""
  upres@gsnLeftString = ""
  upres@xyExplicitLegendLabels = (/"","","",""/)

  upres@pmLegendOrthogonalPosF = -1.05
  upres@lgItemOrder = (/3,2,1,0/)

;-------------
; plot
;-------------

  xx     = (//)
  plot_u = (//)
  plot_m = (//)
  plot_b = (//)

  plot_upper  = gsn_csm_xy(wks,xx,plot_u,upres)
  plot_middle = gsn_csm_xy(wks,xx,plot_m,mpres)
  plot_bottom = gsn_csm_xy(wks,xx,plot_b,bpres)

  frame(wks)
EOF

#*** plot custom =  general contour plot ***
elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_custom -a $plot_custom == "cn" ]; then
  cat >> $ncl_name << EOF

;-------
; plot
;-------
;plot_var_flag01
;
;plot_var_flag02
;
;-------
; frame
;-------
;  frame(wks)
EOF

#*** plot type =  contour plot with x/y mean profile ***
elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_custom -a $plot_custom == "cn_pro" ]; then

  cat >> $ncl_name << EOF

;*** contour plot res ***
  cnres = res
  cnres@gsnFrame = False
  cnres@gsnAddCyclic = True 

  cnres@vpHeightF = 0.5
  cnres@vpWidthF = 0.6
  cnres@vpXF = 0.25
  cnres@vpYF = 0.8

  cnres@tmYLLabelsOn = False

;------------------
; set input array
;------------------

  input_data = 

;*** compute x/y mean ***  
  input_yy = dim_avg_n_Wrap(input_data,1)
  yy_name = getvardims(input_yy)
  yy = input_yy&\$yy_name$

  input_xx = dim_avg_n_Wrap(input_data,0)
  xx_name = getvardims(input_xx)
  xx = input_xx&\$xx_name$

;----------------
; plot contour
;----------------
  plot_cn = gsn_csm_contour(wks,input_data,cnres)

  getvalues plot_cn
    "vpHeightF" : cn_height
    "vpWidthF"  : cn_width
    "vpXF"      : cn_xf
    "vpYF"      : cn_yf
  end getvalues

;---------------------------------------
; set left plot res - x_avg.vs.y, XY plot
;---------------------------------------

  lfres = True
  lfres@gsnFrame = False

  lfres@vpHeightF = cn_height
  lfres@vpWidthF = 0.15
  lfres@vpXF = 0.08
  lfres@vpYF = cn_yf

  lfres@tmXTOn = False
  lfres@tmYROn = False

;  lfres@xyMonoLineColor = False
;  lfres@xyLineColors = (/2,1/)
;  lfres@xyMonoDashPattern = True
;  lfres@xyDashPattern = 0
;  lfres@xyMonoLineThickness = True
;  lfres@xyLineThicknessF = 3.

;---------------------------------------
; set bottom plot res - y_avg.vs.x, XY plot
;---------------------------------------

  btres = True
  btres@gsnFrame = False

  btres@vpHeightF = 0.15
  btres@vpWidthF = cn_width
  btres@vpXF = cn_xf
  btres@vpYF = 0.28

  btres@tmXTOn = False
  btres@tmYROn = False

;  btres@xyMonoLineColor = False
;  btres@xyLineColors = (/2,1/)
;  btres@xyMonoDashPattern = True
;  btres@xyDashPattern = 0
;  btres@xyMonoLineThickness = True
;  btres@xyLineThicknessF = 3.

;---------------------------
; plot left & bottom plots
;---------------------------

  plot_y = gsn_csm_xy(wks,input_yy,yy,lfres)
  plot_X = gsn_csm_xy(wks,xx,input_xx,btres)

;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
  frame(wks)

EOF

#*** plot res =  contour plot with TWO label bars ***
elif [ $option_plot -a $option_plot == "T" ] && \
     [ $plot_custom -a $plot_custom == "cn_2LB" ]; then

  cat >> $ncl_name << EOF

;-------
; plot
;-------
;plot_var_flag01
;
;plot_var_flag02
;
;-----------------
; draw label bar
;-----------------

;*** label bar share res ***
  lbres = True
  lbres@lbPerimOn = False
  lbres@lbMonoFillPattern = True
  lbres@lbFillPattern = 0
  lbres@lbLabelFontHeightF = 0.012
  lbres@lbLabelAlignment     = "InteriorEdges"

;*** lb1 label bar ***
  lbres1 = lbres
  lbres1@vpWidthF = 0.06
  lbres1@vpHeightF = 0.3
  lbres1@lbFillColors = res1@cnFillPalette
  lbres1@lbOrientation = "vertical"
  ;lbres1@lbTitleString = "mm/day"
  ;lbres1@lbTitlePosition = "Right"
  ;lbres1@lbTitleFontHeightF = 0.01

  nlev_lb1 = dimsizes(res@cnLevels)
  labels_lb1 = flt2string(res@cnLevels)

;*** lb2 label bar ***
  lbres2 = lbres
  lbres2@lbTitleOn = True
  lbres2@vpWidthF = 0.45  ;0.06
  lbres2@vpHeightF = 0.04 ;0.25
  lbres2@lbFillColors = res2@cnFillPalette
  lbres2@lbOrientation = "Horizontal"
  lbres2@lbTitleString = ""
  lbres2@lbTitleFontHeightF = 0.015

  nlev_lb2 = dimsizes(res@cnLevels)
  labels_lb2 = flt2string(res@cnLevels)

;*** draw label bar ***
  lb1_x = 0.92
  lb1_y = 0.75
  gsn_labelbar_ndc(wks,nlev_lb1+1,labels_lb1,lb1_x,lb1_y,lbres1)

  lb2_x = 0.275
  lb2_y = 0.11
  gsn_labelbar_ndc(wks,nlev_lb2+1,labels_lb2,lb2_x,lb2_y,lbres2)

;------------
; draw text
;------------

  txres = True
  txres@txFontHeightF = 0.014
  txres@txJust = "CenterLeft"
  txres@txFont = 25
  
  tx_string = "W/m~S~2~N~"
  tx_x = 0.913
  tx_y = 0.43

  gsn_text_ndc(wks,tx_string,tx_x,tx_y,txres)

;-------
; frame
;-------
  frame(wks)

EOF

#*** end if of plot custom ***
fi

#------------------------
# 4.2) write plot script
#------------------------

# initialize
temp=`date +%Y%m%d%H%M%S`
ftemp="./bbuuyyrr.$temp"
ftemp1="$ftemp.01"  # each  plot 
ftemp2="$ftemp.02"  # panel plot

# get non-varaible plot var, ex: diff value
ii=1
jj=0
var1=`cat $ncl_name | grep =\ diff | sed -n 1p | cut -d '=' -f 1`
until [ ! $var1 ]
do
  var1=`cat $ncl_name | grep "\ =\ diff" | sed -n $ii'p' | cut -d '=' -f 1`
  var1=`echo $var1 | sed "s/ //g"`
  plot_vars_temp[$jj]=$var1
  jj=$(($jj+1))
  ii=$(($ii+1))
done

num_var_temp=${#plot_vars_temp[@]}
num_var_temp=$(($num_var_temp-1))

#**********************************
# write each plot type share code
#**********************************

# write panel share res 
cat > $ftemp2 << EOF
  resp = True
  ;resp@txString = ""

EOF

# if contour plot:
if [ $plot_type -a $plot_type == "cn" ]; then

  # write contour-related function
  cat > $ftemp1 << EOF
;
;plot = gsn_csm_contour(wks,cndata,res)
;plot = gsn_csm_contour_map(wks,cndata,res)
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
;plot = gsn_csm_pres_hgt(wks,cndata,res)
;plot = ignorant_contour(wks,cndata,res)

EOF

# if xy plot:
elif [ $plot_type -a $plot_type == "xy" ]; then

  # write xy-related funtion
  cat > $ftemp1 << EOF
;label_names = (//)
;opt@legend_mean = False ; turn off mean values on legends
;opt@MeanFormat = "%5.2f" ; set format of mean values
;plot = ignorant_xy(wks,xx,yy,label_names,res,opt)
;plot = gsn_csm_xy(wks,xx,yy,res)

EOF

fi # end if of plot type

#**********************************
# write plot function codes
#**********************************
if [ $option_var -a $option_var == "T" ] && \
   [ $option_plot -a $option_plot == "T" ]; then

  #*** write each variable funtion ***
  nn=0
  for ((vv=0; vv<${num_vars}; vv=vv+1 ))
  do
    for ((ff=0; ff<${num_files}; ff=ff+1 ))
    do
       # if plot type = "cn"
       if [ $plot_type -a $plot_type == "cn" ]; then
         vname1="${vname_work[$vv]}_${suffix_work[$ff]}"
         code1="plot_${vname1} = gsn_csm_contour_map (wks, $vname1, res)"

       # if plot type = "xy"
       elif [ $plot_type -a $plot_type == "xy" ]; then
         vname1="${vname_work[$vv]}_${suffix_work[$ff]}"
         vname2="var11${suffix_work[$ff]}"
         code1="plot_${vname1} = gsn_csm_xy (wks, $vname2, $vname1, res)"
       fi

       # write plot function
      cat >> $ftemp1 << EOF
;  $code1
EOF

    done

    # write space
    cat >> $ftemp1 << EOF
  
EOF

  done

  #*** write post-varaible function ***
  for ((ii=0; ii<$num_var_temp; ii=ii+1))
  do
    # if plot type = "cn"
    if [ $plot_type -a $plot_type == "cn" ]; then
      vname1=${plot_vars_temp[$ii]}
      code1="plot_${vname1} = gsn_csm_contour_map (wks, $vname1, res)"

    # if plot type = "xy"
    elif [ $plot_type -a $plot_type == "xy" ]; then
      vname1=${plot_vars_temp[$ii]}
      vname2="var11${suffix_work[$ff]}"
      code1="plot_${vname1} = gsn_csm_xy (wks, $vname2, $vname1, res)"
    fi

    # write plot function
    cat >> $ftemp1 << EOF
;  $code1
EOF
  done

    # write space
    cat >> $ftemp1 << EOF
  
EOF

  #***************************
  # write panel declare & paneling
  #***************************

  #*** if only one file, then panel all variables ***
  if [ $num_files -a $num_files -eq 1 ]; then
    code1="plot_all = new (${num_vars},\"graphic\")"

    # write code
    cat >> $ftemp1 << EOF
;  $code1

EOF

    for ((vv=0; vv<${num_vars}; vv=vv+1 ))
    do
      vname1="${vname_work[$vv]}_${suffix_work[0]}"
      code1="plot_all($vv) = plot_${vname1}"

      cat >> $ftemp1 << EOF
;  $code1
EOF
    done

  #*** if more than one file, then panel individual variables with different files
  elif [ $num_files -a $num_files -gt 1 ]; then

    # decalre panel array
    for ((vv=0; vv<${num_vars}; vv=vv+1 ))
    do
      code1="plot_${vname_work[$vv]} = new (${num_files},\"graphic\")"

      cat >> $ftemp1 << EOF
;  $code1
EOF
    done

    cat >> $ftemp1 << EOF
  
EOF

    # assign panel value
    for ((vv=0; vv<${num_vars}; vv=vv+1 ))
    do
      for ((ff=0; ff<${num_files}; ff=ff+1 ))
      do
        vname1="${vname_work[$vv]}_${suffix_work[$ff]}"
        code1="plot_${vname_work[$vv]}($ff) = plot_$vname1"

        cat >> $ftemp1 << EOF
;  $code1
EOF
      done

      cat >> $ftemp1 << EOF
  
EOF
    done

  fi # end if of file number

  # write post-variable funtion
    cat >> $ftemp1 << EOF

;  plot_var11 = new ($num_var_temp,"graphic")

EOF
  
  for ((ii=0; ii<$num_var_temp; ii=ii+1))
  do
    vname1=${plot_vars_temp[$ii]}   
    code1="plot_var11() = plot_${vname1}"
    cat >> $ftemp1 << EOF
;  $code1
EOF
  done

  #***************************
  # write panel gsn_panel code
  #***************************

  #*** if only one file, then panel all variables ***
  if [ $num_files -a $num_files -eq 1 ]; then
    cat >> $ftemp2 << EOF
  row1    = 1  ; row number of panel plot
  column1 = $num_vars  ; column number of panel plot

EOF

  #*** if more than one file, then panel individual variables with different files
  elif [ $num_files -a $num_files -gt 1 ]; then

      cat >> $ftemp2 << EOF
  row1    = 1  ; row number of panel plot
  column1 = $num_files  ; column number of panel plot

EOF

    for ((vv=0; vv<${num_vars}; vv=vv+1 ))
    do
      plot1="plot_${vname_work[$vv]}"
      code1="gsn_panel(wks, $plot1, (/row1,column1/), resp)"

      cat >> $ftemp2 << EOF
;  $code1
EOF
    done
  fi # end if of file number

fi # end if of writing plot codes

# write to ncl_name
sed -i "/plot_var_flag01/ r $ftemp1" $ncl_name
sed -i "/plot_var_flag02/ r $ftemp2" $ncl_name

# delete res falgs
sed -i "/plot_var_flag/d" $ncl_name

rm $ftemp.*


#---------------------
# 5) write NCL case
#---------------------

#*** case: "cesm_prec_global" start ***
if [ $casename_work -a $casename_work == "cesm-prec_global-2files" ]; then

cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  ttt = 0

  precc_${suffix01} = file_${suffix01}->PRECC${dim_work}
  precc_${suffix02} = file_${suffix02}->PRECC${dim_work}

  precl_${suffix01} = file_${suffix01}->PRECL${dim_work}
  precl_${suffix02} = file_${suffix02}->PRECL${dim_work}

  prect_${suffix01} = plus(precc_${suffix01}, precl_${suffix01})
  prect_${suffix02} = plus(precc_${suffix02}, precl_${suffix02})

;  precc_all = ignorant_get_var_files(infilenames , "PRECC" )
;  precl_all = ignorant_get_var_files(infilenames , "PRECL" )
;  prect_all = ignorant_get_var_files(infilenames , "PRECT" )

;print()
;printVarSummary()

;---------------
; post process
;---------------
  precc_${suffix01} = multiply(precc_${suffix01}, 1000.*86400.)
  precc_${suffix02} = multiply(precc_${suffix02}, 1000.*86400.)

  precl_${suffix01} = multiply(precl_${suffix01}, 1000.*86400.)
  precl_${suffix02} = multiply(precl_${suffix02}, 1000.*86400.)

  prect_${suffix01} = multiply(prect_${suffix01}, 1000.*86400.)
  prect_${suffix02} = multiply(prect_${suffix02}, 1000.*86400.)

  precc_${suffix01}@units = "mm/day"
  precc_${suffix02}@units = "mm/day"

  precl_${suffix01}@units = "mm/day"
  precl_${suffix02}@units = "mm/day"

  prect_${suffix01}@units = "mm/day"
  prect_${suffix02}@units = "mm/day"

  precc_diff_${suffix01}${suffix01} = diff(precc_${suffix01}, precc_${suffix01})
  precc_diff_${suffix02}${suffix01} = diff(precc_${suffix02}, precc_${suffix01})

  precl_diff_${suffix01}${suffix01} = diff(precl_${suffix01}, precl_${suffix01})
  precl_diff_${suffix02}${suffix01} = diff(precl_${suffix02}, precl_${suffix01})

  prect_diff_${suffix01}${suffix01} = diff(prect_${suffix01}, prect_${suffix01})
  prect_diff_${suffix02}${suffix01} = diff(prect_${suffix02}, prect_${suffix01})

  ;do j=0,191
  ;  do i=0,287
  ;    if ( precc_${suffix02}(j,i) .ge. 50. ) then
  ;      print("precc_${suffix02}(j,i) error: " + j + "," + i + " " + precc_${suffix02}(j,i))
  ;    end if
      ;if ( precl_${suffix01}(j,i) .ge. 50. ) then
      ;  print("precl_${suffix01}(j,i) error: " + j + "," + i + " " + precl_${suffix01}(j,i))
      ;end if

  ;  end do
  ;end do

;
;-------------
; set colors
;-------------
;
  cmap_prec = ignorant_select_colormap("precip2_17lev",999,False)

  cmap_prec_diff = ignorant_select_colormap("precip_diff_12lev",\\
                                            (/2,4,5,7, \\
                                              8,8, \\
                                              9,10,11,12,13,14/),False)
;
;-------------------
; set work station
;-------------------

  wks = gsn_open_wks(wks_type,wks_name)

;  gsn_define_colormap(wks,"gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28 ; light gray when colormap is default 
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@gsnPanelLabelBar = True
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;

;*** prec res, in unit: mm/day ***
  pres = res
  pres@cnLevelSelectionMode = "ExplicitLevels"
  pres@cnLevels = (/0.5,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15./)
  ;pres@cnLevels = (/0.5,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,12.,14.,16.,18.,20./)
  ;pres@cnLevels = (/0.5,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,15.,20.,25.,30.,35./)

  pres@cnFillPalette = cmap_prec 
  pres@cnSpanFillPalette = False

;*** prec diff res, in unit: mm/day ***
  dpres = res
  dpres@cnLevelSelectionMode = "ExplicitLevels"
  dpres@cnLevels = (/-2.,-1.5,-1.,-0.5,0.,0.5,1.,1.5,2./)
  ;dpres@cnLevels = (/-2.,-1.5,-1.,-0.5,0.,0.5,1.,5.,10.,20.,30./)

  dpres@cnFillPalette = cmap_prec_diff
  dpres@cnSpanFillPalette = False
;

;-------
; plot
;-------
opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
opt@MeanFormat = "%7.3f"   ; set mean value format
opt@MeanPrefix = "mean: "  ; set prefix of mean value

pres@gsnLeftString = "Convective Prec"
pres@tiMainString = "${suffix01}"
  plot_precc_${suffix01} = gsn_csm_contour_map_avg (wks, precc_${suffix01}, pres, opt)

pres@tiMainString = "${suffix02}"
  plot_precc_${suffix02} = gsn_csm_contour_map_avg (wks, precc_${suffix02}, pres, opt)
 
pres@gsnLeftString = "Stratiform Prec"
pres@tiMainString = "${suffix01}"
  plot_precl_${suffix01} = gsn_csm_contour_map_avg (wks, precl_${suffix01}, pres, opt)

pres@tiMainString = "${suffix02}"
  plot_precl_${suffix02} = gsn_csm_contour_map_avg (wks, precl_${suffix02}, pres, opt) 

pres@gsnLeftString = "Total Prec"
pres@tiMainString = "${suffix01}"
  plot_prect_${suffix01} = gsn_csm_contour_map_avg (wks, prect_${suffix01}, pres, opt)

pres@tiMainString = "${suffix02}"
  plot_prect_${suffix02} = gsn_csm_contour_map_avg (wks, prect_${suffix02}, pres, opt)
 
 
dpres@tiMainString = "${suffix02}-${suffix01}"
dpres@gsnLeftString = "Convective Prec"
  plot_precc_diff_${suffix02}${suffix01} = gsn_csm_contour_map_avg (wks, precc_diff_${suffix02}${suffix01}, dpres, opt)
dpres@gsnLeftString = "Stratiform Prec"
  plot_precl_diff_${suffix02}${suffix01} = gsn_csm_contour_map_avg (wks, precl_diff_${suffix02}${suffix01}, dpres, opt)
dpres@gsnLeftString = "Total Prec"
  plot_prect_diff_${suffix02}${suffix01} = gsn_csm_contour_map_avg (wks, prect_diff_${suffix02}${suffix01}, dpres, opt)
  
  plot_prec = new (9,"graphic")
  plot_prec(0) = plot_precc_${suffix02}
  plot_prec(1) = plot_precl_${suffix02}
  plot_prec(2) = plot_prect_${suffix02}
  plot_prec(3) = plot_precc_${suffix01}
  plot_prec(4) = plot_precl_${suffix01}
  plot_prec(5) = plot_prect_${suffix01}
  plot_prec(6) = plot_precc_diff_${suffix02}${suffix01}
  plot_prec(7) = plot_precl_diff_${suffix02}${suffix01}
  plot_prec(8) = plot_prect_diff_${suffix02}${suffix01}
;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_prec, (/3,3/), resp)
  ;gsn_panel(wks, plot_prec(0:2), (/1,3/), resp)
  ;gsn_panel(wks, plot_prec(3:5), (/1,3/), resp)
  ;gsn_panel(wks, plot_prec(6:8), (/1,3/), resp)



EOF
#*** case: "cesm_prec_global" end ***

#*** case: "cam-hybrid2pres" start ***
elif [ $casename_work -a $casename_work == "cam-hybrid2pres" ]; then
  
  cat >> $ncl_name << EOF
;--------------
; open files
;--------------

EOF

# write open file part
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( "${infile[$i]}" , "r" )
EOF
  done

  cat >> $ncl_name << EOF

EOF

# write read variables part 
  for ((i=0; i<$num_files; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  hyai_${suffix_work[$i]} = file_${suffix_work[$i]}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix_work[$i]} = file_${suffix_work[$i]}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix_work[$i]} = file_${suffix_work[$i]}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix_work[$i]} = file_${suffix_work[$i]}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix_work[$i]}   = file_${suffix_work[$i]}->PS        ; surface pressures  in Pa
  p0_${suffix_work[$i]}   = file_${suffix_work[$i]}->P0        ; reference pressure in Pa
EOF

    for ((j=0; j<$num_vars; j=j+1))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = file_${suffix_work[$i]}->${var[$j]} 
EOF
    done

    cat >> $ncl_name << EOF

EOF

  done  # loop for files 

# write interpolation instruction
  cat >> $ncl_name << EOF
;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

  plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
    250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
    850., 875., 900., 925., 950., 975., 1000./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

EOF

# write interpolation part
  for ((j=0; j<$num_files; j=j+1))
  do
    for ((i=0; i<$num_vars; i=i+1))
    do
      var01=${vname_work[$i]}
      cat >> $ncl_name << EOF
  ${var01}_plev_${suffix_work[$j]} = vinth2p(${var01}_${suffix_work[$j]}, hyam_${suffix_work[$j]}, hybm_${suffix_work[$j]}, plev_${suffix_work[$j]}, ps_${suffix_work[$j]}, 1, p0_${suffix_work[$j]}/100., 1, False)
  copy_VarAtts(${var01}_${suffix_work[$j]}, ${var01}_plev_${suffix_work[$j]})

EOF
    done
  done

# write output to another file
  cat >> $ncl_name << EOF

;; write out to a file
;  outfile = addfile( "" , "w" )
;  outfile@input_file = "${infile[@]}"
;  outfile@create_date = "`date +%Y-%m-%d_%H:%M:%S`"
;  outfile@interpolate_levels = tostring(plev)
;  outfile@interpolate_function = "vinth2p in NCL"

EOF

  for ((j=0; j<$num_files; j=j+1))
  do
    for ((i=0; i<$num_vars; i=i+1))
    do
      var01=${vname_work[$i]}
      cat >> $ncl_name << EOF
;  outfile->${var01}_${suffix_work[j]} = ${var01}_plev_${suffix_work[$j]}
EOF
    done
  done

#*** case: "cam-hybrid2pres" end ***

#*** case: "cesm-cldf_global-3files" start ***
elif [ $casename_work -a $casename_work == "cesm-cldf_global-3files" ]; then

cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_${suffix03} = addfile( "${file03}" , "r" )

  cldf_${suffix01} = file_${suffix01}->CLOUD${dim_work}
  cldf_${suffix02} = file_${suffix02}->CLOUD${dim_work}
  cldf_${suffix03} = file_${suffix03}->CLOUD${dim_work}
  levelist = file_${suffix01}->levelist

  cldf_${suffix01}_${suffix02} = diff(cldf_${suffix01}, cldf_${suffix02})

;print(cldf_${suffix01}&levelist)
;printVarSummary(cldf_${suffix01})

;---------------
; post process
;---------------
            ; 100, 125, 200, 300, 500, 700, 850, 900 hPa 
  level_k = (/ 10,  11,  14,  17,  21,  25,  30,   32/)
  num_k   = dimsizes(level_k)
  num_column = 4

;-------------
; set colors
;-------------
;
  cmap_cldf = ignorant_define_colormap("WhBlGrYlRd",(/0,3,4,5, \\
                                                      7,8,9,10,11,12,14/))

  cmap_cldf_diff = ignorant_define_colormap("brown_green",(/0,1,2,3,4, \\
                                                            7,7, \\
                                                            8,9,10,11,12/))
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)
;
;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
  res@mpCenterLonF = 180.
;
;*** adjust label bar ***
  res@lbLabelBarOn = False
;
;*** cldf res, in unit: fraction ***
  fres = res

  fres@cnLevelSelectionMode = "ExplicitLevels"
  fres@cnLevels = (/0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9/)
  fres@cnFillPalette = cmap_cldf
  fres@cnSpanFillPalette = False

  fres@gsnLeftString = "cloud fraction"
  fres@gsnRightString = "0-1"

;*** cldf diff res ***
  dfres = res

  dfres@cnLevelSelectionMode = "ExplicitLevels"
  ;dfres@cnLevels = (/-0.15,-0.1,-0.05,-0.01,0.,0.01,0.05,0.1,0.15/)
  dfres@cnLevels = (/-0.4,-0.2,-0.1,-0.05,-0.01,0.,0.01,0.05,0.1,0.2,0.4/)
  dfres@cnFillPalette = cmap_cldf_diff
  dfres@cnSpanFillPalette = False

  ;dfres@gsnLeftString = "cloud fraction difference"
  dfres@gsnRightString = "0-1"
;
;  cldf ${suffix01} and ${suffix03} res
  fres_${suffix01} = fres
  fres_${suffix03}   = fres
  fres_${suffix02}    = fres

;-------
; plot
;-------
opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
opt@MeanFormat = "%7.3f"   ; set mean value format
opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
  plot_cldf_${suffix01} = new (num_k,"graphic")
  plot_cldf_${suffix02} = new (num_k,"graphic")
  plot_cldf_${suffix03}   = new (num_k,"graphic")
  plot_cldf_${suffix01}_${suffix02}   = new (num_k,"graphic")

  num_all = num_k*num_column
  plot_all          = new (num_all,"graphic")

  do i=0,num_k-1
    kk = level_k(i)
    pres = sprinti("%4i",levelist(kk))
    fres_${suffix01}@gsnLeftString = pres + " hPa"
    fres_${suffix02}@gsnLeftString = pres + " hPa"
    fres_${suffix03}@gsnLeftString = pres + " hPa"
    dfres@gsnLeftString = pres + " hPa"

    if (i .eq. 0) then
      fres_${suffix01}@tiMainString = ""
      fres_${suffix02}@tiMainString = ""
      fres_${suffix03}@tiMainString = ""
      dfres@tiMainString = "Uniform PDF minus CTL"
    else
      fres_${suffix01}@tiMainString = ""
      fres_${suffix02}@tiMainString = ""
      fres_${suffix03}@tiMainString = ""
      dfres@tiMainString = ""
    end if

    plot_cldf_${suffix01}(i) = gsn_csm_contour_map_avg (wks, cldf_${suffix01}(kk,:,:), fres_${suffix01}, opt)
    plot_cldf_${suffix02}(i) = gsn_csm_contour_map_avg (wks, cldf_${suffix02}(kk,:,:), fres_${suffix02}, opt)
    plot_cldf_${suffix03}(i) = gsn_csm_contour_map_avg (wks, cldf_${suffix03}(kk,:,:), fres_${suffix03}, opt)
    plot_cldf_${suffix01}_${suffix02}(i) = gsn_csm_contour_map_avg (wks, cldf_${suffix01}_${suffix02}(kk,:,:), dfres, opt)
  end do

  j=0
  do i=0,num_all-num_column,num_column
    plot_all(i) = plot_cldf_${suffix03}(j)
    plot_all(i+1) = plot_cldf_${suffix01}(j)
    plot_all(i+2) = plot_cldf_${suffix02}(j)
    plot_all(i+num_column) = plot_cldf_${suffix01}_${suffix02}(j)
    j=j+1
  end do
;
  resp = True
  resp@gsnFrame = False
  resp@txString = "ANNUAL MEAN Cloud Fraction"
  resp@txFontHeightF = 0.015

;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
   resp@gsnPanelBottom = 0.05
   resp@gsnMaximize = True
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

  gsn_panel(wks, plot_all, (/num_k,num_column/), resp)
;
;-----------------
; draw label bar
;-----------------

;*** label bar share res ***
  lbres = True
  lbres@lbPerimOn = False
  lbres@lbMonoFillPattern = True
  lbres@lbFillPattern = 0
  lbres@lbLabelFontHeightF = 0.012
  lbres@lbLabelAlignment     = "InteriorEdges"

;*** lb1 label bar ***
  lbres1 = lbres
  lbres1@vpWidthF = 0.35
  lbres1@vpHeightF = 0.04
  lbres1@lbFillColors = fres@cnFillPalette
  lbres1@lbOrientation = "horizontal"
  lbres1@lbTitleString = "Cloud Fraction (0-1)"
  ;lbres1@lbTitlePosition = "Right"
  lbres1@lbTitleFontHeightF = 0.008
  lbres1@lbAutoManage = False
  lbres1@lbLabelFontHeightF = 0.008

  nlev_lb1 = dimsizes(fres@cnLevels)
  labels_lb1 = flt2string(fres@cnLevels)

;*** lb2 label bar ***
  lbres2 = lbres
  lbres2@vpWidthF = 0.35
  lbres2@vpHeightF = 0.04
  lbres2@lbFillColors = dfres@cnFillPalette
  lbres2@lbOrientation = "horizontal"
  lbres2@lbTitleString = "Cloud Fraction Diff (0-1)"
  ;lbres2@lbTitlePosition = "Right"
  lbres2@lbTitleFontHeightF = 0.008
  lbres2@lbAutoManage = False
  lbres2@lbLabelFontHeightF = 0.008

  nlev_lb2 = dimsizes(dfres@cnLevels)
  labels_lb2 = flt2string(dfres@cnLevels)

;*** draw label bar ***
  lb1_x = 0.14
  lb1_y = 0.04
  gsn_labelbar_ndc(wks,nlev_lb1+1,labels_lb1,lb1_x,lb1_y,lbres1)

  lb2_x = 0.52
  lb2_y = 0.04
  gsn_labelbar_ndc(wks,nlev_lb2+1,labels_lb2,lb2_x,lb2_y,lbres2)

;-------
; frame
;-------
  frame(wks)


EOF

  # delete $temp if no file03 input
  sed -i "/$temp/d" $ncl_name || exit 1

#*** case: "cesm-cldf_global-3files" end ***

#*** case: "cesm-cldf_zonal-3files" start ***
elif [ $casename_work -a $casename_work == "cesm-cldf_zonal-3files" ]; then
 
cat >> $ncl_name << EOF
;-----------------------------
; open files & read varibles
;-----------------------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_${suffix03} = addfile( "${file03}" , "r" )

  cldf_${suffix01} = file_${suffix01}->CLOUD${dim_work}
  cldf_${suffix02} = file_${suffix02}->CLOUD${dim_work}
  cldf_${suffix03} = file_${suffix03}->CLOUD${dim_work}

;print()
;printVarSummary(cc_1)
;printVarSummary(cldf_tot_1)

;---------------
; post process
;---------------

  cldf_zonal_${suffix01} = zonalAve(cldf_${suffix01})
  cldf_zonal_${suffix02} = zonalAve(cldf_${suffix02})
  cldf_zonal_${suffix03} = zonalAve(cldf_${suffix03})

  cldf_zonal_${suffix01}_${suffix02} = diff(cldf_zonal_${suffix01}, cldf_zonal_${suffix02})

;printVarSummary(cldf_zonal_${suffix03})
  
;
;-------------
; set colors
;-------------
;

  cmap_cldf = ignorant_define_colormap("WhBlGrYlRd",(/0,3,4,5, \\
                                                      7,8,9,10,11,12,14/))
  cmap_cldf_diff = ignorant_define_colormap("brown_green",(/1,2,3,4, \\
                                                            7,7, \\
                                                            8,9,10,11/))
;
;-------------------
; set work station
;-------------------
;
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")

;----------------
; set resources
;----------------
  opt = True
;
  res = True

;*** gsn resources ***
  res@gsnFrame = False
  res@gsnDraw = False
;
;*** adjust X,Y axis ***
  res@gsnYAxisIrregular2Linear = True
  res@trYReverse = True
  res@trXReverse = True
  res@trYMinF = 1.
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnMissingValFillColor = 28
;  
;*** adjust contour line ***
  res@cnLinesOn = False
;
  res@lbOrientation = "horizontal"
;
;*** set title string ***
  res@tiYAxisString = "Pressure (hPa)"
  res@gsnLeftString = ""
;  res@gsnCenterString =
;  res@gsnRightString =

;*** cldf res, in unit: fraction ***
  fres = res

  fres@cnLevelSelectionMode = "ExplicitLevels"
  fres@cnLevels = (/0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9/)
  fres@cnFillPalette = cmap_cldf
  fres@cnSpanFillPalette = False
  fres@gsnRightString = "cldf (0-1)"

;*** cldf diff res ***
  dfres = res

  dfres@cnLevelSelectionMode = "ExplicitLevels"
  ;dfres@cnLevels = (/-0.5,-0.4,-0.3,-0.2,-0.1,0.,0.1,0.2,0.3,0.4,0.5/)
  dfres@cnLevels = (/-0.15,-0.1,-0.05,-0.01,0.,0.01,0.05,0.1,0.15/)
  dfres@cnFillPalette = cmap_cldf_diff
  dfres@cnSpanFillPalette = False

  ;dfres@gsnLeftString = ""
  dfres@tiMainString = ""
  dfres@gsnRightString = "cldf diff (0-1)"

;***
  fres_${suffix01} = fres
  fres_${suffix03} = fres
  fres_${suffix02} = fres
  fres_${suffix01}@tiMainString = ""
  fres_${suffix02}@tiMainString = ""
  fres_${suffix03}@tiMainString = ""
  
;-------
; plot
;-------

;*** linear pressure plot ***
  plot_${suffix03} = gsn_csm_contour(wks,cldf_zonal_${suffix03},fres_${suffix03})
  plot_${suffix01} = gsn_csm_contour(wks,cldf_zonal_${suffix01},fres_${suffix01})
  plot_${suffix02} = gsn_csm_contour(wks,cldf_zonal_${suffix02},fres_${suffix02})
  plot_${suffix01}_${suffix02} = gsn_csm_contour(wks,cldf_zonal_${suffix01}_${suffix02},dfres)

;*** log pressure with height plot ***
;  plot_${suffix03} = gsn_csm_pres_hgt(wks,cldf_zonal_${suffix03},fres_${suffix03})
;  plot_${suffix01} = gsn_csm_pres_hgt(wks,cldf_zonal_${suffix01},fres_${suffix01})
;  plot_${suffix02} = gsn_csm_pres_hgt(wks,cldf_zonal_${suffix02},fres_${suffix02})
;  plot_${suffix01}_${suffix02} = gsn_csm_pres_hgt(wks,cldf_zonal_${suffix01}_${suffix02},dfres)

;
  plot = new(4,graphic)
  plot(1) = plot_${suffix01}
  plot(2) = plot_${suffix02}
  plot(3) = plot_${suffix01}_${suffix02}
  plot(0) = plot_${suffix03}

;
  resp = True
  resp@gsnMaximize = True
  resp@txString = ""
  resp@gsnPanelRowSpec = True
  gsn_panel(wks,plot,(/1,3/),resp)



EOF

  # delete $temp if no file03 input
  sed -i "/$temp/d" $ncl_name || exit 1

#*** case: "cesm-cldf_zonal-3files" end ***

#*** case: "kohler" start ***
elif [ $casename_work -a $casename_work == "kohler" ]; then

  cat >> $ncl_name << EOF


;*********************************
;
; COMPUTE and DRAW Kohler curves
;
;*********************************

;--------------
; set constant
;--------------
  rv      = 461.        ; gaas constant of water vapor (J/K/kg)
  rho_l   = 1000.       ; water density (kg/m3)
  pi      = acos(-1.)   ; = 3.14159..
  no      = 6.02*10.^23 ; Avogadro's number
  m_water = 0.018/no    ; water molecule mass   (kg)

;----------------------
; set input parameters
;----------------------

  ;*** set temperature and surface tnesion***
  temp_c = 8.              ; temperature (C)
  temp_k = temp_c + 273.15 ; temperature (k)
  sigma  = 0.076           ; surface tension (J/m2)

  ;*** set solute ***
  m_nacl  = 0.0584/no  ; NaCl  molecular weight(kg) 
  m_nh4   = 0.132/no   ; (NH4)^2SO4 molecular weight(kg) 

  mass = (/10.^-19, 10.^-18, 10.^-17, \   
           10.^-19, 10.^-18, 10.^-17 /)   ; solute mass (kg)

  msize = dimsizes(mass)

  m_solute = mass
  i_solute = mass

  m_solute = (/m_nacl, m_nacl, m_nacl, \
               m_nh4 , m_nh4 , m_nh4 /)  ; soulte type
 
  i_solute = 2.   ; dissociation factor

;-----------------------
; set output parameters
;-----------------------

  ;*** droplet sizes ***
  nsize = 3000
  r_um  = fspan(0.01,10.,nsize)  ; droplet size in microns
  r_m   = r_um*10.^-6  

  ;*** saturation ratio ***
  es_r = new((/msize,nsize/),"float")

  ;*** critical radius and saturation ratio ***
  r_crit = mass
  s_crit = mass

  ;*** curvature and solution effect for given solute ***
  mass1   = 10.^-18  ; solute mass (kg)
  solute1 = m_nh4    ; solute molecular weight (kg)

  curv_r = r_um
  solute_r = r_um
  one_r    = r_um

  a = 2.*sigma / (rho_l*rv*temp_k)
  b = 3.*2*m_water*mass1 / (4.*pi*rho_l*solute1)
  curv_r = exp(a/r_m)
  solute_r = 1. - b/r_m^3
  one_r = 1.


;-----------------------
; compute kohler curve
;-----------------------
;
  do j=0,msize-1
    a = 2.*sigma / (rho_l*rv*temp_k)
    b = 3.*i_solute(j)*m_water*mass(j) / (4.*pi*rho_l*m_solute(j))

    r_crit(j) = sqrt(3.*b/a)
    s_crit(j) = 1. + sqrt(4.*a^3/27./b)
    es_r(j,:) = (1.-b/r_m^3)*exp(a/r_m)
  end do
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** gsn res ***
  res@gsnMaximize = True
  res@gsnFrame = False
;  res@gsnDraw = False
;
;*** adjust axis type ***
  res@xyXStyle = "log"  ;  "Linear" "Irregular"
;  res@trYReverse = True
;
;*** adjust XY range ***
  res@trXMinF = min(r_um)
  res@trXMaxF = max(r_um)
  res@trYMinF = 0.99
  res@trYMaxF = 1.01

;*** adjust tickmark ***
  res@tmXTOn = False
  res@tmYROn = False
;  res1@tmXTLabelsOn = False
;
  res@tmXBMode = "Explicit"
  res@tmXBValues = (/0.01,0.1,1.,10./)
  res@tmXBLabels = flt2string(res@tmXBValues)
  res@tmXBMinorValues = (/0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,\
                          0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,\
                          2.,3.,4.,5.,6.,7.,8.,9./)

  res@tmYLMode = "Manual"
  res@tmYLTickStartF = 0.99
  res@tmYLTickEndF = 1.01
  res@tmYLTickSpacingF = 0.002

  res@tiXAxisString = "Droplet radius (um)"
  temp1 = flt2string(temp_c)
  res@tiYAxisString = "Super-saturation ratio (T=" + temp1 + "~S~o~N~C)"
;
;*** plot curvature and solute effect only ***
  res2 = res
  res2@xyMonoLineColor = True
  res2@xyLineColor = 1
  res2@xyMonoDashPattern = True
  res2@xyDashPattern = 0

;*** plot 6 Kohler curves ***
  res1 = res

; adjust xy dash pattern 
  res1@xyMonoDashPattern = False
;  res1@xyDashPattern = 1
  res1@xyDashPatterns = (/2,3,0, \
                          2,3,0/)
;
; adjust xy line color
  res1@xyMonoLineColor = False
  res1@xyLineColors = (/4,4,4,2,2,2/)
;  res1@xyLineColor = 10
;
;-------
; plot
;-------
  plot = gsn_csm_xy(wks,r_um,es_r,res1)
  plot = gsn_csm_xy(wks,r_um,(/one_r,curv_r,solute_r/),res2)

;
;;--------------
;; draw legend
;;--------------
;;
;  lgres = True
;;  lgres@lgMonoLineColor = False
;  lgres@lgLineColors = (/2,2,2,4,4,4/)
;;  lgres@lgMonoDashIndex = res@xyMonoDashPattern
;  lgres@lgDashIndexes = (/0,3,2,0,3,2/)
;;  lgres@lgMonoLineThickness = True
;;  lgres@lgLineThicknessF = res@xyLineThicknessF
;
;  lgres@lgAutoManage = False
;  lgres@lgLabelFontHeightF = 0.05
;
;  lgres@vpWidthF = 0.30
;  lgres@vpHeightF = 0.20
;
;;  lgres@lgPerimOn = False
;
;  lg_x = 0.64
;  lg_y = 0.91
;  label_names = (/ \
;                  "10~S~-17~N~ (NH~B~4~N~)~B~2~N~SO~B~4" , \
;                  "10~S~-18~N~ (NH~B~4~N~)~B~2~N~SO~B~4", \
;                  "10~S~-19~N~ (NH~B~4~N~)~B~2~N~SO~B~4", \
;                  "10~S~-17~N~ NaCl",\
;                  "10~S~-18~N~ NaCl",\
;                  "10~S~-19~N~ NaCl"\
;                /)
;;
;  gsn_legend_ndc(wks,6,label_names,lg_x,lg_y,lgres)

  frame(wks)



EOF

#*** case: "kohler" end ***


#*** case: "planck" start ***
elif [ $casename_work -a $casename_work == "planck" ]; then
  cat >> $ncl_name << EOF
;****************************************************************
;
; COMPUTE Planck's function with given wavelength or frequency
;
;****************************************************************

;--------------------------
; set universal constants
;--------------------------
  pi = acos(-1.)

  c = 3.*10.^8d       ; speed of light (m/s)
  h = 6.626*10.^-34d  ; Planck constant (m2 kg/s)
  kb = 1.381*10.^-23d ; Boltzmann constant (m2 kg/s2/K)
  sb = 5.67*10.^-8d   ; Stefan-Boltzmann constant (W/m2/K4)

;------------------------
; set input parameters
;------------------------
  t = 298.            ; temperature, k

  ll_i_um = 0.01d      ; start wavelength (microns)   
  ll_f_um = 5000.d     ; end   wavelength (microns)

  vv_i = 1.*10.^9d     ; start frequency (1/s)
  vv_f = 2.*10.^9d     ; end   frequency (1/s)

  ww_i_cm = 0.001d      ; start wavenumber (1/cm)
  ww_f_cm = 650.d     ; end   wavenumber (1/cm)

  ;*** set to missing value ***
  ;ll_i = -1.d
  ;ll_f = -1.d
  ;vv_i = -1.d
  ;vv_f = -1.d
  ;ww_i = -1.d
  ;ww_f = -1.d

  ;*** change units ***
  ;ll_i = c/vv_f   
  ;ll_f = c/vv_i   
  ;vv_f = c/ll_i_um * 10.^6  ; change wavelength (um) to frequency (1/s)
  ;vv_i = c/ll_f_um * 10.^6
  ;ww_i_cm = 1./ll_f_um * 10.^4    ; change wavelength (um) to wavenumber (cm)
  ;ww_f_cm = 1./ll_i_um * 10.^4

  nsize = 100000      ; size of working array

;----------------------------
; compute planck's function
;----------------------------

;*** wavelength (meter) ***
  if ( ll_i_um .ge. 0. .and. ll_f_um .ge. 0. ) then
    ll_i = ll_i_um * 10.^-6d  ; change unit from microns to meter
    ll_f = ll_f_um * 10.^-6d

    ll = fspan(ll_i, ll_f, nsize) ; wavelength, m
    b_l = 2.*h*c^2 / (ll^5 * (exp(h*c/kb/ll/t)-1.))  ; Planck's function on wavelength, unit: W/m2/sr/m

    summ_l = ftcurvi(ll_i,ll_f,ll,b_l)
    flux_l = pi*summ_l

    print("")
    print("At wavelength from "+ll_i_um+" um to "+ll_f_um+ " um")
    print("the total intensity is "+summ_l+" and the isotropic flux is "+flux_l+" W/m2")
  end if

;*** frequency (1/s) ***
  if ( vv_i .ge. 0. .and. vv_f .ge. 0. ) then
    vv = fspan(vv_i, vv_f, nsize) ; frequency, 1/s
    b_v = 2.*h*vv^3/c^2 / (exp(h*vv/kb/t)-1.)        ; Planck's function on frequency , unit: W/m2/sr/(1/s)

    summ_v = ftcurvi(vv_i,vv_f,vv,b_v)
    flux_v = pi*summ_v

    print("")
    print("At frequency from "+vv_i+" /s to "+vv_f+ " /s")
    print("the total intensity is "+summ_v+" and the isotropic flux is "+flux_v+" W/m2")
  end if

;*** wavenumber (1/m) ***
  if ( ww_i_cm .ge. 0. .and. ww_f_cm .ge. 0. ) then
    ww_i = ww_i_cm * 100.  ; change wavenumber unit from 1/cm to 1/m
    ww_f = ww_f_cm * 100.

    ww = fspan(ww_i, ww_f, nsize) ; wavenumber, 1/m
    b_w = 2.*h*c^2*ww^3 / (exp(h*c*ww/kb/t)-1.)

    summ_w = ftcurvi(ww_i,ww_f,ww,b_w)
    flux_w = pi*summ_w

    print("")
    print("At wavenumber from "+ww_i_cm+" cm-1 to "+ww_f_cm+ " cm-1")
    print("the total intensity is "+summ_w+" and the isotropic flux is "+flux_w+" W/m2")
  end if

;print(b_w)
    
;--------------------------
; Wien's displacement law
;--------------------------

  c1 = 5.8804 * 10.^10 ; unit: s K
  c2 = 2.899 * 10.^-3  ; unit: m K

  vmax = c1 * t          ; frequency (1/s)
  lmax = c2/t * 10.^6    ; wavelegth (microns)
  wmax = 1./lmax * 10.^4 ; wavenumber (1/cm)
  

  print("")
  print("temp= "+t+"K, the peak of planck's function is at "+lmax+" (microns) ="+vmax+" (1/s) = "+wmax+" (cm-1)")
  print("")

;print(vmax)
;print(lmax)
;print(c/vmax)
;print(c/lmax)

;-----------------------
; Stefan–Boltzmann law
;-----------------------

  flux = sb * t^4 ; Stefan-Boltzmann Law, unit W/m2
  print("Emitted energy flux computed by Stefan-Boltzmann Law is "+flux+" W/m2")
  print("")
 
EOF
#*** case: "planck" end ***

#*** case: "cesm-contour-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-contour-2files" ]; then
 
cat >> $ncl_name << EOF
;-------------------
; general settings
;-------------------
  wks_type = "png"
  wks_name = "test111"

;-------------
; open files
;-------------

  fname_${suffix01} = "${file01}"
  fname_${suffix02} = "${file02}"

  file_${suffix01} = addfile( fname_${suffix01} , "r" )
  file_${suffix02} = addfile( fname_${suffix02} , "r" )

  varvar = "$var01"

  ttt = 0

  varvar_${suffix01} = file_${suffix01}->\$varvar\$ (ttt,:,:)
  varvar_${suffix02} = file_${suffix02}->\$varvar\$ (ttt,:,:)

  varvar_diff = diff(varvar_${suffix02},varvar_${suffix01})

;print()
;printVarSummary()

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
;  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
;  res_${suffix01}@cnMinLevelValF = 
;  res_${suffix01}@cnMaxLevelValF = 
;  res_${suffix01}@cnLevelSpacingF = 
;
;  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
;  res_${suffix01}@cnLevels = (//)

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for ${suffix02} ***
  res_diff = res
  res_diff@tiMainString = "${suffix02} minus ${suffix01}"
;  res_diff@cnLevelSelectionMode = "ManualLevels"
;  res_diff@cnMinLevelValF = 
;  res_diff@cnMaxLevelValF = 
;  res_diff@cnLevelSpacingF = 
;
;  res_diff@cnLevelSelectionMode = "ExplicitLevels"
;  res_diff@cnLevels = (//)


;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}, res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}, res_${suffix02})
  plot_varvar_diff = gsn_csm_contour_map (wks, varvar_diff, res_diff)
  
  
  plot_varvar = new (3,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_diff
;
  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/2,1/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)


EOF
#*** case: "cesm-contour-2files" end ***

#*** case: "ttest" start ***
elif [ $casename_work -a $casename_work == "ttest" ]; then
cat >> $ncl_name << EOF
;-------------
; open files
;-------------
  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

;*** arbitrary variable ***
  xx = "$var01"
  x = file_${suffix01}->\$xx\$
  y = file_${suffix02}->\$xx\$

;----------
; t-test
;----------

; compute area-average

  ;xtmp = dim_avg_n_Wrap(x, (/1,2/))
  ;ytmp = dim_avg_n_Wrap(y, (/1,2/))
  xtmp = lat_wgt_avg(x)
  ytmp = lat_wgt_avg(y)

;*** compute time-average and variance ***
  xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
  yAve = dim_avg_Wrap (ytmp)
  xVar = dim_variance_Wrap (xtmp)         ; calculate variances
  yVar = dim_variance_Wrap (ytmp)

;*** get size ***
  xN = dimsizes(xtmp)
  yN = dimsizes(ytmp)
;
; 
; function ttest(ave1, var1, s1, ave2, var2, s2, iflag, tval_opt)
;	ave1    : Scalars or arrays of any dimension (they must be the same dimensionality as each other). They represent the means (averages) calculated from two samples (i.e. sample means).
;       ave2
;	var1    : Scalars or arrays of the same dimensionality as ave1 and ave2. They represent the variances calculated from two samples (i.e. sample variances).
;	var2
;	s1      : These contain the number of statistically independent observations.
;	s2
;       iflag   : Set to False if the two original samples are assumed to have the same population variance. Set to True if the two original samples are assumed to have different population variances.
;       tval_opt: Set to True if the Student t-values are to be returned in addition to the statistical probabilities. Set to False if only the probabilities are desired.
;
; ttest Ref: http://goo.gl/V1CDCd
;
;  
  siglvl = 0.05                        ; critical sig lvl for r
  iflag= False
  prob = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)  ; p-value ot student-t test 

print(prob)
;print(dim_avg(xtmp))
;print(dim_avg(ytmp))

;
;  do j=0,nlat-1
;  do i=0,nlon-1
;    ;if(prob(j,i).lt.siglvl) then
;    if(prob(j,i).gt.siglvl) then
;      print(i + "," + j + ", " + prob(j,i))
;    end if
;  end do
;  end do


EOF
#*** case: "ttest" end ***

#*** case: "cesm-profile-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-profile-2files" ]; then
 
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  var = "${var01}"

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
  var_${suffix01}    = file_${suffix01}->\$var\$

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa
  var_${suffix02}    = file_${suffix02}->\$var\$

  plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
    250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
    850., 875., 900., 925., 950., 975., 1000./)

  varp_${suffix01}  = vinth2p(var_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
  varp_${suffix02} = vinth2p(var_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)

;print()
;printVarSummary(varp_${suffix01}&lev_p)
;printVarSummary(varp_${suffix02})
;print(varp_${suffix01}&lev_p)

;---------------
; post process
;---------------

  varp_${suffix01}_avg = lat_wgt_avg(varp_${suffix01})
  varp_${suffix02}_avg = lat_wgt_avg(varp_${suffix02})

  varp_diff = diff(varp_${suffix02}_avg,varp_${suffix01}_avg)

;printVarSummary(varp_${suffix01}_avg)
;printVarSummary(varp_${suffix02}_avg)

;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** gsn res ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;
;*** adjust axis type ***
;  res@xyYStyle = "log"  ;  "Linear" "Irregular"
;  res@xyXStyle = "log"  ;  "Linear" "Irregular"
  res@trYReverse = True
;
;*** adjust XY range ***
;  res@trXMinF = 
;  res@trXMaxF = 
;  res@trYMinF = 
;  res@trYMaxF = 
;
;*** adjust xy line mode ***
;  res@xyMonoMarkLineMode = False
;  res@xyMarkLineMode  = "MarkLines"  ; "Lines" "Markers" 
;  res@xyMarkLineModes = (/"MarkLines"/)
;
;*** adjust xy dash pattern ***
;  res@xyMonoDashPattern = False
;  res@xyDashPattern = 1
;  res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  res@xyMonoLineColor = False
;  res@xyLineColors = (/1,3,3,14,14/)
;  res@xyLineColor = 10
;
;*** adjust xy markers ***
;  res@xyMonoMarker = False
;  res@xyMarker = 1
;  res@xyMarkers = (//)
;
;  res@xyMonoMarkerColor = False
;  res@xyMarkerColor = 1
;  res@xyMarkerColors = (//)
;
;*** adjust xy line thickness ***
;  res@xyMonoLineThickness = True
;  res@xyLineThicknessF = 3.
;  res@xyLineThicknesses = 
;
;*** adjust tickmark ***
;  res@tmXTOn = False
;  res@tmXTLabelsOn = False
;
;  res@tmXBMode = "Explicit"
;  res@tmXBValues = (//)
;  res@tmXBLabels = flt2string(res@tmXBValues)
;  res@tmXBLabels = (//)
;  res@tmXBMinorValues = (//)

  res1 = res
  res1@tiXAxisString = var

  res2 = res
  res2@tiMainString = "${suffix02} minus ${suffix01}"
  

;
;*** adjust string ***
;  res@tiMainString =
;  res@tiXAxisString = 
;  res@tiYAxisString = 
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;-------
; plot
;-------
  label_names = (/"${suffix01}","${suffix02}"/)
  plot1 = ignorant_xy(wks,(/varp_${suffix01}_avg(0,:),varp_${suffix02}_avg(0,:)/),plev,label_names,res1,opt)
  plot2 = gsn_csm_xy(wks,varp_diff,plev,res2)
  
  plot_var = new (2,"graphic")
  
  plot_var(0) = plot1
  plot_var(1) = plot2
  
;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

  gsn_panel(wks, plot_var, (/1,2/), resp)
;
;--------------
; draw legend
;--------------
;
;  lgres = True
;  lgres@lgMonoLineColor = False
;  lgres@lgLineColors = res@xyLineColors
;  lgres@lgMonoDashIndex = res@xyMonoDashPattern
;  lgres@lgDashIndex = res@xyDashPattern
;  lgres@lgMonoLineThickness = True
;  lgres@lgLineThicknessF = res@xyLineThicknessF

;  lgres@lgAutoManage = False
;  lgres@lgLabelFontHeightF = 0.08

;  lgres@vpWidthF = 0.15
;  lgres@vpHeightF = 0.05

;  lgres@lgPerimOn = False

;  lg_x = 0.59
;  lg_y = 0.46
;  label_names = (/" CTL"," ZMJPt1d50"/)
;
;  gsn_legend_ndc(wks,2,label_names,lg_x,lg_y,lgres)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)


EOF

#*** case: "cesm-profile-2files" end ***

#*** case: "es" start ***
elif [ $casename_work -a $casename_work == "es" ]; then

cat >> $ncl_name << EOF


  ;temp_c = 10.                ; temperature in degree C
  temp_c = fspan(-8.,-12.,9)
  temp_k = temp_c + 273.15     ; temperature in degree K

  ; compute water liquid/ice saturation vapor pressure using Emanuel (1994)
  esl_hpa = exp (53.67957 - 6743.769  /temp_k - 4.8451 *log(temp_k))
  esi_hpa = exp (23.33086 - 6111.72784/temp_k + 0.15215*log(temp_k))

  esl_pa = esl_hpa*100.  ; change unit to Pa
  esi_pa = esi_hpa*100.  ; change unit to Pa

;print(temp_c)
;print(esl_hpa)
;print(esi_hpa)


EOF

#*** case: "es" end ***

#*** case: "binmap-one" start ***
elif [ $casename_work -a $casename_work == "binmap-one" ]; then
cat >> $ncl_name << EOF
;------------
; open file
;------------
  file_${suffix01} = addfile( "${file01}" , "r" )

  varvar_name = "${var01}"
  varvar = file_${suffix01}->\$varvar_name\$

;*** output from function binmap-one ***
  xx_num_${suffix01} = varvar@bin_total_number
  xx_mid_${suffix01} = varvar&bin
  xx_int_${suffix01} = varvar@bin_interface
  yy_avg_${suffix01} = varvar(1,:)
  yy_std_${suffix01} = varvar(2,:)
  yy_pdf_${suffix01} = varvar@pdf

;*** input fields **
;  xx_num_${suffix01} =
;  xx_mid_${suffix01} =
;  xx_int_${suffix01} =
;  yy_avg_${suffix01} =
;  yy_std_${suffix01} =
;  yy_pdf_${suffix01} =

;print(xx_mid_${suffix01})
;print(xx_int_${suffix01})
;print(yy_avg_${suffix01})
;print(yy_std_${suffix01})
;print(yy_pdf_${suffix01})
;
  color_avg1 = 1  ; color index of average plot
  color_pdf1 = 2  ; color index of pdf plot

;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** shared res ***
  res@gsnFrame = False

  res@trXMinF = min(xx_int_${suffix01}) 
  res@trXMaxF = max(xx_int_${suffix01})

  res@tmXBMode = "Explicit"
  res@tmXBValues = xx_int_${suffix01}
  res@tmXBLabels = flt2string(res@tmXBValues)
  ;res@tmXBMinorValues = xx_mid_${suffix01}
  res@tmXBLabelStride = 2

;*** left plot res ***
  res1 = res
  res1@gsnMaximize = True

  res1@trYMinF = 0. 
  res1@trYMaxF = 5.

  res1@xyMarkLineMode  = "Markers" 
  res1@xyMonoMarker = True
  res1@xyMarker = 16

  res1@tiMainString = ""
  res1@tiXAxisString = ""
  res1@tiYAxisString = ""
;  res1@gsnLeftString =
;  res1@gsnLeftStringFontHeightF =
;  res1@gsnCenterString =
;  res1@gsnRightString =
  res1@gsnRightString = (tostring(xx_num_${suffix01}) + "#")

;*** right plot res ***
  res2 = res
  res2@tmYLOn = False
  res2@tmYLLabelsOn = False
  res@tmYROn = True
  res2@tmYRLabelsOn = True

  res2@xyMonoLineColor = True
  res2@xyLineColor = 2

  res2@tiYAxisString = "Probability Density Function"
  res2@tiYAxisFontColor = res2@xyLineColor
  res2@tmYRLabelFontColor = res2@xyLineColor
;
;-------
; plot
;-------

  plot = gsn_csm_xy2(wks,xx_mid_${suffix01},yy_avg_${suffix01},yy_pdf_${suffix01},res1,res2)
  ;plot = gsn_csm_xy(wks,xx_mid_${suffix01},yy_avg_${suffix01},res1)
  ;plot = gsn_csm_xy2(wks,xx_mid_${suffix01},yy_pdf_${suffix01},res2)

;--------------------------
; draw standard deviation
;--------------------------

  lres = True
  lres@gsLineThicknessF = 2.

  num11 = dimsizes(yy_avg_${suffix01})
  xx_delta = tofloat(abs(xx_int_${suffix01}(1)-xx_int_${suffix01}(0))/4.)

  do i=0,num11-1
    xx11 = xx_mid_${suffix01}(i)
    if (ismissing(yy_std_${suffix01}(i)) .or. yy_std_${suffix01}(i) .eq. 0.)
      xx22 = 0.
      xx33 = 0.
    else
      xx22 = xx11 - xx_delta
      xx33 = xx11 + xx_delta
    end if

    if (ismissing(yy_avg_${suffix01}(i))) then
      yy11 = 0.
      yy22 = 0.
    else
      yy_delta = yy_std_${suffix01}(i)
      yy11 = yy_avg_${suffix01}(i) + yy_delta
      yy22 = yy_avg_${suffix01}(i) - yy_delta
    end if

    lres@gsLineColor = color_avg1
    gsn_polyline(wks,plot,(/xx11,xx11/),(/yy11,yy22/),lres)
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy11,yy11/),lres)
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy22,yy22/),lres)
  end do

frame(wks)


EOF
#*** case: "binmap-one" end ***

#*** case: "cloudsat-track-series" start ***
elif [ $casename_work -a $casename_work == "cloudsat-track-series" ]; then
 
cat >> $ncl_name << EOF
;-------------
; open files
;-------------
  files = systemfunc("ls ../data/*GEOPROF*")
  num_file = dimsizes(files)

  var_lat = "latitude"    ; lat,lon variable name in files
  var_lon = "longitude"

  mp_lat_max = 30.   ; map lat/lon area
  mp_lat_min = -30.
  mp_lon_max = 150.
  mp_lon_min =  90.

  box_lat_max = 20.  ; user-drawed box lat/lon area
  box_lat_min = -10.
  box_lon_max = 140.
  box_lon_min = 100.

;---------------
; NCL resources
;---------------
;
  wks = gsn_open_wks(wks_type,wks_name)

  mpres                    = True        ; Plot options desired.
  mpres@gsnFrame           = False       ; Don't advance the frame
  mpres@gsnMaximize        = True

  mpres@mpLimitMode = "LatLon"
  mpres@mpMaxLatF = mp_lat_max
  mpres@mpMinLatF = mp_lat_min
  mpres@mpMaxLonF = mp_lon_max
  mpres@mpMinLonF = mp_lon_min

  mpres@tiMainString       = ""
;  mpres@gsnRightString    = ("Source:"+file_name)
  plot = gsn_csm_map(wks,mpres)          ; Draw map   

  lnres = True
  lnres@gsLineColor = (/1.,0.,0./)
  lnres@gsLineThicknessF = 3.
  gsn_polyline(wks,plot,(/box_lon_max,box_lon_max,box_lon_min,box_lon_min,box_lon_max/), \\
                        (/box_lat_max,box_lat_min,box_lat_min,box_lat_max,box_lat_max/),lnres)
                                         ; trajectory
  gsres                    = True        ; "Graphic Style" resources
  gsres@gsMarkerSizeF      = 10.0        ; Marker size
  gsres@gsMarkerThicknessF = 1.0         ; Marker thickness
  gsres@gsMarkerColor      = "Blue"      ; Marker color
  gsres@gsMarkerIndex      = 1           ; Marker style

do ff=0,num_file-1
;do ff=0,1
  file_name = files(ff)
  file_${suffix01} = addfile( file_name , "r" )

  lat = file_${suffix01}->\$var_lat\$
  lon = file_${suffix01}->\$var_lon\$

  if (ff.le.47) then
    gsres@gsMarkerColor      = "Blue"      ; Marker color
  else if (ff.gt.47 .and. ff.le.101) then
    gsres@gsMarkerColor      = "Green"      ; Marker color
    ;gsres@gsMarkerColor      = "Blue"      ; Marker color
  else 
    gsres@gsMarkerColor      = "Black"      ; Marker color
    ;gsres@gsMarkerColor      = "Blue"      ; Marker color
  end if
  end if

  gsn_polymarker(wks,plot,lon,lat,gsres) ; plot trajectory

  delete(lat)
  delete(lon)
  print("Done. "+ff+"/"+num_file)
end do ; end loop of files

frame(wks)


EOF
#*** case: "cloudsat-track-series" end ***

#*** case: "cloudsat-radar-series" start ***
elif [ $casename_work -a $casename_work == "cloudsat-radar-series" ]; then
 
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  files = systemfunc("ls ../data/*GEOPROF*")
  num_file = dimsizes(files)

do ff=0,num_file-1
;do ff=0,1;5

  file_name = files(ff)
  suffix = sprinti("%3.3i",ff)
;print(suffix)

  file_${suffix01} = addfile( "file_name" , "r" )

  lat_${suffix01} = file_${suffix01}->latitude
  lon_${suffix01} = file_${suffix01}->longitude
  radar_${suffix01} = file_${suffix01}->Radar_Reflectivity_2B_GEOPROF(:,0:103:-1)
  alt_${suffix01} = file_${suffix01}->Height_2B_GEOPROF(:,0:103:-1)

;---------------
; post process
;---------------
  num_time = dimsizes(lat_${suffix01})
  num_alt  = 126   
  alt_max  = 30000.  ; cloudsat radar resolution, 240m, max detection altitude 30km

  tt = fspan(1.,num_time,num_time)  ; time coordinate
  hh = fspan(0.,alt_max,num_alt)    ; altitude coordinate

  radar = new((/num_alt,num_time/),"float")
  radar!0 = "altitude"
  radar&altitude = hh/1000.
  radar!1 = "time"
  radar&time = tt
 
  do t=0,num_time-1
    radar(:,t) = linint1(alt_${suffix01}(t,:),radar_${suffix01}(t,:),False,hh,0) ; interpolate radar reflecctivity
  end do

;-------------------
; set work station
;-------------------

  ;wks_name = ("fig-radar-"+suffix)
  wks = gsn_open_wks(wks_type,wks_name)

;
  gsn_define_colormap(wks,"radar")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
  res@vpXF = 0.15
  res@vpYF = 0.8
  res@vpHeightF = 0.4
  res@vpWidthF = 0.78
;
;*** adjust contour levels ***
  res@cnLevelSelectionMode = "ManualLevels"
  res@cnMinLevelValF = -30.
  res@cnMaxLevelValF = 40.
  res@cnLevelSpacingF = 10.
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@gsnSpreadColors = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
;
;*** adjust tickmark ***
  iii = 19
  xb_minor = fspan(0.,tofloat(num_time),iii)
  i1 = 1
  i2 = toint(xb_minor(toint(iii/2)))
  i3 = num_time-1

  res@tmXBMode = "Explicit"
  res@tmXBMinorValues = xb_minor

  res@tmXBValues = (/1,toint(num_time/2),num_time/)
  res@tmXBLabels = (/ \\
                    "lon="+sprintf("%5.2f",lon_${suffix01}(i1))+"~C~lat="+sprintf("%5.2f",lat_${suffix01}(i1)), \\
                    "lon="+sprintf("%5.2f",lon_${suffix01}(i2))+"~C~lat="+sprintf("%5.2f",lat_${suffix01}(i2)), \\
                    "lon="+sprintf("%5.2f",lon_${suffix01}(i3))+"~C~lat="+sprintf("%5.2f",lat_${suffix01}(i3)) \\
                   /)
;
;*** adjust label bar ***
;
  res@lbTitleOn = True
  res@lbTitleString = "Radar Reflectivity (dBZ)"
  res@lbTitlePosition = "Bottom"
;
  res@lbAutoManage = False
  res@lbLabelFontHeightF = 0.02
  res@pmLabelBarWidthF = 0.8

;*** set title string ***
  res@tiMainString = "CloudSat Radar Reflectivity"
;  res@tiXAxisString =
  res@tiYAxisString = "Altitude (km)"
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
  res@gsnLeftString = ("Source: "+file_name)
;
;

;-------
; plot
;-------
;
  plot = gsn_csm_contour(wks,radar,res)
;

  delete(lat_${suffix01})
  delete(lon_${suffix01})
  delete(radar_${suffix01})
  delete(alt_${suffix01})
  delete(tt)
  delete(hh)
  delete(radar)
  print("Done. "+ff+"/"+num_file)


end do ; end do of files


EOF

#*** case: "cloudsat-radar-series" end ***

#*** case: "cloudsat-cldclass-series" start ***
elif [ $casename_work -a $casename_work == "cloudsat-cldclass-series" ]; then
 
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  files = systemfunc("ls ../data/*CLDCLASS*")

  num_file = dimsizes(files)

do ff=0,num_file-1
;do ff=157,157

  file_name = files(ff)
  suffix = sprinti("%3.3i",ff)
;print(suffix)

  file_${suffix01} = addfile( file_name , "r" )

  lat     = file_${suffix01}->latitude
  lon     = file_${suffix01}->longitude    ; (nray_2B_CLDCLASS_LIDAR) => (37082)
  time    = file_${suffix01}->Profile_time_2B_CLDCLASS_LIDAR ; (nray_2B_CLDCLASS_LIDAR) => (37082)
  cldlay  = file_${suffix01}->Cloudlayer_2B_CLDCLASS_LIDAR
  cldtype = file_${suffix01}->CloudLayerType_2B_CLDCLASS_LIDAR

  laybase = file_${suffix01}->CloudLayerBase_2B_CLDCLASS_LIDAR
  laytop  = file_${suffix01}->CloudLayerTop_2B_CLDCLASS_LIDAR
  cldf    = file_${suffix01}->CloudFraction_2B_CLDCLASS_LIDAR

;  cldtype@_FillValue = 0.


;t1 = 1
;print(cldlay(t1))
;print(cldlay(:))
;print(cldtype(t1,:))
;print(laybase(t1,:))
;print(laytop(t1,:))

;---------------
; post process
;---------------
  num_time = dimsizes(lat)
  num_cldlay = dimsizes(cldtype(0,:))

  num_alt  = 1001   ; interpolate to 30m resolution, max height=30km
  alt_max  = 30000.

  tt = fspan(1.,num_time,num_time)
  hh = fspan(0.,alt_max,num_alt)
  hh = hh/1000.

;print(hh)

  cldtype_all = new( (/num_alt,num_time/) , "float" )
  cldtype_all!0 = "altitude"
  cldtype_all&altitude = hh
  cldtype_all!1 = "time"
  cldtype_all&time = tt
  cldtype_all@_FillValue = -9.
  cldtype_all = -9.

;printVarSummary(cldtype_all)

;print(hh)

;do i=1,1  ; 1 layer Cu
;do i=15,15
;do i=2773,2773
do i=0,num_time-1
  do k=0,num_cldlay-1  

;print(i+","+k+"  "+cldtype(i,k))
    ;if (.not.ismissing(cldtype(i,k))) then
    if (cldtype(i,k).ne.0.) then
;      print(cldtype(i,k))
      h_top  = laytop(i,k)
      h_base = laybase(i,k)

      k_top  = closest_val(h_top,hh)
      k_base = closest_val(h_base,hh)

      type1 = cldtype(i,k)
      cldtype_all(k_base:k_top,i) = type1

      if (type1.eq.8) then
        cldtype_all(k_base:k_top,i) = 4.
      else if (type1.eq.4) then
        cldtype_all(k_base:k_top,i) = 5.
      else if (type1.eq.5) then
        cldtype_all(k_base:k_top,i) = 6.
      else if (type1.eq.6) then
        cldtype_all(k_base:k_top,i) = 7.
      else if (type1.eq.7) then
        cldtype_all(k_base:k_top,i) = 8.
      end if
      end if
      end if
      end if
      end if

;print(type1)
;print(h_top+","+h_base+" "+k_top+","+k_base+"  type:"+type1)
    end if
  end do
end do

;i=2773
;do kk=0,num_alt-1
;print(kk+" , "+hh(kk)+" , "+cldtype_all(kk,i))
;end do

;-------------------
; set work station
;-------------------
  ;wks_name = ("fig-cloudtype-"+suffix)
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"WhiteBlueGreenYellowRed")
  gsn_define_colormap(wks,"default")
;  gsn_define_colormap(wks,"perc2_9lev")
;  gsn_define_colormap(wks,"amwg")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
  res@vpXF = 0.15
  res@vpYF = 0.8
  res@vpHeightF = 0.4
  res@vpWidthF = 0.78
;
;*** adjust contour levels ***
  res@cnLevelSelectionMode = "ManualLevels"
  res@cnMinLevelValF = 1.5
  res@cnMaxLevelValF = 7.5
  res@cnLevelSpacingF = 1.
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnFillMode = "RasterFill"
  res@gsnSpreadColors = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
  ;res@cnFillColors = (/6,5,4,8,9,12,13,14/) 
;  res@cnFillColors = (/6,7,8,9,12,13,14,15/) 
  res@cnFillColors = (/9,20,14,10,3,19,2,8/) 
  res@cnMissingValFillColor = 0 ;"transparent"
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 33
;  res@gsnSpreadColorEnd = -1

  
;
;*** adjust tickmark ***

  iii = 19
  xb_minor = fspan(0.,tofloat(num_time),iii)
  i1 = 1
  i2 = toint(xb_minor(toint(iii/2)))
  i3 = num_time-1

  res@tmXBMode = "Explicit"

  res@tmXBValues = (/1,toint(num_time/2),num_time/)
  res@tmXBLabels = (/ \\
                    "lon="+sprintf("%5.2f",lon(i1))+"~C~lat="+sprintf("%5.2f",lat(i1)), \\
                    "lon="+sprintf("%5.2f",lon(i2))+"~C~lat="+sprintf("%5.2f",lat(i2)), \\
                    "lon="+sprintf("%5.2f",lon(i3))+"~C~lat="+sprintf("%5.2f",lat(i3)) \\
                   /)
  res@tmXBMinorValues = xb_minor

;
;*** adjust label bar ***
;
;  res@lbTitleOn = True
;  res@lbTitleString = "Radar Reflectivity (dBZ)"
;  res@lbTitlePosition = "Bottom"
;
  res@lbAutoManage = False
  res@lbLabelFontHeightF = 0.02
  res@pmLabelBarWidthF = 0.8

  res@lbLabelStrings = (/"Ci","As","Ac","Ns","St","Sc","Cu","Cb"/)
  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelPosition = "Center"

;*** set title string ***
  res@tiMainString = "CloudSat Cloud Classification"
;  res@tiXAxisString =
  res@tiYAxisString = "Altitude (km)"
  res@gsnLeftString = ""
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString = ("Source: "+file_name)
  res@gsnLeftString = ("Source: "+file_name)
;
;

;-------
; plot
;-------
;
  plot = gsn_csm_contour(wks,cldtype_all,res)


  delete(lat)
  delete(lon)
  delete(time)
  delete(cldlay)
  delete(cldtype)
  delete(laybase)
  delete(laytop)
  delete(cldf)

  delete(tt)
  delete(hh)
  delete(cldtype_all)
  print("Done. "+ff+"/"+num_file)
;

end do ; end of files


EOF

#*** case: "cloudsat-cldclass-series" end ***

#*** case: "barchart-stacked_old" start ***
elif [ $casename_work -a $casename_work == "barchart-stacked_old" ]; then
 
cat >> $ncl_name << EOF
;----------------
; input argument
;----------------

;*** sample ***
;  nbars     = 15        ; number of bars, bar coordinate assume from 0-nbars-1
;  nvars_all = 5         ; number of variables
;  nvars     = nvars_all ; number of plot variables 
;  vars = new( (/nvars_all,nbars/) , "float") ; value of each variable
;
;  d1 = fspan(0.1,2.3,nbars)  
;  d2 = fspan(0.2,2.1,nbars) 
;  d3 = fspan(0.5,3.2,nbars)
;  d4 = fspan(0.3,4.1,nbars) 
;  d5 = fspan(0.3,4.1,nbars) 
;
;  vars(0,:) = d1
;  vars(1,:) = d2
;  vars(2,:) = d3
;  vars(3,:) = d4
;  vars(4,:) = d5
;  dnames = (/"Cb","Ns","Cu","Sc","St"/)
;  colors = (/2,3,4,5,6/)
;*** sample ***

  nbars     =         ; number of bars, bar coordinate assume from 0-nbars-1
  nvars_all =          ; number of variables
  nvars     = nvars_all ; number of plot variables 
  vars = new( (/nvars_all,nbars/) , "float") ; value of each variable
  dnames = (/"",""/)   ; label bar labels
  colors = (//)        ; bar color

  y_max = 0.
  do i=0,nvars-1
    y_max = y_max + max(vars(i,:))    ; maximum value of Y at this plot
  end do
;print(y_max)

;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
  gsn_define_colormap(wks,"default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res                          = True

  res@gsnDraw                  = False   ; Don't draw
  res@gsnFrame                 = False   ; Don't advance frame
;  res@gsnMaximize = True
;  res@vpXF = 0.1
;  res@vpYF = 0.9
;  res@vpWidthF                 = 0.8     ; Make long and
;  res@vpHeightF                = 0.8     ; narrow

;---Set axes limits. Add extra space for X max.
  res@trYMinF                  = 0.0
  ;res@trYMaxF                  = 
  res@trYMaxF                  = y_max
  res@trXMinF                  = 0
  res@trXMaxF                  = nbars + 1
  res@gsnTickMarksPointOutward = True

;---Put city labels on X axis
  res@tmXBMode                 = "Explicit"
  res@tmXBValues               = ispan(1,nbars,1)
  res@tmXBLabels               = tostring(res@tmXBValues)
;  res@tmXBLabelFontHeightF     = 0.01   ; make labels smaller
  res@tmXBMajorLengthF         = 0.01
  res@tmXTOn                   = False   ; Turn off top tickmarks

  res@tiXAxisString = ""
  res@tiYAxisString = ""

;---Create blank plot without Y grid lines

;******************
; plot coordinate
;******************
  plot_without_xgrid = gsn_csm_blank_plot(wks,res)

;***************
; plot polygon
;***************
  dums = new( (/nvars,nbars/) , "graphic")

  bres           = True
  bres@gsEdgesOn = True      ; Outline the polygons (bars)

  do i=1,nbars
    y1 = 0.
    do j=0,nvars-1
      bres@gsFillColor           = colors(j)
      xbar = (/i-0.25,i-0.25,i+0.25,i+0.25,i-0.25/)
      y2 = y1 + vars(j,i-1)      
      ybar = (/y1,y2,y2,y1,y1/)
      dums(j,i-1) = gsn_add_polygon(wks,plot_without_xgrid,xbar,ybar,bres)
      y1 = y2
    end do
  end do

;****************
; plot labelbar
;**************** 

nboxes =dimsizes(colors)

  ;getvalues plot_with_xgrid                ; get plot size for use in creating labelbar
  getvalues plot_without_xgrid                ; get plot size for use in creating labelbar
  "vpXF"      : vpx
  "vpYF"      : vpy
  "vpHeightF" : vph
  "vpWidthF"  : vpw
  end getvalues

;  lbw    = 0.15 * vpw           ; Make labelbar size a fraction of the plot.
;  lbh    = 0.2 * vph

;  colors1 = colors(::-1)
;  dnames1 = dnames(::-1)

  lbres                    = True          ; labelbar only resources
  lbres@lbPerimOn          = False
  lbres@vpWidthF           = 0.25 * vpw     ; labelbar width
  lbres@vpHeightF          = 0.7 * vph     ; labelbar height
  lbres@lbBoxMajorExtentF  = 0.8          ; puts space between color boxes
  lbres@lbFillColors       = colors ; labelbar colors
;  lbres@lbFillColors       = colors1 ; labelbar colors
  lbres@lbMonoFillPattern  = True          ; Solid fill pattern
  lbres@lbLabelFontHeightF = 0.02          ; font height. default is small
  lbres@lbJustification    = "TopLeft"
;  lbres@lbLabelJust        = "CenterLeft"  ; left justify labels
   
  gsn_labelbar_ndc(wks,nboxes,dnames,0.8,0.8,lbres)
;  gsn_labelbar_ndc(wks,nboxes,dnames1,0.8,0.8,lbres)

;********
; frame
;********
  pres             = True
  pres@gsnMaximize = True
  maximize_output(wks,pres)


EOF

#*** case: "barchart-stacked_old" end ***

#*** case: "barchart-stacked" start ***
elif [ $casename_work -a $casename_work == "barchart-stacked" ]; then
cat >> $ncl_name << EOF
;-------------------------------------------------
; description:
;   1. sort ydata into several bins based on xdata by using ignorant function, binmap2
;   2. plot a bar chart with standard deviation of this binned data 
;-------------------------------------------------

;-----------------
; general setting
;-----------------

  wks_type = "png"
  wks_name = "test111"

  colormap = "default"              ; color map name
  bar_colors = (/2,18,9,11/)        ; colors of bars
  std_colors = bar_colors           ; colors of standard deviation
  dnames = (/"y1","y2","y3","y4"/)  ; legend names
  barsize = 0.15                    ; % of bar width with respect to the interval         
  stdsize = 0.3                     ; % of std width with respect to the interval

  option_std = True                 ; option for plotting standard deviation
  ;option_std = False               ; 
  option_text_avgstd = True	    ; option for plotting mean and std on each bar
  ;option_text_avgstd = False	    ;
  option_text_count = True	    ; option for plotting count at each bin
  ;option_text_count = False	    ;

  gsnrightstring = ""		    ; "" will plot total count at gsnRightString

  xlabels_format = "%2.0f"          ; format of x labels

;------------------------------
; input data, xdata and ydata
;------------------------------

  ;npts   = 25
  ;xdata = random_normal(40.,3.,npts)
  ;y1data = random_normal(5.,1.,npts)
  ;y2data = random_normal(-21.,7.,npts)
  ;y3data = random_normal(3.,10.,npts)
  ;y4data = random_normal(16.,9.,npts)
  ;ydata = (/y1data,y2data,y3data,y4data/)

  ;xdata = 
  ;ydata = 

  nbin = 10 
  opt = True
  ydata_binx = binmap2(xdata,ydata,nbin,opt)
  ;printVarSummary(ydata_binx)

;-----------------------------------
; set variables for this bar chart
;-----------------------------------
  total_count = ydata_binx@bin_number_of_data
  midpoints = ydata_binx@bin_mid
  levels = ydata_binx@bin_edge
  interval = ydata_binx@bin_interval
  nbars = dimsizes(midpoints)
  nvars_all = dimsizes(ydata(:,0))
  nvars = nvars_all
  nums = toint(ydata_binx(0,0,:))
  vars = ydata_binx(:,2,:)  ; plot index 2: average
  stds = ydata_binx(:,3,:)  ; index 3: standard deviation

  if (gsnrightstring .eq. "") then
    gsnrightstring = "total #:"+tostring(total_count)
  end if

  xmin = min(levels)
  xmax = max(levels)

  ;*** check xdata and ydata ***
  ;i=0
  ;print("")
  ;print("data at index "+i)
  ;print("xdata= "+xdata+" , ydata= "+ydata(i,:))
  ;print("")
  

  ;*** check midpoints with corresponding ydata
  ;i=0
  ;print("")
  ;print("data at index "+i)
  ;print("mid point: "+midpoints+" , ydata: "+vars(i,:))
  ;print("")


;-------------------------------
; set Y-axis max and min values
;-------------------------------
  ymax = 0.
  ymin = 0.
  do i=0,nvars-1
    max1 = max(vars(i,:))
    if ( max1 .ge. 0) then
      ymax = ymax + max1
    end if

    min1 = min(vars(i,:))
    if ( min1 .lt. 0) then
      ymin = ymin + min1
    end if
  end do

  ;ymin = 
  ;ymax =

;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
  gsn_define_colormap(wks,colormap)
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res                          = True

  res@gsnDraw                  = False   ; Don't draw
  res@gsnFrame                 = False   ; Don't advance frame
;  res@gsnMaximize = True
;  res@vpXF = 0.1
;  res@vpYF = 0.9
;  res@vpWidthF                 = 0.8     ; Make long and
;  res@vpHeightF                = 0.8     ; narrow

;---Set axes limits. Add extra space for X max.
  res@trYMinF                  = ymin
  ;res@trYMaxF                  = 
  res@trYMaxF                  = ymax
  res@trXMinF                  = xmin
  res@trXMaxF                  = xmax
  res@gsnTickMarksPointOutward = True

;---Put city labels on X axis
  res@tmXBMode                 = "Explicit"
  res@tmXBValues               = levels ;ispan(1,nbars,1)
  xlabels = sprintf(xlabels_format,levels)
  res@tmXBLabels               = xlabels
;  res@tmXBLabelFontHeightF     = 0.01   ; make labels smaller
  res@tmXBMajorLengthF         = 0.01
  res@tmXTOn                   = False   ; Turn off top tickmarks

  res@tiXAxisString = ""
  res@tiYAxisString = ""
  res@gsnRightString = gsnrightstring

;---Create blank plot without Y grid lines

;******************
; plot coordinate
;******************
  plot_without_xgrid = gsn_csm_blank_plot(wks,res)

;***************
; plot bar 
;***************
  dums = new( (/nvars,nbars/) , "graphic")
  xcoord_std = new( (/nvars,nbars/) , float)
  ycoord_std = new( (/nvars,nbars/) , float)

  bres           = True
  bres@gsEdgesOn = True      ; Outline the polygons (bars)

  do i=0,nbars-1
    y1_pos = 0.   ; if y is positive
    y1_neg = 0.   ; if y is negative
    do j=0,nvars-1
      bres@gsFillColor           = bar_colors(j)
      xmid = midpoints(i)
      xint = interval*barsize
      xbar = (/xmid-xint,xmid-xint,xmid+xint,xmid+xint,xmid-xint/)

      xcoord_std(j,i) = xmid

      if (.not.ismissing(vars(j,i)) .and. vars(j,i) .ge. 0.) then
        y2_pos = y1_pos + vars(j,i)      
        ybar = (/y1_pos,y2_pos,y2_pos,y1_pos,y1_pos/)
        dums(j,i) = gsn_add_polygon(wks,plot_without_xgrid,xbar,ybar,bres)
        ycoord_std(j,i) = y1_pos + vars(j,i)/2.
        y1_pos = y2_pos
      else if (.not.ismissing(vars(j,i)) .and. vars(j,i) .lt. 0.) then
        y2_neg = y1_neg + vars(j,i)      
        ybar = (/y1_neg,y2_neg,y2_neg,y1_neg,y1_neg/)
        dums(j,i) = gsn_add_polygon(wks,plot_without_xgrid,xbar,ybar,bres)
        ycoord_std(j,i) = y1_neg + vars(j,i)/2.
        y1_neg = y2_neg
      end if
      end if

    end do
  end do

;*********************************
; plot standard deviation - polylines
;*********************************

  lines1_std = new( (/nvars,nbars/) , "graphic")
  lines2_std = new( (/nvars,nbars/) , "graphic")
  lines3_std = new( (/nvars,nbars/) , "graphic")
  makers_std = new( (/nvars,nbars/) , "graphic")
  texts_std = new( (/nvars,nbars/) , "graphic")
  texts_num = new( (/nbars/) , "graphic")

  mres = True
  mres@gsMarkerIndex = 1
 
  lres = True
  lres@gsLineThicknessF = 4.

  if (option_std) then
    do i=0,nbars-1
      do j=0,nvars-1
        x1 = xcoord_std(j,i)
        y1 = ycoord_std(j,i)
        if ( .not.ismissing(x1) .and. .not.ismissing(y1) ) then
          ;makers_std(j,i) = gsn_add_polymarker(wks, plot_without_xgrid, x1, y1, mres)
  
          ;*** plot standard deviation ***
          std1 = stds(j,i)
          x1_left   = x1 - interval*stdsize
          x1_right  = x1 + interval*stdsize
          y1_top    = y1 + std1     
          y1_bottom = y1 - std1     
          lres@gsLineColor = std_colors(j)
          if (std1 .ne. 0.) then
            lines1_std(j,i) = gsn_add_polyline(wks, plot_without_xgrid, (/x1_left,x1_right/) , (/y1_top,y1_top/), lres )
            lines2_std(j,i) = gsn_add_polyline(wks, plot_without_xgrid, (/x1_left,x1_right/) , (/y1_bottom,y1_bottom/), lres )
            lines3_std(j,i) = gsn_add_polyline(wks, plot_without_xgrid, (/x1,x1/) , (/y1_top,y1_bottom/), lres )
          end if
        end if
      end do
    end do
  
  end if ; end if of option_std

;******************************
; plot texts - average and standard deviation on each bar
;******************************

  tres = True
  tres@txFontHeightF = 0.01

  if (option_text_avgstd) then
    do i=0,nbars-1
      do j=0,nvars-1
        x1 = xcoord_std(j,i)
        y1 = ycoord_std(j,i)
        if ( .not.ismissing(x1) .and. .not.ismissing(y1) ) then
  
          ;*** plot text at bar ***
          text1 = sprintf("%4.2f",vars(j,i))  ; mean value
          text2 = sprintf("%4.2f",stds(j,i))  ; std
          ;textn = text1+"~C~("+text2+")"
          textn = text1+" ("+text2+")"
          ;if ( abs(vars(j,i)) .gt. 0.1 .or. stds(j,i) .gt. 0.1 ) then
            texts_std(j,i) = gsn_add_text(wks, plot_without_xgrid, textn, x1, y1, tres)
          ;end if
        end if
      end do
    end do
  end if ; end if of option_text_avgstd

;************************
; plot texts - count of each bin
;************************

  if (option_text_count) then
    do i=0,nbars-1
      xmid = midpoints(i)
      x1 = xmid
      y1 = ymin   
      text1 = tostring(nums(i))+"#"
      texts_num(i) = gsn_add_text(wks, plot_without_xgrid, text1, x1, y1, tres)
    end do
  end if

;*************
; plot lines
;*************

  ;*** plot y=0 line as a reference ***
  x1_left  = xmin
  x1_right = xmax
  y1_top    = 0.
  y1_bottom = 0.

  lres1 = True
  lines_id1 = gsn_add_polyline(wks, plot_without_xgrid, (/x1_left,x1_right/) , (/y1_top,y1_bottom/), lres1 )


;****************
; plot labelbar
;**************** 

nboxes =dimsizes(bar_colors)

  ;getvalues plot_with_xgrid                ; get plot size for use in creating labelbar
  getvalues plot_without_xgrid                ; get plot size for use in creating labelbar
  "vpXF"      : vpx
  "vpYF"      : vpy
  "vpHeightF" : vph
  "vpWidthF"  : vpw
  end getvalues

;  lbw    = 0.15 * vpw           ; Make labelbar size a fraction of the plot.
;  lbh    = 0.2 * vph

;  bar_colors1 = bar_colors(::-1)
;  dnames1 = dnames(::-1)

  lbres                    = True          ; labelbar only resources
  lbres@lbPerimOn          = False
  lbres@vpWidthF           = 0.25 * vpw     ; labelbar width
  lbres@vpHeightF          = 0.7 * vph     ; labelbar height
  lbres@lbBoxMajorExtentF  = 0.8          ; puts space between color boxes
  lbres@lbFillColors       = bar_colors ; labelbar bar_colors
;  lbres@lbFillColors       = bar_colors1 ; labelbar bar_colors
  lbres@lbMonoFillPattern  = True          ; Solid fill pattern
  lbres@lbLabelFontHeightF = 0.02          ; font height. default is small
  lbres@lbJustification    = "TopLeft"
;  lbres@lbLabelJust        = "CenterLeft"  ; left justify labels
   
  gsn_labelbar_ndc(wks,nboxes,dnames,0.8,0.8,lbres)
;  gsn_labelbar_ndc(wks,nboxes,dnames1,0.8,0.8,lbres)

;********
; frame
;********
  pres             = True
  pres@gsnMaximize = True
  maximize_output(wks,pres)

;------------------
; delete ydata_binx
;------------------
  delete(ydata_binx)
  delete(midpoints)
  delete(levels)
  delete(interval)
  delete(nbars)
  delete(nvars_all)
  delete(nvars)
  delete(vars)
  delete(stds)
  delete(nums)

  delete(dums)
  delete(xcoord_std)
  delete(ycoord_std)
  delete(lines1_std)
  delete(lines2_std)
  delete(lines3_std)
  delete(makers_std)
  delete(texts_std)
  delete(texts_num)

  delete(res)
  delete(bres)
  delete(mres)
  delete(tres)
  delete(lres)

  delete(xlabels)

EOF
#*** case: "barchart-stacked" end ***

#*** case: "pdf" start ***
elif [ $casename_work -a $casename_work == "pdf" ]; then
 
cat >> $ncl_name << EOF
;------------
; open file
;------------
  file_${suffix01} = addfile( "${file01}" , "r" )

  var_name = "${var01}"

  varvar = file_${suffix01}->\$var_name\$

  num_point = dimsizes(varvar)

  opt = True
  nbin = 11
  opt@bin_min  =  0. ; minimum value for the bin boundary.
  opt@bin_max  =  11. ; maximum value for the bin boundary.

;   opt@bin_nice =  ; "nice" bin boundary values and spacing will be calculated. If the user has specified nbin, it will be ignored and the calculated number of bins will be used.
  pdf_varvar = pdfx(varvar,nbin,opt)
;printVarSummary(pdf_varvar)

;  n=0
;  do i=0,num_point-1
   ;if (varvar(i).eq.0) then
;    if (varvar(i).eq.1) then
;      n=n+1
;    end if
;  end do
;print(n)

;  xx_num_${suffix01} = varvar@bin_total_number
;  xx_mid_${suffix01} = varvar&bin
;  xx_int_${suffix01} = varvar@bin_interface
;  yy_avg_${suffix01} = varvar(1,:)
;  yy_std_${suffix01} = varvar(2,:)
;  yy_pdf_${suffix01} = varvar@pdf

;*** input fields **
  xx_num_${suffix01} = pdf_varvar@nUse
  xx_mid_${suffix01} = pdf_varvar@bin_center
  xx_int_${suffix01} = pdf_varvar@bin_bounds
  yy_pdf_${suffix01} = pdf_varvar

;print(xx_int_${suffix01})
;print(xx_mid_${suffix01})
;print(xx_int_${suffix01})
;print(yy_avg_${suffix01})
;print(yy_std_${suffix01})
;print(yy_pdf_${suffix01})
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** shared res ***
  res@gsnFrame = False

  res@trXMinF = 0.5 ;min(xx_int_${suffix01}) 
  res@trXMaxF = max(xx_int_${suffix01})

  res@tmXBMode = "Explicit"
  ;res@tmXBValues = toint(xx_int_${suffix01})
  ;res@tmXBLabels = tostring(res@tmXBValues)
  res@tmXBValues = tofloat(xx_mid_${suffix01})
  res@tmXBLabels = tostring(toint(xx_int_${suffix01}))
;print(xx_mid_${suffix01})

;  res@tmXBLabels = tostring(res@tmXBValues)

  ;res@tmXBMinorValues = xx_mid_${suffix01}
;  res@tmXBLabelStride = 2

;*** left plot res ***
  res@gsnMaximize = True

;  res@trYMinF = 0. 
;  res@trYMaxF = 5.

  res@xyMarkLineMode  = "MarkLines" 
  res@xyMonoMarker = True
  res@xyMarker = 16

  res@xyLineThicknessF = 2.

  res@tiMainString = ""
  res@tiXAxisString = ""
  res@tiYAxisString = ""
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
  res@gsnRightString = (tostring(xx_num_${suffix01}) + "#")
;
;-------
; plot
;-------

  plot = gsn_csm_xy(wks,xx_mid_${suffix01},yy_pdf_${suffix01},res)


frame(wks)


EOF

#*** case: "pdf" end ***

#*** case: "cloudsat-cldlayer-series" start ***
elif [ $casename_work -a $casename_work == "cloudsat-cldlayer-series" ]; then
 
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_path = ""
  file_name = "$file01"
  infile = file_path+file_name
  file_${suffix01} = addfile( iinfile , "r" )

  time_all = (/0,1,2/)
  num_time = dimsizes(time_all)

do t=0,num_time-1

  time0 = time_all(t)

  lat     = file_${suffix01}->latitude(time0)
  lon     = file_${suffix01}->longitude(time0)    ; (nray_2B_CLDCLASS_LIDAR) => (37082)
  time    = file_${suffix01}->Profile_time_2B_CLDCLASS_LIDAR(time0) ; (nray_2B_CLDCLASS_LIDAR) => (37082)
  cldlay  = file_${suffix01}->Cloudlayer_2B_CLDCLASS_LIDAR(time0)
  cldtype = file_${suffix01}->CloudLayerType_2B_CLDCLASS_LIDAR(time0,:)

  laybase = file_${suffix01}->CloudLayerBase_2B_CLDCLASS_LIDAR(time0,:)
  laytop  = file_${suffix01}->CloudLayerTop_2B_CLDCLASS_LIDAR(time0,:)
  cldf    = file_${suffix01}->CloudFraction_2B_CLDCLASS_LIDAR(time0,:)

  num_cldlay = toint(cldlay)
  dnames = (/"Ci","As","Ac","St","Sc","Cu","Cb","Ns"/)
  colors = (/9,20,14,3,19,2,8,10/)

print(cldlay)
print(cldtype)
print(cldf)
print(laybase)
print(laytop)
print(time)

  cldlay_all  = file_${suffix01}->Cloudlayer_2B_CLDCLASS_LIDAR(:)
  cldf_all    = file_${suffix01}->CloudFraction_2B_CLDCLASS_LIDAR(:,:)
  num_point = dimsizes(cldlay_all)

;  do i=0,num_point-1
;    do k=0,9
;      if (.not.ismissing(cldf_all(i,k))) then
;        if (cldf_all(i,k).gt.0. .and. cldf_all(i,k).lt.1.) then
;          print(i+" , "+cldf_all(i,k))
;        end if
;      end if
;    end do
 ; end do

;  do i=0,num_point-1
  ;if (cldlay_all(i).eq.0) then
    ;if (cldlay_all(i).eq.8) then
;    if (cldlay_all(i).eq.9) then
    ;if (cldlay_all(i).eq.3) then
;      print(i+" , "+cldlay_all(i))
;    end if
;  end do


;-------------------
; set work station
;-------------------
;  wks_name = "fig-profile_cldlay-"+time0

  wks = gsn_open_wks(wks_type,wks_name)
;
  gsn_define_colormap(wks,"default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res                          = True

  res@gsnDraw                  = False   ; Don't draw
  res@gsnFrame                 = False   ; Don't advance frame
;  res@gsnMaximize = True
;  res@vpXF = 0.1
;  res@vpYF = 0.9
;  res@vpWidthF                 = 0.8     ; Make long and
;  res@vpHeightF                = 0.8     ; narrow

;---Set axes limits. Add extra space for X max.
  res@trYMinF                  = 0.0
  res@trYMaxF                  = 30. ;y_max
  res@trXMinF                  = 0.
  res@trXMaxF                  = 1.
  res@gsnTickMarksPointOutward = True

;---Put city labels on X axis
;  res@tmXBMode                 = "Explicit"
;  res@tmXBValues               = ispan(1,nbars,1)
;  res@tmXBLabels               = tostring(res@tmXBValues)
;  res@tmXBLabelFontHeightF     = 0.01   ; make labels smaller
  res@tmXBMajorLengthF         = 0.01
  res@tmXTOn                   = False   ; Turn off top tickmarks

  res@tiMainString = file_name
  res@tiXAxisString = "Cloud Fraction (0-1)"
  res@tiYAxisString = "Altitude (km)"
  res@gsnLeftString = "time index="+time0+", "+time+"s"
  res@gsnRightString = "lon="+sprintf("%5.2f",lon)+", lat="+sprintf("%5.2f",lat)

;---Create blank plot without Y grid lines
;******************
; plot coordinate
;******************
  plot_without_xgrid = gsn_csm_blank_plot(wks,res)

;***************
; plot polygon
;***************
  layers = new( num_cldlay , "graphic")

  bres           = True
  bres@gsEdgesOn = False      ; Outline the polygons (bars)

  do i=0,num_cldlay-1
    type1 = toint(cldtype(i))
    bres@gsFillColor = colors(type1-1)
    x1 = 0.
    x2 = cldf(i)
    y1 = laybase(i)
    y2 = laytop(i)

    xbar = (/x1,x1,x2,x2,x1/)
    ybar = (/y1,y2,y2,y1,y1/)
    layers(i) = gsn_add_polygon(wks,plot_without_xgrid,xbar,ybar,bres)
  end do

;****************
; plot labelbar
;**************** 

nboxes =dimsizes(colors)

  ;getvalues plot_with_xgrid                ; get plot size for use in creating labelbar
  getvalues plot_without_xgrid                ; get plot size for use in creating labelbar
  "vpXF"      : vpx
  "vpYF"      : vpy
  "vpHeightF" : vph
  "vpWidthF"  : vpw
  end getvalues

;  lbw    = 0.15 * vpw           ; Make labelbar size a fraction of the plot.
;  lbh    = 0.2 * vph

  colors1 = colors(::-1) 
  dnames1 = dnames(::-1)

  lbres                    = True          ; labelbar only resources
  lbres@lbPerimOn          = False
  lbres@vpWidthF           = 0.25 * vpw     ; labelbar width
  lbres@vpHeightF          = 0.7 * vph     ; labelbar height
  lbres@lbBoxMajorExtentF  = 0.8          ; puts space between color boxes
  lbres@lbFillColors       = colors1 ; labelbar colors
  lbres@lbMonoFillPattern  = True          ; Solid fill pattern
  lbres@lbLabelFontHeightF = 0.02          ; font height. default is small
  lbres@lbJustification    = "TopLeft"
;  lbres@lbLabelJust        = "CenterLeft"  ; left justify labels
   
  gsn_labelbar_ndc(wks,nboxes,dnames1,0.8,0.8,lbres)

;********
; frame
;********
  pres             = True
  pres@gsnMaximize = True
  maximize_output(wks,pres)

  delete(layers)

end do ; end loop of time


EOF
#*** case: "cloudsat-cldlayer-series" end ***
 
#*** case: "contour-2xy" start ***
elif [ $casename_work -a $casename_work == "contour-2xy" ]; then
cat >> $ncl_name << EOF
;-----------------------------
; open files & read varibles
;-----------------------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  varvar_${suffix01} = file_${suffix01}->${var01}

;*** contour data ***
  cndata = varvar_${suffix01}

;*** xy plot 1 - x_avg.vs.y *** 
; y-axis data  
  dim0  = cndata!0
  y1data = cndata&$dim0$

; x-axis data
  x1 = dim_avg_n_Wrap(cndata,1)
  x1data = (/x1/)

;*** xy plot 2 - x .vs.y_avg *** 
; y-axis data  
  dim1  = cndata!1
  x2data = cndata&$dim1$

; x-axis data
  y2 = dim_avg_n_Wrap(cndata,0)
  y2data = (/y2/)

;printVarSummary(varvar_${suffix01})
;print(x2data)
;print(y2data)
;print(x1data)
;print(y1data)

;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")

;drawNDCGrid(wks)


;***********
; share res
;***********
  res = True
  res@gsnFrame = False
  res@trYReverse = True

;**************
; contour res
;**************

  cnres = res
  cnres@vpHeightF = 0.5
  cnres@vpWidthF = 0.6
  cnres@vpXF = 0.25
  cnres@vpYF = 0.8
;  cnres@trYReverse = True
;  cnres@gsnYAxisIrregular2Linear = True

  cnres@lbOrientation = "Vertical"
  cnres@tiYAxisString = ""
  cnres@tmYLLabelsOn = False
  ;cnres@tmXBLabelsOn = False
  ;cnres@cnLinesOn = False

;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)

;*** adjust contour fill ***
  cnres@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False

;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =


;**********
; xy1 res
;**********
  xy1res = res
  xy1res@vpWidthF = 0.1
  xy1res@vpXF = 0.1
  xy1res@tmXTOn = False
  xy1res@tmYROn = False
  xy1res@tmLabelAutoStride = True

;*** adjust xy dash pattern ***
;  xy1res@xyMonoDashPattern = False
;  xy1res@xyDashPattern = 1
;  xy1res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  xy1res@xyMonoLineColor = False
;  xy1res@xyLineColors = (/1,3,3,14,14/)
;  xy1res@xyLineColor = 10

;*** adjust string ***
;  xy1res@tiMainString =
;  xy1res@tiXAxisString = 
;  xy1res@tiYAxisString = 
  xy1res@tiYAxisString = dim0
;  xy1res@gsnLeftString =
;  xy1res@gsnLeftStringFontHeightF =
;  xy1res@gsnCenterString =
;  xy1res@gsnRightString =

;**********
; xy1 res
;**********
  xy2res = res

  xy2res@vpHeightF = 0.15
  xy2res@vpYF = 0.28

  xy2res@tmXTOn = False
  xy2res@tmYLOn = False
  xy2res@tmYRLabelsOn = True

  xy2res@trXMinF = min(x2data)
  xy2res@trXMaxF = max(x2data)

;*** adjust xy dash pattern ***
;  xy1res@xyMonoDashPattern = False
;  xy1res@xyDashPattern = 1
;  xy1res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  xy1res@xyMonoLineColor = False
;  xy1res@xyLineColors = (/1,3,3,14,14/)
;  xy1res@xyLineColor = 10

;*** adjust string ***
;  xy1res@tiMainString =
;  xy1res@tiXAxisString = 
;  xy1res@tiYAxisString = 
  xy2res@tiXAxisString = dim1
;  xy1res@gsnLeftString =
;  xy1res@gsnLeftStringFontHeightF =
;  xy1res@gsnCenterString =
;  xy1res@gsnRightString =


;------
; plot
;------

; plot contour 
  plot = gsn_csm_contour(wks,cndata,cnres) 

; get height,width NDC coordinate
  getvalues plot
    "vpHeightF" : cn_height
    "vpWidthF"  : cn_width
    "vpXF"      : cn_xf
    "vpYF"      : cn_yf
  end getvalues

; plot xy  
  xy1res@vpHeightF = cn_height
  xy1res@vpYF = cn_yf
  plot = gsn_csm_xy(wks,x1data,y1data,xy1res)

  xy2res@vpWidthF = cn_width
  xy2res@vpXF = cn_xf
  plot = gsn_csm_xy(wks,x2data,y2data,xy2res)

; plot text
  tires = True
  tires@txFontHeightF = 0.015

  tires@txFontColor = 15
  gsn_text_ndc(wks,"x1 ",0.15,0.77,tires)

;  tires = True
;  tires@txFontColor = 1
;  gsn_text_ndc(wks,"x2",0.15,0.74,tires)

  frame(wks)


EOF
#*** case: "contour-2xy" end ***
 
#*** case: "cesm-prec_monthly_contour-2sets" start ***
elif [ $casename_work -a $casename_work == "cesm-prec_monthly_contour-2sets" ]; then

num22=$(($num_files/2))
num21=$(($num22-1))
num23=$(($num_files-1))

cat >> $ncl_name << EOF
;-------------
; open files
;-------------
EOF

# write file names of set 1
cat >> $ncl_name << EOF

  infilenames_${suffix01} = (/  \\
EOF

  for (( j=0; j<$num22; j=j+1 ))
  do
     if [ $j -eq $num21 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write file names of set 2
cat >> $ncl_name << EOF

  infilenames_${suffix02} = (/  \\
EOF

  for (( j=$num22; j<$num_files; j=j+1 ))
  do
     if [ $j -eq $num23 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write NCL codes
cat >> $ncl_name << EOF

  month = (/"Jan","Feb","Mar","Apr","May","Jun" , \\
            "Jul","Aug","Sep","Oct","Nov","Dec"/)

; ${suffix01} experiment
  file_${suffix01} = addfiles( infilenames_${suffix01} , "r" )

  precc1_${suffix01} = file_${suffix01}[:]->PRECC
  prect1_${suffix01} = file_${suffix01}[:]->PRECT

  precc_${suffix01} = multiply(precc1_${suffix01}, 86400.*1000.)
  precc_${suffix01}@units = "mm/day"

  prect_${suffix01} = multiply(prect1_${suffix01}, 86400.*1000.)
  prect_${suffix01}@units = "mm/day"

; ${suffix02} experiment
  file_${suffix02} = addfiles( infilenames_${suffix02} , "r" )

  precc1_${suffix02} = file_${suffix02}[:]->PRECC
  prect1_${suffix02} = file_${suffix02}[:]->PRECT

  precc_${suffix02} = multiply(precc1_${suffix02}, 86400.*1000.)
  precc_${suffix02}@units = "mm/day"

  prect_${suffix02} = multiply(prect1_${suffix02}, 86400.*1000.)
  prect_${suffix02}@units = "mm/day"

; plot array
  cndata_${suffix01} = prect_${suffix01}
  cndata_${suffix02} = prect_${suffix02}

  cndata_diff = diff(cndata_${suffix01}, cndata_${suffix02})

;print()
;printVarSummary(precc)

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-prect_monthly_global-"

  wks_${suffix02} = gsn_open_wks(wks_type,wks_name+"${suffix02}")
  wks_${suffix01} = gsn_open_wks(wks_type,wks_name+"${suffix01}")
  wks_diff = gsn_open_wks(wks_type,wks_name+"diff_${suffix01}_${suffix02}")
;
;  gsn_define_colormap(wks,"precip2_17lev")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  res_prec = res
  res_prec@cnLevelSelectionMode = "ManualLevels"
  res_prec@cnMinLevelValF = 1. 
  res_prec@cnMaxLevelValF = 17.
  res_prec@cnLevelSpacingF = 1.
  res_prec@cnFillPalette = "precip2_17lev"

  res_diff = res
  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -3. 
  res_diff@cnMaxLevelValF = 3.
  res_diff@cnLevelSpacingF = 0.5
  res_diff@cnFillPalette = "precip_diff_12lev"

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;  res@mpMaxLonF =
;  res@mpMinLonF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)

  plots_${suffix02} = new(12,"graphic")
  plots_${suffix01} = new(12,"graphic")
  plots_diff = new(12,"graphic")

  do t=0,11
    res_prec@tiMainString = month(t)
    res_diff@tiMainString = month(t)
    plots_${suffix02}(t) = gsn_csm_contour_map(wks_${suffix02},cndata_${suffix02}(t,:,:),res_prec)
    plots_${suffix01}(t) = gsn_csm_contour_map(wks_${suffix01},cndata_${suffix01}(t,:,:),res_prec)
    plots_diff(t) = gsn_csm_contour_map(wks_diff,cndata_diff(t,:,:),res_diff)
  end do

;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
;plot = gsn_csm_pres_hgt(wks,cndata,res)
;plot = ignorant_contour(wks,cndata,res)

;
  resp = True 

  row1    = 4  ; row number of panel plot
  column1 = 3  ; column number of panel plot

  start1  = 0  ; start index of plots
  end1    = 11 ; end index of plots 
  stride1 = 1  ; stride of plots

  resp@txString = "$suffix01"
  gsn_panel(wks_${suffix01},plots_${suffix01}(start1:end1:stride1),(/row1,column1/),resp)

  resp@txString = "$suffix02"
  gsn_panel(wks_${suffix02},plots_${suffix02}(start1:end1:stride1),(/row1,column1/),resp)

  resp@txString = "$suffix01 minus $suffix02"
  gsn_panel(wks_diff,plots_diff(start1:end1:stride1),(/row1,column1/),resp)

;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)


EOF
#*** case: "cesm-prec_monthly_contour-2sets" end ***

#*** case: "cesm-wind_prec_monthly-2sets" start ***
elif [ $casename_work -a $casename_work == "cesm-wind_prec_monthly-2sets" ]; then
num22=$(($num_files/2))
num21=$(($num22-1))
num23=$(($num_files-1))

cat >> $ncl_name << EOF
;-------------
; open files
;-------------
EOF

# write file names of set 1
cat >> $ncl_name << EOF

  infilenames_${suffix01} = (/  \\
EOF

  for (( j=0; j<$num22; j=j+1 ))
  do
     if [ $j -eq $num21 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write file names of set 2
cat >> $ncl_name << EOF

  infilenames_${suffix02} = (/  \\
EOF

  for (( j=$num22; j<$num_files; j=j+1 ))
  do
     if [ $j -eq $num23 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

cat >> $ncl_name << EOF

  num_files = dimsizes(infilenames_${suffix02})

  month = (/"Jan","Feb","Mar","Apr","May","Jun" , \\
            "Jul","Aug","Sep","Oct","Nov","Dec"/)

; read precipitation from $suffix01
  file_${suffix01} = addfiles( infilenames_${suffix01} , "r" )

  precc1_${suffix01} = file_${suffix01}[:]->PRECC
  precc1_${suffix01} = file_${suffix01}[:]->PRECC

  precc_${suffix01} = multiply(precc1_${suffix01}, 86400.*1000.)
  precc_${suffix01}@units = "mm/day"

  precc_${suffix01} = multiply(precc1_${suffix01}, 86400.*1000.)
  precc_${suffix01}@units = "mm/day"

; read precipitation from $suffix02
  file_${suffix02} = addfiles( infilenames_${suffix02} , "r" )

  precc1_${suffix02} = file_${suffix02}[:]->PRECC
  precc1_${suffix02} = file_${suffix02}[:]->PRECC

  precc_${suffix02} = multiply(precc1_${suffix02}, 86400.*1000.)
  precc_${suffix02}@units = "mm/day"

  precc_${suffix02} = multiply(precc1_${suffix02}, 86400.*1000.)
  precc_${suffix02}@units = "mm/day"

; read wind field from $suffix01 ans $suffix02
  file_temp1 = addfile( infilenames_${suffix01}(0) , "r" )
  file_temp2 = addfile( infilenames_${suffix02}(0) , "r" )

  u0_${suffix01}   = file_${suffix01}[:]->U
  v0_${suffix01}   = file_${suffix01}[:]->V
  u0_${suffix02}   = file_${suffix02}[:]->U
  v0_${suffix02}   = file_${suffix02}[:]->V

  hyai_${suffix01} = file_temp2->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_temp2->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_temp2->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_temp2->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}[:]->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_temp2->P0        ; reference pressure in Pa

  hyai_${suffix02} = file_temp1->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_temp1->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_temp1->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_temp1->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}[:]->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_temp1->P0        ; reference pressure in Pa

; interpolate wind fields to specific pressure level
  plev = (/850./)
  ;plev = (/200./)

  u_${suffix01} = vinth2p(u0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
  v_${suffix01} = vinth2p(v0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)

  u_${suffix02} = vinth2p(u0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)
  v_${suffix02} = vinth2p(v0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)

  u_${suffix01}_plev = u_${suffix01}(:,0,:,:)
  v_${suffix01}_plev = v_${suffix01}(:,0,:,:)
  u_${suffix02}_plev = u_${suffix02}(:,0,:,:)
  v_${suffix02}_plev = v_${suffix02}(:,0,:,:)

  v_plev_diff = diff(v_${suffix01}_plev, v_${suffix02}_plev)
  u_plev_diff = diff(u_${suffix01}_plev, u_${suffix02}_plev)

; set plot array
  vcdata_x_${suffix01} = u_${suffix01}_plev
  vcdata_y_${suffix01} = v_${suffix01}_plev
  vcdata_x_${suffix02} = u_${suffix02}_plev
  vcdata_y_${suffix02} = v_${suffix02}_plev
  vcdata_x_diff = u_plev_diff
  vcdata_y_diff = v_plev_diff

  cndata_${suffix01} = precc_${suffix01}
  cndata_${suffix02} = precc_${suffix02}
  cndata_diff = diff(cndata_${suffix01}, cndata_${suffix02})

;print()
;printVarSummary(u_${suffix02})

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-precc_monthly_global-"
  ;wks_name = "fig-wind_precc_monthly-temp-"

  wks_${suffix02} = gsn_open_wks(wks_type,wks_name+"${suffix02}")
  wks_${suffix01} = gsn_open_wks(wks_type,wks_name+"${suffix01}")
  wks_diff = gsn_open_wks(wks_type,wks_name+"diff_${suffix01}_${suffix02}")
;
;  gsn_define_colormap(wks,"precip2_17lev")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------

  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnScalarContour = True  ; turn on vector/scalar plot

  res@cnFillOn = True
  res@cnLineLabelsOn = False
  res@cnLinesOn = False

;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.

  res@mpFillOn = False
  res@mpOutlineOn = True

  res_prec = res
  res_prec@cnLevelSelectionMode = "ManualLevels"
  res_prec@cnMinLevelValF = 1.
  res_prec@cnMaxLevelValF = 17.
  res_prec@cnLevelSpacingF = 1.
  res_prec@cnFillPalette = "precip2_17lev"

  res_prec@vcRefMagnitudeF           = 4.0             ; define vector ref mag
  res_prec@vcRefLengthF              = 0.045           ; define length of vec ref
  res_prec@vcRefAnnoOrthogonalPosF   = -1.0            ; move ref vector
  res_prec@vcRefAnnoArrowLineColor   = "black"         ; change ref vector color
  res_prec@vcRefAnnoArrowUseVecColor = False           ; don't use vec color for ref
  res_prec@vcVectorDrawOrder       = "PostDraw"        ; draw vectors last

  res_diff = res
  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -3.
  res_diff@cnMaxLevelValF = 3.
  res_diff@cnLevelSpacingF = 0.5
  res_diff@cnFillPalette = "precip_diff_12lev"

  res_diff@vcRefMagnitudeF           = 1.0             ; define vector ref mag
  res_diff@vcRefLengthF              = 0.045           ; define length of vec ref

;  res_prec@vcGlyphStyle = "WindBarb"

;-------
; plot
;-------

  plots_${suffix02} = new(num_files,"graphic")
  plots_${suffix01} = new(num_files,"graphic")
  plots_diff = new(num_files,"graphic")

  ss =  4
  do t=0,num_files-1
    res_prec@tiMainString = month(t)
    res_diff@tiMainString = month(t)
    plots_${suffix02}(t) = gsn_csm_vector_scalar_map(wks_${suffix02},vcdata_x_${suffix02}(t,::ss,::ss),vcdata_y_${suffix02}(t,::ss,::ss),cndata_${suffix02}(t,:,:),res_prec)
    plots_${suffix01}(t) = gsn_csm_vector_scalar_map(wks_${suffix01},vcdata_x_${suffix01}(t,::ss,::ss),vcdata_y_${suffix01}(t,::ss,::ss),cndata_${suffix01}(t,:,:),res_prec)
    plots_diff(t) = gsn_csm_vector_scalar_map(wks_diff,vcdata_x_diff(t,::ss,::ss),vcdata_y_diff(t,::ss,::ss),cndata_diff(t,:,:),res_diff)
  end do
;
  resp = True

  row1    = 4  ; row number of panel plot
  column1 = 3  ; column number of panel plot

  start1  = 0  ; start index of plots
  end1    = 11 ; end index of plots 
  stride1 = 1  ; stride of plots

  resp@txString = "$suffix01 at "+tostring(plev)+" hPa"
  gsn_panel(wks_${suffix01},plots_${suffix01}(start1:end1:stride1),(/row1,column1/),resp)

  resp@txString = "$suffix02 at "+tostring(plev)+" hPa"
  gsn_panel(wks_${suffix02},plots_${suffix02}(start1:end1:stride1),(/row1,column1/),resp)

  resp@txString = "$suffix01 minus $suffix02 at "+tostring(plev)+" hPa"
  gsn_panel(wks_diff,plots_diff(start1:end1:stride1),(/row1,column1/),resp)

;  resp@txString = "$suffix01 at "+tostring(plev)+" hPa"
;  gsn_panel(wks_${suffix01},plots_${suffix01},(/4,3/),resp)

;  resp@txString = "$suffix02 at "+tostring(plev)+" hPa"
;  gsn_panel(wks_${suffix02},plots_${suffix02},(/4,3/),resp)

 ; resp@txString = "$suffix01 minus $suffix02 at "+tostring(plev)+" hPa"
 ; gsn_panel(wks_diff,plots_diff,(/4,3/),resp)

;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)


EOF
#*** case: "cesm-wind_prec_monthly-2sets" end ***
 
#*** case: "binmap-overlay" start ***
elif [ $casename_work -a $casename_work == "binmap-overlay" ]; then
cat >> $ncl_name << EOF
;------------
; open file
;------------
  file_${suffix01} = addfile( "${file01}" , "r" )
  ;file_${suffix02} = addfile( "${file02}" , "r" )

  varvar_name = "${var01}"
  varvar1 = file_${suffix01}->\$varvar_name\$

  varvar_name = "${var02}"
  varvar2 = file_${suffix01}->\$varvar_name\$

;*** output from function binmap ***
  xx_num_${suffix01} = varvar1@bin_total_number
  xx_mid_${suffix01} = varvar1&bin
  xx_int_${suffix01} = varvar1@bin_interface
  yy_num_${suffix01} = varvar1(0,:)
  yy_avg_${suffix01} = varvar1(1,:)
  yy_std_${suffix01} = varvar1(2,:)
  yy_pdf_${suffix01} = varvar1@pdf

  xx_num_${suffix02} = varvar2@bin_total_number
  xx_mid_${suffix02} = varvar2&bin
  xx_int_${suffix02} = varvar2@bin_interface
  yy_num_${suffix02} = varvar2(0,:)
  yy_avg_${suffix02} = varvar2(1,:)
  yy_std_${suffix02} = varvar2(2,:)
  yy_pdf_${suffix02} = varvar2@pdf

;*** set line color ***
  color_${suffix01} = 2
  color_${suffix02} = 1

;
;-------------------
; set work station
;-------------------
  ;wks = gsn_open_wks(wks_type,"fig-${suffix01}_${suffix02}")
  wks = gsn_open_wks(wks_type,wks_name)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** shared res ***
  res@gsnFrame = False

  res@trXMinF = min(xx_int_${suffix01}) 
  res@trXMaxF = max(xx_int_${suffix01})

  res@tmXBMode = "Explicit"
  res@tmXBValues = xx_int_${suffix01}
  res@tmXBLabels = flt2string(res@tmXBValues)
  ;res@tmXBMinorValues = xx_mid_${suffix01}
  res@tmXBLabelStride = 2 

;  res@trXMinF = 0.
;  res@trXMaxF = 0.
 
  ;res@tmXBOn = True
  ;res@tmXMajorGrid = True

;*** left plot res ***
  res1 = res
  res1@gsnMaximize = True

  res1@trYMinF = min(yy_avg_${suffix01})
  res1@trYMaxF = max(yy_avg_${suffix01})

  res1@xyMarkLineMode  = "Markers" 
  res1@xyMonoMarker = True
  res1@xyMarker = 16

  res1@tiMainString = ""
  res1@tiXAxisString = ""
  res1@tiYAxisString = ""
;  res1@gsnLeftString =
;  res1@gsnLeftStringFontHeightF =
;  res1@gsnCenterString =
;  res1@gsnRightString =
;  res1@gsnRightString = (tostring(xx_num_${suffix01}) + "#")

;*** right plot res ***
  res2 = res
;  res2@xyYStyle = "log"

  res2@tmYLOn = False
  res2@tmYLLabelsOn = False
  res@tmYROn = True
  res2@tmYRLabelsOn = True

  res2@xyMonoLineColor = True
  res2@xyLineColor = 2

  res2@tiYAxisString = "Probability Density Function"
  ;res2@tiYAxisFontColor = res2@xyLineColor
  ;res2@tmYRLabelFontColor = res2@xyLineColor

  res2@trYMaxF = max(yy_pdf_${suffix01})
;
;-------
; plot
;-------

  ;res1@tiMainString = ""
  ;res1@gsnRightString = ""

;*** plot ***
  res1@gsnRightString = ("$suffix01: "+tostring(xx_num_${suffix01}) + "#")
  res1@gsnRightStringFontColor = color_${suffix01} 

  res1@xyMarkerColor = res1@gsnRightStringFontColor
  res2@xyLineColor = res1@gsnRightStringFontColor
  plot = gsn_csm_xy2(wks,xx_mid_${suffix01},yy_avg_${suffix01},yy_pdf_${suffix01},res1,res2)

;*** plot ***
  res1@gsnCenterString = ("$suffix02: "+tostring(xx_num_${suffix02}) + "#")
  res1@gsnCenterStringFontColor = color_${suffix02}

  res1@xyMarkerColor = res1@gsnCenterStringFontColor
  res2@xyLineColor = res1@gsnCenterStringFontColor
  plot = gsn_csm_xy2(wks,xx_mid_${suffix02},yy_avg_${suffix02},yy_pdf_${suffix02},res1,res2)

;----------------------------
; draw a line between yy_avg
;----------------------------

  lres = True

  num11 = dimsizes(yy_avg_${suffix01})
  do i=0,num11-1
    xx11 = xx_mid_${suffix01}(i)   

    if (ismissing(yy_avg_${suffix01}(i))) then
      yy11 = 0.
      yy22 = 0.
    else
      yy11 = yy_avg_${suffix01}(i)
      yy22 = yy_avg_${suffix02}(i)
    end if

    gsn_polyline(wks,plot,(/xx11,xx11/),(/yy11,yy22/),lres)    
  end do

;---------------------------
; draw standart deviation
;---------------------------
  lres = True
  lres@gsLineThicknessF = 2.

;*** draw ${suffix01} standard deviation ***
  num11 = dimsizes(yy_avg_${suffix01})
  xx_delta = tofloat(abs(xx_int_${suffix01}(1)-xx_int_${suffix01}(0))/4.)

  do i=0,num11-1
    xx11 = xx_mid_${suffix01}(i)   
    if (ismissing(yy_std_${suffix01}(i)) .or. yy_std_${suffix01}(i) .eq. 0.)
      xx22 = 0.
      xx33 = 0.
    else
      xx22 = xx11 - xx_delta
      xx33 = xx11 + xx_delta
    end if

    if (ismissing(yy_avg_${suffix01}(i))) then
      yy11 = 0.
      yy22 = 0.
    else
      yy_delta = yy_std_${suffix01}(i)
      yy11 = yy_avg_${suffix01}(i) + yy_delta
      yy22 = yy_avg_${suffix01}(i) - yy_delta
    end if 

    lres@gsLineColor = color_${suffix01}
    gsn_polyline(wks,plot,(/xx11,xx11/),(/yy11,yy22/),lres)    
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy11,yy11/),lres)    
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy22,yy22/),lres)    
  end do

;*** draw ${suffix02} standard deviation ***
  num11 = dimsizes(yy_avg_${suffix02})
  xx_delta = tofloat(abs(xx_int_${suffix02}(1)-xx_int_${suffix02}(0))/4.)

  do i=0,num11-1
    xx11 = xx_mid_${suffix02}(i)   
    if (ismissing(yy_std_${suffix02}(i)) .or. yy_std_${suffix02}(i) .eq. 0.)
      xx22 = 0.
      xx33 = 0.
    else
      xx22 = xx11 - xx_delta
      xx33 = xx11 + xx_delta
    end if

    if (ismissing(yy_avg_${suffix02}(i))) then
      yy11 = 0.
      yy22 = 0.
    else
      yy_delta = yy_std_${suffix02}(i)
      yy11 = yy_avg_${suffix02}(i) + yy_delta
      yy22 = yy_avg_${suffix02}(i) - yy_delta
    end if 

    lres@gsLineColor = color_${suffix02}
    gsn_polyline(wks,plot,(/xx11,xx11/),(/yy11,yy22/),lres)    
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy11,yy11/),lres)    
    gsn_polyline(wks,plot,(/xx22,xx33/),(/yy22,yy22/),lres)    
  end do

frame(wks)


EOF
#*** case: "binmap-overlay" end ***

#*** case: "nc-replace-values" start ***
elif [ $casename_work -a $casename_work == "nc-replace-values" ]; then

# write read files 
cat >> $ncl_name << EOF


  infilenames = (/  \\
EOF

  for (( j=0; j<$num_files; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done


cat >> $ncl_name << EOF
;-------------
; open files
;-------------

; reference file
  file_ocnland = addfile( "" , "r" )
  ocnfrac   = file_ocnland->OCNFRAC
  lndfrac   = file_ocnland->LANDFRAC

;printVarSummary(lndfrac)

; Sahara 16W-33E, 14N-36N
; Sahel  20W-40E, 10N-20N ; Held paper

; lat/lon of area want to change
  lonmin_sahel  = -20.
  lonmax_sahel  = 40.
  latmin_sahel  = 10.
  latmax_sahel  = 20.

  lonmin_sahara = -16.
  lonmax_sahara = 33.
  latmin_sahara = 20. 
  latmax_sahara = 36.

  lonmin_middle = -20.
  lonmax_middle = 50.
  latmin_middle = -10.
  latmax_middle = 10.

  lonmin_bottom = 10.
  lonmax_bottom = 40.
  latmin_bottom = -40.
  latmax_bottom = -10.

;----------------
; program start
;----------------
  num_files = dimsizes(infilenames)

do ff=0,num_files-1
;do ff=0,0 ;num_files-1

  file_inout = addfile( infilenames(ff) , "w" )

  varnames = getfilevarnames(file_inout)
  n_vars = dimsizes(varnames)

  lat2 = file_inout->lat
  lon1 = file_inout->lon

;print(lat2)

  ii = dimsizes(lon1)
  jj = dimsizes(lat2)

  lon2 = lon1
  do i=0,ii-1
    if (lon1(i) .ge. 180.) then
      lon2(i) = lon1(i) - 360.
    else
      lon2(i) = lon1(i)
    end if
  end do

  do v=0,n_vars-1
  ;do v=0,0
    ;tt0 = file_inout->PRECC
    ;tt1 = file_inout->PRECC
    tt1 = file_inout->\$varnames(v)\$

    if (isfloat(tt1)) then
      tt1@_FillValue = -999.99
    end if
    if ( isdim(tt1,"lon") ) then
      tt1&lon = lon2
    end if

    dim1 = dimsizes(getvardims(tt1))

    do i=0,ii-1
      do j=0,jj-1
        lat0 = lat2(j)
        lon0 = lon2(i)
        if (lon0 .ge. 180.) then
          lon0 = lon0 - 360.
        end if

        if (lndfrac(0,j,i) .ge. 0.5) then

          ; Sahara
          if ( lat0 .ge. latmin_sahara .and. lat0 .lt. latmax_sahara .and. \\
               lon0 .ge. lonmin_sahara .and. lon0 .lt. lonmax_sahara ) then
            aaa=0.

          ; Sahel
          else if ( lat0 .ge. latmin_sahel .and. lat0 .lt. latmax_sahel .and. \\
               lon0 .ge. lonmin_sahel .and. lon0 .lt. lonmax_sahel ) then
            aaa=0.

          ; middle
          else if ( lat0 .ge. latmin_middle .and. lat0 .lt. latmax_middle .and. \\
               lon0 .ge. lonmin_middle .and. lon0 .lt. lonmax_middle ) then
            aaa=0.

          ; bottom
          else if ( lat0 .ge. latmin_bottom .and. lat0 .lt. latmax_bottom .and. \\
               lon0 .ge. lonmin_bottom .and. lon0 .lt. lonmax_bottom ) then
            aaa=0.

          else
            if (dim1 .eq.3) then
              tt1(:,j,i) = -999.99
            else if (dim1 .eq.4) then
              tt1(:,:,j,i) = -999.99
            end if
            end if
          end if
          end if
          end if
          end if

        else
          if (dim1 .eq.3) then
            tt1(:,j,i) = -999.99
          else if (dim1 .eq.4) then
            tt1(:,:,j,i) = -999.99
          end if
          end if
        end if

      end do
    end do

printVarSummary(tt1)
    file_inout->\$varnames(v)\$ = tt1
    delete(tt1)
  end do ; end do of vars

end do ; end do of files

;---------------
; post process
;---------------
;  wks = gsn_open_wks(wks_type,wks_name)

;  res = True
;  res@gsnAddCyclic = False
;  res@cnFillOn = True
;  res@cnLinesOn = False
;  res@cnLineLabelsOn = False
;  res@cnFillMode = "Rasterfill"
;  plot = gsn_csm_contour_map (wks, tt1(0,:,:), res)

;lon11 = tt0&lon
;lon11(0:7) = lon11(0:7)-360.
;print(lon11)
;tt0&lon = lon11
; plot = gsn_csm_contour_map (wks, tt0(0,:,:), res)

;printVarSummary(tt0&lat)
;printVarSummary(tt0&lon)
;print(tt0&lat)
;print(tt0&lon)


EOF
#*** case: "nc-replace-values" end ***

#*** case: "cesm-prec_monthly_zonal-2sets" start ***
elif [ $casename_work -a $casename_work == "cesm-prec_monthly_zonal-2sets" ]; then

num22=$(($num_files/2))
num21=$(($num22-1))
num23=$(($num_files-1))

cat >> $ncl_name << EOF
;-------------
; open files
;-------------
EOF

# write file names of set 1
cat >> $ncl_name << EOF

  infilenames_${suffix01} = (/  \\
EOF

  for (( j=0; j<$num22; j=j+1 ))
  do
     if [ $j -eq $num21 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write file names of set 2
cat >> $ncl_name << EOF

  infilenames_${suffix02} = (/  \\
EOF

  for (( j=$num22; j<$num_files; j=j+1 ))
  do
     if [ $j -eq $num23 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write ncl codes
cat >> $ncl_name << EOF

  month = (/"Jan","Feb","Mar","Apr","May","Jun" , \\
            "Jul","Aug","Sep","Oct","Nov","Dec"/)

  num_${suffix01} = dimsizes(infilenames_${suffix01})
  num_${suffix02} = dimsizes(infilenames_${suffix02})

  file_${suffix01} = addfiles( infilenames_${suffix01} , "r" )
  file_${suffix02} = addfiles( infilenames_${suffix02} , "r" )

  precc_${suffix01} = file_${suffix01}[:]->PRECC
  precl_${suffix01} = file_${suffix01}[:]->PRECL

  precc_${suffix02} = file_${suffix02}[:]->PRECC
  precl_${suffix02} = file_${suffix02}[:]->PRECL

  precc_${suffix01}_zonal = dim_avg_n_Wrap(precc_${suffix01},2)
  precl_${suffix01}_zonal = dim_avg_n_Wrap(precl_${suffix01},2)

  precc_${suffix02}_zonal = dim_avg_n_Wrap(precc_${suffix02},2)
  precl_${suffix02}_zonal = dim_avg_n_Wrap(precl_${suffix02},2)

  prect_${suffix01}_zonal = plus(precc_${suffix01}_zonal, precl_${suffix01}_zonal)
  prect_${suffix02}_zonal = plus(precc_${suffix02}_zonal, precl_${suffix02}_zonal)

  prect_${suffix01}_zonal = multiply(prect_${suffix01}_zonal,1000.*86400.)
  prect_${suffix02}_zonal = multiply(prect_${suffix02}_zonal,1000.*86400.)

  precc_${suffix01}_zonal = multiply(precc_${suffix01}_zonal,1000.*86400.)
  precc_${suffix02}_zonal = multiply(precc_${suffix02}_zonal,1000.*86400.)

  precl_${suffix01}_zonal = multiply(precl_${suffix01}_zonal,1000.*86400.)
  precl_${suffix02}_zonal = multiply(precl_${suffix02}_zonal,1000.*86400.)

;print()
;printVarSummary(precc_${suffix01}_zonal)

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-prec_zonal_monthly-${suffix01}_${suffix02}"
  wks = gsn_open_wks(wks_type, wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
  opt = True
;
  res = True
;
;*** gsn res ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;
;*** adjust XY range ***
;  res@trXMinF = 
;  res@trXMaxF = 
;  res@trYMinF = 
;  res@trYMaxF = 
;
;*** adjust string ***
;  res@tiMainString =
  res@tiXAxisString = "latitude" 
  res@tiYAxisString = "Convective Prec rate (mm/day)"
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;-------
; plot
;-------
  label_names = (/" ${suffix01}"," ${suffix02}"/)

  plot = new(12,"graphic")

  do t=0,num_${suffix01}-1
  ;do t=0,0
    xdata = prect_${suffix01}_zonal&lat
    ;ydata = (/prect_${suffix01}_zonal(t,:),prect_${suffix02}_zonal(t,:)/)
    ydata = (/precc_${suffix01}_zonal(t,:),precc_${suffix02}_zonal(t,:)/)

    res@tiMainString = month(t)
    plot(t) = ignorant_xy(wks,xdata,ydata,label_names,res,opt)
  end do

;
  resp = True
;  resp@gsnFrame = False
  resp@txString = "CESM1.1.1_F2000_10yrs~C~Zonal prec distribution at Africa continent"
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

  gsn_panel(wks,plot,(/4,3/),resp)


EOF
#*** case: "cesm-prec_zoanl_monthly-2sets" end ***

#*** case: "cesm-div_plev-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-div_plev-2files" ]; then
cat >> $ncl_name << EOF
;--------------
; open files
;--------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
  u0_${suffix01}   = file_${suffix01}->U    
  v0_${suffix01}   = file_${suffix01}->V

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa

  u0_${suffix02}   = file_${suffix02}->U
  v0_${suffix02}   = file_${suffix02}->V

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.

  plev = (/500./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

; interpolete u,v to given pressure level
  u_plev_${suffix01} = vinth2p(u0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  v_plev_${suffix01} = vinth2p(v0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)

  u_plev_${suffix02} = vinth2p(u0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  v_plev_${suffix02} = vinth2p(v0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)

; compute diverenge on fixed grid via NCL function uv2dvF_Wrap (http://www.ncl.ucar.edu/Document/Functions/Contributed/uv2dvF_Wrap.shtml)
; if the input arrays are not global or contain missing data, then it is recommended that uv2dv_cfd be used. (http://www.ncl.ucar.edu/Document/Functions/Built-in/uv2dv_cfd.shtml)
  div_${suffix01} = uv2dvF_Wrap(u_plev_${suffix01},v_plev_${suffix01})
  div_${suffix02} = uv2dvF_Wrap(u_plev_${suffix02},v_plev_${suffix02})

; change divergence unit from 1/s to 1/day
  div_${suffix01} = multiply(div_${suffix01}, 86400.)
  div_${suffix02} = multiply(div_${suffix02}, 86400.)
  div_diff = diff(div_${suffix02},div_${suffix01})

; set plot variables
  varvar_${suffix01} = div_${suffix01}
  varvar_${suffix02} = div_${suffix02}
  varvar_diff = div_diff

tt=0
kk=0  
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
  cnmap1 = ignorant_define_colormap("BlRd_light",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-div-${suffix01}_${suffix02}_diff"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
  res@cnFillPalette = cnmap1
  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;  res@mpMaxLonF = 
;  res@mpMinLonF = 
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""

;*** set common string ***
  res@gsnLeftString = "divergence (1/day)"
;

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
  res_${suffix01}@cnLevels = (/-0.35,-0.3,-0.25,-0.2,-0.15,-0.1,-0.05,-0.01,0,0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35/)

;  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
;  res_${suffix01}@cnMinLevelValF = -1. 
;  res_${suffix01}@cnMaxLevelValF = 1.
;  res_${suffix01}@cnLevelSpacingF = 0.1

  res_${suffix01}@cnFillPalette = cnmap1
  res_${suffix01}@cnSpanFillPalette = False

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for diff ***
  res_diff = res
  res_diff@tiMainString = "${suffix02} minus ${suffix01}"
  res_diff@cnLevelSelectionMode = "ExplicitLevels"
  res_diff@cnLevels = 0.1*res_${suffix01}@cnLevels

;  res_diff@cnLevelSelectionMode = "ManualLevels"
;  res_diff@cnMinLevelValF = -0.07 
;  res_diff@cnMaxLevelValF = 0.07
;  res_diff@cnLevelSpacingF = 0.01
;  res_diff@tiMainString = "${suffix02} minus ${suffix01}"

;-------
; plot
;-------

  res_${suffix01}@gsnRightString = (tostring(plev)+" hPa")
  res_${suffix02}@gsnRightString = (tostring(plev)+" hPa")
  res_diff@gsnRightString = (tostring(plev)+" hPa")

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}(tt,kk,:,:), res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}(tt,kk,:,:), res_${suffix02})
  plot_varvar_diff = gsn_csm_contour_map (wks, varvar_diff(tt,kk,:,:), res_diff)
    
  plot_varvar = new (3,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_diff
;
  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/2,1/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)


EOF
#*** case: "cesm-div_plev-2files" end ***

#*** case: "cesm-moist_conv_plev-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-moist_conv_plev-2files" ]; then
cat >> $ncl_name << EOF
;--------------
; open files
;--------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa

  u0_${suffix01}   = file_${suffix01}->U
  v0_${suffix01}   = file_${suffix01}->V
  q0_${suffix01}   = file_${suffix01}->Q

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa

  u0_${suffix02}   = file_${suffix02}->U
  v0_${suffix02}   = file_${suffix02}->V
  q0_${suffix02}   = file_${suffix02}->Q

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.

  plev = (/850./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

; interpolete u,v,q to given pressure level
  u_plev_${suffix01} = vinth2p(u0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  v_plev_${suffix01} = vinth2p(v0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  q_plev_${suffix01} = vinth2p(q0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)

  u_plev_${suffix02} = vinth2p(u0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  v_plev_${suffix02} = vinth2p(v0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  q_plev_${suffix02} = vinth2p(q0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)

; compute moisture diverenge on fixed grid via NCL function uv2dvF_Wrap (http://www.ncl.ucar.edu/Document/Functions/Contributed/uv2dvF_Wrap.shtml)
; if the input arrays are not global or contain missing data, then it is recommended that uv2dv_cfd be used. (http://www.ncl.ucar.edu/Document/Functions/Built-in/uv2dv_cfd.shtml)
  qu_${suffix01} = u_plev_${suffix01}*q_plev_${suffix01}
  qv_${suffix01} = v_plev_${suffix01}*q_plev_${suffix01}
  qdiv_${suffix01} = uv2dvF_Wrap(qu_${suffix01},qv_${suffix01})
  copy_VarCoords(v_plev_${suffix01},qdiv_${suffix01})

  qu_${suffix02} = u_plev_${suffix02}*q_plev_${suffix02}
  qv_${suffix02} = v_plev_${suffix02}*q_plev_${suffix02}
  qdiv_${suffix02} = uv2dvF_Wrap(qu_${suffix02},qv_${suffix02})
  copy_VarCoords(v_plev_${suffix02},qdiv_${suffix02})

; change to moisture convergence, and unit from kg/kg/s to g/kg/day
  qdiv_${suffix01} = multiply(qdiv_${suffix01}, -1000.*86400.)
  qdiv_${suffix02} = multiply(qdiv_${suffix02}, -1000.*86400.)
  qdiv_diff = diff(qdiv_${suffix02},qdiv_${suffix01})

  qdiv_${suffix01}@units = "g/kg/day"
  qdiv_${suffix02}@units = qdiv_${suffix01}@units

  qdiv_${suffix01}@long_name = "moist flux convergence"
  qdiv_${suffix02}@long_name = qdiv_${suffix01}@long_name

; set plot variables
  varvar_${suffix01} = qdiv_${suffix01}
  varvar_${suffix02} = qdiv_${suffix02}
  varvar_diff = qdiv_diff

  tt=0
  kk=0

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-moist_div_850hpa_climo_africa-${suffix01}_${suffix02}_diff"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
  res_${suffix01}@cnMinLevelValF = -10. 
  res_${suffix01}@cnMaxLevelValF = 10.
  res_${suffix01}@cnLevelSpacingF = 1.

;  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
;  res_${suffix01}@cnLevels = (//)

;  res_${suffix01}@cnFillPalette = "amwg"
;  res_${suffix01}@cnSpanFillPalette = False

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for ${suffix02} ***
  res_diff = res
  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -1.
  res_diff@cnMaxLevelValF = 1.
  res_diff@cnLevelSpacingF = 0.1
  res_diff@tiMainString = "${suffix02} minus ${suffix01}"

;  res_diff@cnFillPalette = "amwg"
;  res_diff@cnSpanFillPalette = False

;-------
; plot
;-------

  res_${suffix01}@gsnRightString = (tostring(plev)+" hPa")
  res_${suffix02}@gsnRightString = (tostring(plev)+" hPa")
  res_diff@gsnRightString = (tostring(plev)+" hPa")

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}(tt,kk,:,:), res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}(tt,kk,:,:), res_${suffix02})
  plot_varvar_diff = gsn_csm_contour_map (wks, varvar_diff(tt,kk,:,:), res_diff)
  
  
  plot_varvar = new (3,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_diff
;
  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/2,1/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)


EOF
#*** case: "cesm-moist_conv_plev-2files" end ***

#*** case: "cesm-moist_conv_vint-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-moist_conv_vint-2files" ]; then
cat >> $ncl_name << EOF
;--------------
; open files
;--------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa

  u0_${suffix01}   = file_${suffix01}->U
  v0_${suffix01}   = file_${suffix01}->V
  q0_${suffix01}   = file_${suffix01}->Q

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa

  u0_${suffix02}   = file_${suffix02}->U
  v0_${suffix02}   = file_${suffix02}->V
  q0_${suffix02}   = file_${suffix02}->Q

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.

  plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
    250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
    850., 875., 900., 925., 950., 975., 1000./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

; interpolete u,v,q to given pressure level
  u_plev_${suffix01} = vinth2p(u0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  v_plev_${suffix01} = vinth2p(v0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  q_plev_${suffix01} = vinth2p(q0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)

  u_plev_${suffix02} = vinth2p(u0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  v_plev_${suffix02} = vinth2p(v0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  q_plev_${suffix02} = vinth2p(q0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)

; compute moisture diverenge on fixed grid via NCL function uv2dvF_Wrap (http://www.ncl.ucar.edu/Document/Functions/Contributed/uv2dvF_Wrap.shtml)
; if the input arrays are not global or contain missing data, then it is recommended that uv2dv_cfd be used. (http://www.ncl.ucar.edu/Document/Functions/Built-in/uv2dv_cfd.shtml)
  qu_${suffix01} = u_plev_${suffix01}*q_plev_${suffix01}
  qv_${suffix01} = v_plev_${suffix01}*q_plev_${suffix01}
  qdiv_${suffix01} = uv2dvF_Wrap(qu_${suffix01},qv_${suffix01})
  copy_VarCoords(v_plev_${suffix01},qdiv_${suffix01})

  qu_${suffix02} = u_plev_${suffix02}*q_plev_${suffix02}
  qv_${suffix02} = v_plev_${suffix02}*q_plev_${suffix02}
  qdiv_${suffix02} = uv2dvF_Wrap(qu_${suffix02},qv_${suffix02})
  copy_VarCoords(v_plev_${suffix02},qdiv_${suffix02})

; reverse plev and moistrue divergence for vertical integration
  plev_r = plev(::-1)*100.
  qdiv_${suffix01}_r = qdiv_${suffix01}(:,::-1,:,:)
  qdiv_${suffix02}_r = qdiv_${suffix02}(:,::-1,:,:)

; vertical integration of moisture divergence via NCL function vibeta (http://www.ncl.ucar.edu/Document/Functions/Built-in/vibeta.shtml)
  linlog = 1         ; 1 = linear interpolation, 2 = log interpolation
  pbot = 1100.*100.  ; unit: hPa
  ptop = 1.*100.     ; unit: hPa

  vi_qdiv_${suffix01} = vibeta (plev_r,qdiv_${suffix01}_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix01},pbot,ptop)
  vi_qdiv_${suffix02} = vibeta (plev_r,qdiv_${suffix02}_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix02},pbot,ptop)

  copy_VarCoords(ps_${suffix01}, vi_qdiv_${suffix01})
  copy_VarCoords(ps_${suffix02}, vi_qdiv_${suffix02})
 
; change unit and to moisture convergence
  vi_qdiv_${suffix02} = multiply(vi_qdiv_${suffix02}, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  vi_qdiv_${suffix02}@units = "mm/day"
  vi_qdiv_${suffix02}@long_name = "moisture flux convergence"

  vi_qdiv_${suffix01} = multiply(vi_qdiv_${suffix01}, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  vi_qdiv_${suffix01}@units = "mm/day"
  vi_qdiv_${suffix01}@long_name = vi_qdiv_${suffix02}@long_name 

  vi_qdiv_diff = diff(vi_qdiv_${suffix02},vi_qdiv_${suffix01})

; set plot variables
  varvar_${suffix01} = vi_qdiv_${suffix01}
  varvar_${suffix02} = vi_qdiv_${suffix02}
  varvar_diff = vi_qdiv_diff

  tt=0

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
  option_foreback = False
  cmap1 = ignorant_select_colormap("precip_diff_12lev",(/2,3,4,5,6,7,8,8,9,10,11,12,13,14/),option_foreback)

;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-moist_div_int_climo_africa-${suffix01}_${suffix02}_diff"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
  ;res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
  ;res_${suffix01}@cnMinLevelValF = -10. 
  ;res_${suffix01}@cnMaxLevelValF = 10.
  ;res_${suffix01}@cnLevelSpacingF = 1.

  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
  res_${suffix01}@cnLevels = 10.*(/-0.8,-0.6,-0.4,-0.2,-0.1,-0.05,0.,0.05,0.1,0.2,0.4,0.6,0.8/)

  res_${suffix01}@cnFillPalette = cmap1
  res_${suffix01}@cnSpanFillPalette = False

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for diff ***
  res_diff = res
  res_diff@tiMainString = "${suffix02} minus ${suffix01}"
;  res_diff@cnLevelSelectionMode = "ManualLevels"
;  res_diff@cnMinLevelValF = -0.5
;  res_diff@cnMaxLevelValF = 0.5
;  res_diff@cnLevelSpacingF = 0.1
;  res_diff@tiMainString = "${suffix02} minus ${suffix01}"

  res_diff@cnLevelSelectionMode = "ExplicitLevels"
  res_diff@cnLevels = (/-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0.,0.1,0.2,0.3,0.4,0.5,0.6/)
  res_diff@cnFillPalette = cmap1
  res_diff@cnSpanFillPalette = False

;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;-------
; plot
;-------

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}(tt,:,:), res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}(tt,:,:), res_${suffix02})
  plot_varvar_diff = gsn_csm_contour_map (wks, varvar_diff(tt,:,:), res_diff)
  
  
  plot_varvar = new (3,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_diff
;
  resp = True
  resp@gsnPanelRowSpec = True
  resp@txString = "CESM1.1.1-F2000_10years-average"
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/2,1/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)


EOF
#*** case: "cesm-moist_conv_vint-2files" end ***

#*** case: "surface_type-single" start ***
elif [ $casename_work -a $casename_work == "surface_type-single" ]; then
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  suftype = file_${suffix01}->${var01}
  cndata = suftype

;*** IGBP data set - 17 surface types ***

;; surface type name
;  suftype_name = (/"water","evergreen needleleaf forest","evergreen broadleaf forest", \\
;                   "deciduous needleleaf forest","deciduous broadleaf forest","mixed forests", \\
;                   "closed shrubland","open shrublands","woody savannas", \\
;                   "savannas","grasslands","permanent wetlands", \\
;                   "croplands","urban and build up","cropland natural vegetation mosaic", \\
;                   "snow and ice", "barren or sparsely vegetated"/)
;
;; assigned color
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("OceanLakeLandSnow",(/2,\\                     ; water
;                                                         17,33,49,65,81, \\       ; evergreen, decidus, mixed
;                                                         129,161      , \\        ; shrubland
;                                                         193,225              \\  ; savannas
;                                                         /),option_foreback)
;
;  cmap2 = ignorant_select_colormap("wgne15", (/9, \\  ; grassland
;                                               7, \\  ; wetland
;                                               13 \\  ; cropland
;                                                         /),option_foreback)
;  cmap3 = ignorant_select_colormap("default",26,option_foreback)  ; urban
;
;  cmap4 = ignorant_select_colormap("wgne15", (/11/), option_foreback) ; cropland and vegetation
;
;  cmap5 = ignorant_select_colormap("wgne15", 0, False) ; snow
;
;  cmap6 = ignorant_select_colormap("default", 22, False) ; barren_or_sparsely_vegetated
;
;  cmap_a1 = ignorant_combine_colormaps(cmap1,cmap2,1)
;  cmap_a2 = ignorant_combine_colormaps(cmap_a1,cmap3,1)
;  cmap_a3 = ignorant_combine_colormaps(cmap_a2,cmap4,1)
;  cmap_a4 = ignorant_combine_colormaps(cmap_a3,cmap5,1)
;  cmap_a5 = ignorant_combine_colormaps(cmap_a4,cmap6,1)
;  cmap_all = cmap_a5
;
;;*** X. Huang's group surface emissvity data set ***
;
;; surface type name
;  suftype_name = (/ \\
;    "Grass", "Dry Grass", "Decidous", \\
;    "Conifer", "Rock", "Water", \\
;    "Fine Snow", "Median Snow", "Coarse Snow", \\
;    "Ice", "Sand_30micron", "Sand_31micron", \\
;    "Sand_32micron", "Sand_33micron", "Sand_34micron", \\
;    "Sand_35micron", "Sand_36micron", "Sand_37micron", \\
;    "Sand_38micron", "Sand_39micron", "Sand_40micron", \\
;    "Sand_41micron", "Sand_42micron", "Sand_43micron", \\
;    "Sand_44micron", "Sand_45micron", "45% desert~C~ and 55% grass" /)
;
;; assigned color
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("wgne15", 9, option_foreback)  ; grassland
;  cmap2 = ignorant_select_colormap("OceanLakeLandSnow", (/193,1,17/), option_foreback)  ; dry grass, Decidous, Conifer
;  cmap3 = ignorant_select_colormap("default", 26, False) ; rock
;  cmap4 = ignorant_select_colormap("OceanLakeLandSnow",2,option_foreback)     ; water
;  cmap5 = ignorant_select_colormap("wgne15", (/0,0,0,0/), False) ; fine, median, coarse snow , ice
;  cmap6 = ignorant_select_colormap("MPL_copper", (/129,121,113,105,97,89,81,73,62, \\
;                                                   54,48,40,32,24,16,8/) , option_foreback)
;  cmap7 = ignorant_select_colormap("default",2,option_foreback)     ; 45% desert and 55% grass
;
;  cmap_a1 = ignorant_combine_colormaps(cmap1,cmap2,1)
;  cmap_a2 = ignorant_combine_colormaps(cmap_a1,cmap3,1)
;  cmap_a3 = ignorant_combine_colormaps(cmap_a2,cmap4,1)
;  cmap_a4 = ignorant_combine_colormaps(cmap_a3,cmap5,1)
;  cmap_a5 = ignorant_combine_colormaps(cmap_a4,cmap6,1)
;  cmap_a6 = ignorant_combine_colormaps(cmap_a5,cmap7,1)
;
;  cmap_all = cmap_a6
;
;
;-------------------
; set work station
;-------------------
  ;wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_define_colormap(wks,cmap_a5)
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
  res@gsnAddCyclic = False
;  res@vpXF = 0.1
;
;*** adjust contour levels ***
  res@cnLevelSelectionMode = "ManualLevels"
  res@cnMinLevelValF = 1.  ; minimum numerical value of surface type plus 1
  res@cnMaxLevelValF = 16. ; maximum numerical value of surface type
  res@cnLevelSpacingF = 1.
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnFillMode = "RasterFill"

;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
  res@cnFillPalette = cmap_all
  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;  res@pmLabelBarSide = "right"
  res@lbOrientation = "vertical"  
  res@lbLabelAlignment = "BoxCenters"
  res@lbLabelStrings = suftype_name
  res@lbLabelFontHeightF = 0.01
  res@lbLabelJust       = "CenterLeft"


;*** set title string ***
  res@tiMainString = ""
;  res@tiXAxisString =
;  res@tiYAxisString =
  res@gsnLeftString = ""
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
  res@gsnRightString = ""
;
;

;-------
; plot
;-------
  plot = gsn_csm_contour(wks,cndata,res)


EOF
#*** case: "surface_type-single" end ***

#*** case: "surface_type-monthly" start ***
elif [ $casename_work -a $casename_work == "surface_type-monthly" ]; then
cat >> $ncl_name << EOF
;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  suftype = file_${suffix01}->$var01
  cndata = suftype

;*** IGBP data set - 17 surface types ***

;; surface type name
;  suftype_name = (/"water","evergreen needleleaf forest","evergreen broadleaf forest", \\
;                   "deciduous needleleaf forest","deciduous broadleaf forest","mixed forests", \\
;                   "closed shrubland","open shrublands","woody savannas", \\
;                   "savannas","grasslands","permanent wetlands", \\
;                   "croplands","urban and build up","cropland natural vegetation mosaic", \\
;                   "snow and ice", "barren or sparsely vegetated"/)
;
;; assigned color
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("OceanLakeLandSnow",(/2,\\                     ; water
;                                                         17,33,49,65,81, \\       ; evergreen, decidus, mixed
;                                                         129,161      , \\        ; shrubland
;                                                         193,225              \\  ; savannas
;                                                         /),option_foreback)
;
;  cmap2 = ignorant_select_colormap("wgne15", (/9, \\  ; grassland
;                                               7, \\  ; wetland
;                                               13 \\  ; cropland
;                                                         /),option_foreback)
;  cmap3 = ignorant_select_colormap("default",26,option_foreback)  ; urban
;
;  cmap4 = ignorant_select_colormap("wgne15", (/11/), option_foreback) ; cropland and vegetation
;
;  cmap5 = ignorant_select_colormap("wgne15", 0, False) ; snow
;
;  cmap6 = ignorant_select_colormap("default", 22, False) ; barren_or_sparsely_vegetated
;
;  cmap_a1 = ignorant_combine_colormaps(cmap1,cmap2,1)
;  cmap_a2 = ignorant_combine_colormaps(cmap_a1,cmap3,1)
;  cmap_a3 = ignorant_combine_colormaps(cmap_a2,cmap4,1)
;  cmap_a4 = ignorant_combine_colormaps(cmap_a3,cmap5,1)
;  cmap_a5 = ignorant_combine_colormaps(cmap_a4,cmap6,1)
;  cmap_all = cmap_a5
;
;;*** X. Huang's group surface emissvity data set ***
;
;; surface type name
;  suftype_name = (/ \\
;    "Grass", "Dry Grass", "Decidous", \\
;    "Conifer", "Rock", "Water", \\
;    "Fine Snow", "Median Snow", "Coarse Snow", \\
;    "Ice", "Sand_30micron", "Sand_31micron", \\
;    "Sand_32micron", "Sand_33micron", "Sand_34micron", \\
;    "Sand_35micron", "Sand_36micron", "Sand_37micron", \\
;    "Sand_38micron", "Sand_39micron", "Sand_40micron", \\
;    "Sand_41micron", "Sand_42micron", "Sand_43micron", \\
;    "Sand_44micron", "Sand_45micron", "45% desert~C~ and 55% grass" /)
;
;; assigned color
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("wgne15", 9, option_foreback)  ; grassland
;  cmap2 = ignorant_select_colormap("OceanLakeLandSnow", (/193,1,17/), option_foreback)  ; dry grass, Decidous, Conifer
;  cmap3 = ignorant_select_colormap("default", 26, False) ; rock
;  cmap4 = ignorant_select_colormap("OceanLakeLandSnow",2,option_foreback)     ; water
;  cmap5 = ignorant_select_colormap("wgne15", (/0,0,0,0/), False) ; fine, median, coarse snow , ice
;  cmap6 = ignorant_select_colormap("MPL_copper", (/129,121,113,105,97,89,81,73,62, \\
;                                                   54,48,40,32,24,16,8/) , option_foreback)
;  cmap7 = ignorant_select_colormap("default",2,option_foreback)     ; 45% desert and 55% grass
;
;  cmap_a1 = ignorant_combine_colormaps(cmap1,cmap2,1)
;  cmap_a2 = ignorant_combine_colormaps(cmap_a1,cmap3,1)
;  cmap_a3 = ignorant_combine_colormaps(cmap_a2,cmap4,1)
;  cmap_a4 = ignorant_combine_colormaps(cmap_a3,cmap5,1)
;  cmap_a5 = ignorant_combine_colormaps(cmap_a4,cmap6,1)
;  cmap_a6 = ignorant_combine_colormaps(cmap_a5,cmap7,1)
;
;  cmap_all = cmap_a6
;
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)

;  gsn_define_colormap(wks,"gui_default")
;  gsn_define_colormap(wks,cmap_a5)
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
  res@gsnAddCyclic = False
;  res@vpXF = 0.1
;
;*** adjust contour levels ***
  res@cnLevelSelectionMode = "ManualLevels"
  res@cnMinLevelValF = 1.  ; minimum numerical value of surface type plus 1
  res@cnMaxLevelValF = 16. ; maximum numerical value of surface type
  res@cnLevelSpacingF = 1.
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnFillMode = "RasterFill"

;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
  res@cnFillPalette = cmap_all
  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;  res@pmLabelBarSide = "right"
  res@lbOrientation = "vertical"  
  res@lbLabelAlignment = "BoxCenters"
  res@lbLabelStrings = suftype_name
  res@lbLabelFontHeightF = 0.01
  res@lbLabelJust       = "CenterLeft"


;*** set title string ***
  res@tiMainString = ""
;  res@tiXAxisString =
;  res@tiYAxisString =
  res@gsnLeftString = ""
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
  res@gsnRightString = ""
;
;

;-------
; plot
;-------
  plot = gsn_csm_contour(wks,cndata,res)


EOF
#*** case: "surface_type-monthly" end ***

#*** case: "cesm-write-moist_conv-2sets" start ***
elif [ $casename_work -a $casename_work == "cesm-write-moist_conv-2sets" ]; then

num22=$(($num_files/2))
num21=$(($num22-1))
num23=$(($num_files-1))

cat >> $ncl_name << EOF
;-------------
; open files
;-------------
EOF

# write file names of set 1
cat >> $ncl_name << EOF

  infilenames_${suffix01} = (/  \\
EOF

  for (( j=0; j<$num22; j=j+1 ))
  do
     if [ $j -eq $num21 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write file names of set 2
cat >> $ncl_name << EOF

  infilenames_${suffix02} = (/  \\
EOF

  for (( j=$num22; j<$num_files; j=j+1 ))
  do
     if [ $j -eq $num23 ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

# write ncl code
cat >> $ncl_name << EOF

  num_files = dimsizes(infilenames_${suffix02})

  ntime = num_files
  nlon = 144
  nlat = 96

;;*** merge multiple files result into a single variable ***
;;*** also, search var_q1v1 to set correct settings ***
;  ntime = num_files
;  var1 = new( (/ntime,nlat,nlon/) ,"float")
;  var_q1v1 = var1
;  var_q2v2 = var1
;  var_q1v2 = var1
;  var_q2v1 = var1

;;*** time variable is already in the file ***
;;*** also, search var_q1v1 to set correct settings ***
; no need to do anything

do ff=0,num_files-1
;do ff=0,0
;do ff=0,1

  file_${suffix01} = addfile( infilenames_${suffix01}(ff) , "r" )
  file_${suffix02} = addfile( infilenames_${suffix02}(ff) , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa

  u0_${suffix01}   = file_${suffix01}->U
  v0_${suffix01}   = file_${suffix01}->V
  q0_${suffix01}   = file_${suffix01}->Q

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa

  u0_${suffix02}   = file_${suffix02}->U
  v0_${suffix02}   = file_${suffix02}->V
  q0_${suffix02}   = file_${suffix02}->Q

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.

  plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
    250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
    850., 875., 900., 925., 950., 975., 1000./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

; interpolete u,v,q to given pressure level
  u_plev_${suffix01} = vinth2p(u0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  v_plev_${suffix01} = vinth2p(v0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)
  q_plev_${suffix01} = vinth2p(q0_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, True)

  u_plev_${suffix02} = vinth2p(u0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  v_plev_${suffix02} = vinth2p(v0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)
  q_plev_${suffix02} = vinth2p(q0_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, True)

; compute moisture diverenge on fixed grid via NCL function uv2dvF_Wrap (http://www.ncl.ucar.edu/Document/Functions/Contributed/uv2dvF_Wrap.shtml)
; if the input arrays are not global or contain missing data, then it is recommended that uv2dv_cfd be used. (http://www.ncl.ucar.edu/Document/Functions/Built-in/uv2dv_cfd.shtml)
  q1u1 = u_plev_${suffix01}*q_plev_${suffix01}
  q1v1 = v_plev_${suffix01}*q_plev_${suffix01}
  qdiv_q1v1 = uv2dvF_Wrap(q1u1,q1v1)
  copy_VarCoords(v_plev_${suffix01},qdiv_q1v1)

  q2u2 = u_plev_${suffix02}*q_plev_${suffix02}
  q1v2 = v_plev_${suffix02}*q_plev_${suffix02}
  qdiv_q2v2 = uv2dvF_Wrap(q2u2,q1v2)
  copy_VarCoords(v_plev_${suffix02},qdiv_q2v2)

  q2u1 = u_plev_${suffix01}*q_plev_${suffix02}
  q2v1 = v_plev_${suffix01}*q_plev_${suffix02}
  qdiv_q2v1 = uv2dvF_Wrap(q2u1,q2v1)
  copy_VarCoords(v_plev_${suffix02},qdiv_q2v1)

  q1u2 = u_plev_${suffix02}*q_plev_${suffix01}
  q1v2 = v_plev_${suffix02}*q_plev_${suffix01}
  qdiv_q1v2 = uv2dvF_Wrap(q1u2,q1v2)
  copy_VarCoords(v_plev_${suffix02},qdiv_q1v2)

; reverse plev and moistrue divergence for vertical integration
  plev_r = plev(::-1)*100.
  qdiv_q1v1_r = qdiv_q1v1(:,::-1,:,:)
  qdiv_q2v2_r = qdiv_q2v2(:,::-1,:,:)
  qdiv_q2v1_r = qdiv_q2v1(:,::-1,:,:)
  qdiv_q1v2_r = qdiv_q1v2(:,::-1,:,:)

; vertical integration of moisture divergence via NCL function vibeta (http://www.ncl.ucar.edu/Document/Functions/Built-in/vibeta.shtml)
  linlog = 1         ; 1 = linear interpolation, 2 = log interpolation
  pbot = 1100.*100.  ; unit: hPa
  ptop = 1.*100.     ; unit: hPa

  vi_qdiv_q1v1 = vibeta (plev_r,qdiv_q1v1_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix01},pbot,ptop)
  vi_qdiv_q2v2 = vibeta (plev_r,qdiv_q2v2_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix02},pbot,ptop)
  vi_qdiv_q2v1  = vibeta (plev_r,qdiv_q2v1_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix02},pbot,ptop)
  vi_qdiv_q1v2  = vibeta (plev_r,qdiv_q1v2_r(time|:,lat|:,lon|:,lev_p|:),linlog,ps_${suffix02},pbot,ptop)

  copy_VarCoords(ps_${suffix01}, vi_qdiv_q1v1)
  copy_VarCoords(ps_${suffix01}, vi_qdiv_q2v2)
  copy_VarCoords(ps_${suffix01}, vi_qdiv_q2v1)
  copy_VarCoords(ps_${suffix01}, vi_qdiv_q1v2)
 
; change unit and to moisture convergence
  vi_qdiv_q1v1 = multiply(vi_qdiv_q1v1, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  vi_qdiv_q1v1@units = "mm/day"
  vi_qdiv_q1v1@long_name = "vertically-integrated moisture convergence"
  vi_qdiv_q1v1@index = "1: ${suffix01}, 2:${suffix02}"
  vi_qdiv_q1v1!0 = "Time"
  delete(vi_qdiv_q1v1&Time)

  vi_qdiv_q2v2 = multiply(vi_qdiv_q2v2, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  copy_VarAtts(vi_qdiv_q1v1,vi_qdiv_q2v2)
  vi_qdiv_q2v2!0 = "Time"
  delete(vi_qdiv_q2v2&Time)

  vi_qdiv_q1v2 = multiply(vi_qdiv_q1v2, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  copy_VarAtts(vi_qdiv_q1v1,vi_qdiv_q1v2)
  vi_qdiv_q1v2!0 = "Time"
  delete(vi_qdiv_q1v2&Time)

  vi_qdiv_q2v1 = multiply(vi_qdiv_q2v1, -1000.*86400./1000./9.8 )  ; change unit from kg/s/m2 to mm/day
  copy_VarAtts(vi_qdiv_q1v1,vi_qdiv_q2v1)
  vi_qdiv_q2v1!0 = "Time"
  delete(vi_qdiv_q2v1&Time)

print("Done. "+infilenames_${suffix02}(ff)+", "+infilenames_${suffix01}(ff))

;;*** merge multiple files into a single variable ***
;  var_q1v1(ff,:,:) = vi_qdiv_q1v1
;  var_q1v2(ff,:,:) = vi_qdiv_q1v2
;  var_q2v1(ff,:,:) = vi_qdiv_q2v1
;  var_q2v2(ff,:,:) = vi_qdiv_q2v2

;;*** time variable is already in the file ***
  var_q1v1 = vi_qdiv_q1v1
  var_q1v2 = vi_qdiv_q1v2
  var_q2v1 = vi_qdiv_q2v1
  var_q2v2 = vi_qdiv_q2v2

  delete(qdiv_q1v1)
  delete(qdiv_q1v2)
  delete(qdiv_q2v1)
  delete(qdiv_q2v2)
  delete(vi_qdiv_q1v1)
  delete(vi_qdiv_q1v2)
  delete(vi_qdiv_q2v1)
  delete(vi_qdiv_q2v2)

end do

;---------------------
; write out to a file
;---------------------

;  file_out = addfile("./a2.nc" ,"w")   ; a empty netCDF file is fine
;  file_out->moist_conv_q1v1 = var_q1v1
;  file_out->moist_conv_q1v2 = var_q1v2
;  file_out->moist_conv_q2v1 = var_q2v1
;  file_out->moist_conv_q2v2 = var_q2v2

;printVarSummary(var_q1v1)
;printVarSummary(var_q1v2)
;printVarSummary(var_q2v1)
;printVarSummary(var_q2v2)

;*******
; plot
;*******

;--------------
; open files
;--------------

  suffix1 = "${suffix01}"
  suffix2 = "${suffix02}"

;*** read variables in this script ***
  qconv_q1v1 = var_q1v1
  qconv_q1v2 = var_q1v2
  qconv_q2v1 = var_q2v1
  qconv_q2v2 = var_q2v2

;*** read variables from file ***
;  filename = ""
;  infile_moist = addfile ( filename , "r")
;  qconv_q1v2 = infile_moist->moist_conv_q1v2
;  qconv_q1v1 = infile_moist->moist_conv_q1v1
;  qconv_q2v1 = infile_moist->moist_conv_q2v1
;  qconv_q2v2 = infile_moist->moist_conv_q2v2

; average time dimension
  qconv_q1v2_avg = dim_avg_n_Wrap(qconv_q1v2,0)
  qconv_q1v1_avg = dim_avg_n_Wrap(qconv_q1v1,0)
  qconv_q2v1_avg = dim_avg_n_Wrap(qconv_q2v1,0)
  qconv_q2v2_avg = dim_avg_n_Wrap(qconv_q2v2,0)

;printVarSummary(qconv_q1v2_avg)

; compute difference
  diff_q1v2_q2v2 = diff(qconv_q1v2_avg,qconv_q2v2_avg)
  diff_q1v1_q2v2 = diff(qconv_q1v1_avg,qconv_q2v2_avg)
  diff_q2v1_q2v2 = diff(qconv_q2v1_avg,qconv_q2v2_avg)
  diff_q2v2_q2v2 = diff(qconv_q2v2_avg,qconv_q2v2_avg)

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
  option_foreback = False
  cmap1 = ignorant_select_colormap("precip_diff_12lev",(/2,3,4,5,6,7,8,8,9,10,11,12,13,14/),option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
;  wks_name = "fig-moist_conv_q1v1q2v2-"+suffix1+"_"+suffix2+"_diff"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = -4. 
;  res@cnMaxLevelValF = 4.
;  res@cnLevelSpacingF = 0.5
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
  res@mpLimitMode = "LatLon"
  res@mpMaxLatF = 40.
  res@mpMinLatF = -40.
  res@mpMaxLonF = 55.
  res@mpMinLonF = -20.

;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;

;*** res for ctl ***
  res_qconv = res
  res_qconv@gsnLeftString = "moist conv"
  ;res_qconv@cnLevelSelectionMode = "ManualLevels"
  ;res_qconv@cnMinLevelValF = -10. 
  ;res_qconv@cnMaxLevelValF = 10.
  ;res_qconv@cnLevelSpacingF = 1.

  res_qconv@cnLevelSelectionMode = "ExplicitLevels"
  res_qconv@cnLevels = 10.*(/-0.8,-0.6,-0.4,-0.2,-0.1,-0.05,0.,0.05,0.1,0.2,0.4,0.6,0.8/)
  ;res_qconv@cnLevels = (/-2.0,-1.6,-1.2,-0.8,-0.4,-0.2,0.,0.2,0.4,0.8,1.2,1.6,2.0/)
  ;res_qconv@cnLevels = (/-2.0,-1.6,-1.2,-0.8,-0.4,-0.2,0.,0.2,0.4,0.8,1.2,1.6,2.0/)

  res_qconv@cnFillPalette = cmap1
  res_qconv@cnSpanFillPalette = False

;*** res for both ***
  res_diff = res
  res_diff@gsnLeftString = "moist conv diff"
;  res_diff@cnLevelSelectionMode = "ManualLevels"
;  res_diff@cnMinLevelValF = -0.5
;  res_diff@cnMaxLevelValF = 0.5
;  res_diff@cnLevelSpacingF = 0.1
;  res_diff@tiMainString = "both minus ctl"

  res_diff@cnLevelSelectionMode = "ExplicitLevels"
  res_diff@cnLevels = (/-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0.,0.1,0.2,0.3,0.4,0.5,0.6/)
  res_diff@cnFillPalette = cmap1
  res_diff@cnSpanFillPalette = False


;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------

  plot_qconv = new (4,"graphic")
  plot_diff = new (4,"graphic")

  string_q1v2 = "q("+suffix1+")*v("+suffix2+")"
  string_q1v1 = "q("+suffix1+")*v("+suffix1+")"
  string_q2v1 = "q("+suffix2+")*v("+suffix1+")"
  string_q2v2 = "q("+suffix2+")*v("+suffix2+")"

; plot column-integrated moisture convergence
  res_qconv@tiMainString = string_q1v2
  plot_qconv(0) = gsn_csm_contour_map (wks, qconv_q1v2_avg, res_qconv) 

  res_qconv@tiMainString = string_q2v1
  plot_qconv(1) = gsn_csm_contour_map (wks, qconv_q2v1_avg, res_qconv) 

  res_qconv@tiMainString = string_q1v1
  plot_qconv(2) = gsn_csm_contour_map (wks, qconv_q1v1_avg, res_qconv) 

  res_qconv@tiMainString = string_q2v2
  plot_qconv(3) = gsn_csm_contour_map (wks, qconv_q2v2_avg, res_qconv) 
  
; plot difference of column-integrated moisture convergence
  res_diff@tiMainString = string_q1v2+"-"+string_q2v2
  plot_diff(0) = gsn_csm_contour_map (wks, diff_q1v2_q2v2, res_diff) 

  res_diff@tiMainString = string_q2v1+"-"+string_q2v2
  plot_diff(1) = gsn_csm_contour_map (wks, diff_q2v1_q2v2, res_diff) 

  res_diff@tiMainString = string_q1v1+"-"+string_q2v2
  plot_diff(2) = gsn_csm_contour_map (wks, diff_q1v1_q2v2, res_diff) 

  res_diff@tiMainString = string_q2v2+"-"+string_q2v2
  plot_diff(3) = gsn_csm_contour_map (wks, diff_q2v2_q2v2, res_diff) 
;
  resp = True
  resp@gsnPanelRowSpec = True
  resp@txString = "CESM1.1.1-F2000_10years-average"
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_qconv, (/2,2/), resp)
  gsn_panel(wks, plot_diff, (/2,2/), resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-write-moist_conv-2sets" end ***

#*** case: "nc-compare-var" start ***
elif [ $casename_work -a $casename_work == "nc-compare-var" ]; then
cat >> $ncl_name << EOF
;-------------
; open files
;-------------
EOF

# write all file names to variable $infilenames
  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

cat >> $ncl_name << EOF

  ; process variable
  var_name = "${var01}"

  ; check value
  check_value = 0.

;-----------
; program 
;-----------

;*** read variables, ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/addfiles.shtml , Ex2
  infiles = addfiles( infilenames , "r" )
  ListSetType (infiles, "join")       
  varvar_all = infiles[:]->\$var_name\$ 
;printVarSummary(varvar_all)

;*** set base state variables ***
  filename_base = infilenames
  filename_base = infilenames(0)
  basefiles = addfiles( filename_base , "r" )
  ListSetType (basefiles, "join")       
  varvar_base = basefiles[:]->\$var_name\$ 
;printVarSummary(varvar_base)

;*** compute difference ***
  varvar_diff = diff(varvar_all , varvar_base)
;printVarSummary(varvar_diff)

;*** print value ***
  dims = dimsizes(varvar_diff)
  nfile = dims(0)
  string1 = ""
;printVarSummary(string1)
print(infilenames)
print("")

  ; variable dimension is (file,time,lat,lon)
  if ( dimsizes(dims) .eq. 4 ) then  
    ntime = dims(1)
    nlat  = dims(2)
    nlon  = dims(3)

    do t=0,ntime-1
    do j=0,nlat-1
    do i=0,nlon-1
      if (any(varvar_diff(:,t,j,i).ne.check_value)) then
        string1 = ""
        do f=0,nfile-1
          string1 = string1+" "+tostring(varvar_diff(f,t,j,i))+", "
        end do

        print("not equal to "+check_value+", t="+t+", j="+j+", i="+i+", diff="+string1)
      end if
    end do
    end do
    end do

  ; variable dimension is (file,time,lev,lat,lon)
  else if ( dimsizes(dims) .eq. 5 ) then  
    ntime = dims(1)
    nlev  = dims(2)
    nlat  = dims(3)
    nlon  = dims(4)

    do t=0,ntime-1
    do k=0,nlev-1
    do j=0,nlat-1
    do i=0,nlon-1
      if (any(varvar_diff(:,t,k,j,i).ne.check_value)) then
        string1 = ""
        do f=0,nfile-1
          string1 = string1+" "+tostring(varvar_diff(f,t,k,j,i))+", "
        end do

        print("not equal to "+check_value+", t="+t+", k="+k+", j="+j+", i="+i+", diff="+string1)
      end if
    end do
    end do
    end do
    end do
  end if
  end if


print(infilenames)
EOF
#*** case: "nc-compare-var" end ***

#*** case: "cesm-massflux_siglvl-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-massflux_siglvl-2files" ]; then
cat >> $ncl_name << EOF

;--------------
; open files
;--------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
  CMFMCDZM_${suffix01} = file_${suffix01}->CMFMCDZM 

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa
  CMFMCDZM_${suffix02} = file_${suffix02}->CMFMCDZM 

;print(CMFMCDZM_${suffix01})

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

  ;plev = (/900./)
  plev = (/850./)
  ;plev = (/800./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

  CMFMCDZM_plev_${suffix01} = vinth2p(CMFMCDZM_${suffix01}, hyai_${suffix01}, hybi_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
  copy_VarAtts(CMFMCDZM_${suffix01}, CMFMCDZM_plev_${suffix01})

  CMFMCDZM_plev_${suffix02} = vinth2p(CMFMCDZM_${suffix02}, hyai_${suffix02}, hybi_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)
  copy_VarAtts(CMFMCDZM_${suffix02}, CMFMCDZM_plev_${suffix02})

  mflx850_${suffix01} = multiply(CMFMCDZM_plev_${suffix01}(:,0,:,:) , 86400.)
  mflx850_${suffix02} = multiply(CMFMCDZM_plev_${suffix02}(:,0,:,:) , 86400.)

  mflx850_${suffix01}@units = "kg/m2/day"
  mflx850_${suffix02}@units = mflx850_${suffix01}@units

  mflx850_${suffix01}_avg = dim_avg_n_Wrap(mflx850_${suffix01},0)
  mflx850_${suffix02}_avg = dim_avg_n_Wrap(mflx850_${suffix02},0)

;print(mflx850_${suffix02})

;-------------
; do t-test
;-------------
  prob = mflx850_${suffix01}_avg
  prob@long_name = "significance level"
  prob@units = "NONE"

  dim = dimsizes(mflx850_${suffix01})
  nlat = dim(1)
  nlon = dim(2)

  do j=0,nlat-1
  do i=0,nlon-1
    xtmp = mflx850_${suffix01}(:,j,i)
    ytmp = mflx850_${suffix02}(:,j,i)
  
  ;*** compute time-average and variance ***
    xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
    yAve = dim_avg_Wrap (ytmp)
    xVar = dim_variance_Wrap (xtmp)         ; calculate variances
    yVar = dim_variance_Wrap (ytmp)
  
  ;*** get size ***
    xN = dimsizes(xtmp)
    yN = dimsizes(ytmp)

    siglvl = 0.05                      ; critical sig lvl for r
    iflag= False
    prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
  end do
  end do

  alpha = prob
  alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2
  siglev = 100.*(1.-siglvl)

;----------
; plot var
;----------
  var1 = mflx850_${suffix02}_avg
  var1_diff = diff(mflx850_${suffix01}_avg , mflx850_${suffix02}_avg)
  var2 = alpha

;printVarSummary(var1)
;printVarSummary(var1_diff)

;*** if the input file is not over the globe, e.g. only in Africa ***
;; adjust lon value
;  lon = mflx850_${suffix02}&lon  
;  lon1 = lon
;  nlon = dimsizes(lon)
;  do i=0,nlon-1
;    if (lon(i).gt.180.) then
;      lon1(i) = lon(i) - 360.
;    end if
;  end do
;
;  var1&lon = lon1
;  var1_diff&lon = lon1
;  var2&lon = lon1

;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-massflux_deep_conv-siglvl-"+plev+"hpa-"+"${suffix01}_${suffix02}"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
  res@mpLimitMode = "LatLon"
  res@mpMaxLatF = 40.
  res@mpMinLatF = -40.
  res@mpMaxLonF = 55.
  res@mpMinLonF = -20.

;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;
  res@mpFillOn = False

;*** res of mflx850 ***
  res_${suffix02} = res
  res_${suffix02}@cnLevelSelectionMode = "ManualLevels"
  res_${suffix02}@cnMinLevelValF = 200.
  res_${suffix02}@cnMaxLevelValF = 2000.
  res_${suffix02}@cnLevelSpacingF = 200.

  ;cmap_${suffix02} = read_colormap_file("CBR_coldhot")
  ;cmap_${suffix02} = cmap_${suffix02}(::-1,:) ; reverse the color map 
  ;res_${suffix02}@cnFillPalette = "gui_default" ;"amwg"
  res_${suffix02}@cnFillPalette = "amwg"
  res_${suffix02}@cnSpanFillPalette = True

  res_${suffix02}@tiMainString = "Black"
  res_${suffix02}@gsnLeftString = "ZM mass flux at "+plev+" hPa"

;*** res of mflx850 diff ***
  res_diff = res
  res_diff@cnFillDrawOrder = "predraw"

  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -30.
  res_diff@cnMaxLevelValF = 30.
  res_diff@cnLevelSpacingF = 5.

  ;cmap_diff = read_colormap_file("GMT_polar")
  ;cmap_diff = cmap_diff(::-1,:) ; reverse the color map 
  res_diff@cnFillPalette = "GMT_polar"
  res_diff@cnSpanFillPalette = True

  res_diff@tiMainString = "Emis minus Black"
  res_diff@gsnLeftString = "Diff of "+siglev+"% sig level"

  ;res_diff@cnFillPalette = "GMT_polar"
  ;res_diff@cnSpanFillPalette = True

;*** res of ttest ***
  res_sig = res
  ;res_sig@cnFillMode = "RasterFill"
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = True

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)
  ;res_sig@cnFillColors = (/0,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,6/)
  ;res_sig@cnFillPatterns = (/0,0/)
  res_sig@lbLabelBarOn = False

  res_sig@cnInfoLabelOn = False

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
  ;plot = gsn_csm_contour_map(wks,var2,res_sig)
  plot1 = gsn_csm_contour_map(wks,var1,res_${suffix02})
  plot2 = gsn_csm_contour_map_overlay(wks, var1_diff, var2, res_diff, res_sig)

  plot = new(2,"graphic")
  plot(0) = plot1
  plot(1) = plot2

;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
;plot = gsn_csm_pres_hgt(wks,cndata,res)
;plot = ignorant_contour(wks,cndata,res)

;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015
  gsn_panel(wks,plot,(/1,2/),resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-massflux_siglvl-2files" end ***

#*** case: "cesm-omega_siglvl-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-omega_siglvl-2files" ]; then
cat >> $ncl_name << EOF

;--------------
; open files
;--------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
  OMEGA_${suffix01} = file_${suffix01}->OMEGA 

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa
  OMEGA_${suffix02} = file_${suffix02}->OMEGA 

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

  plev = (/500./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

  OMEGA_plev_${suffix01} = vinth2p(OMEGA_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
  copy_VarAtts(OMEGA_${suffix01}, OMEGA_plev_${suffix01})

  OMEGA_plev_${suffix02} = vinth2p(OMEGA_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)
  copy_VarAtts(OMEGA_${suffix02}, OMEGA_plev_${suffix02})

  w500_${suffix01} = multiply(OMEGA_plev_${suffix01}(:,0,:,:) , 86400./100.)
  w500_${suffix02} = multiply(OMEGA_plev_${suffix02}(:,0,:,:) , 86400./100.)

  w500_${suffix01}@units = "hPa/day"
  w500_${suffix02}@units = w500_${suffix01}@units

  w500_${suffix01}_avg = dim_avg_n_Wrap(w500_${suffix01},0)
  w500_${suffix02}_avg = dim_avg_n_Wrap(w500_${suffix02},0)

;-------------
; do t-test
;-------------
  prob = w500_${suffix01}_avg
  prob@long_name = "significance level"
  prob@units = "NONE"

  dim = dimsizes(w500_${suffix01})
  nlat = dim(1)
  nlon = dim(2)

  do j=0,nlat-1
  do i=0,nlon-1
    xtmp = w500_${suffix01}(:,j,i)
    ytmp = w500_${suffix02}(:,j,i)
  
  ;*** compute time-average and variance ***
    xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
    yAve = dim_avg_Wrap (ytmp)
    xVar = dim_variance_Wrap (xtmp)         ; calculate variances
    yVar = dim_variance_Wrap (ytmp)
  
  ;*** get size ***
    xN = dimsizes(xtmp)
    yN = dimsizes(ytmp)

    siglvl = 0.05                      ; critical sig lvl for r
    iflag= False
    prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
  end do
  end do

  alpha = prob
  alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2
  siglev = 100.*(1.-siglvl)

;----------
; plot var
;----------
  var1 = w500_${suffix02}_avg
  var1_diff = diff(w500_${suffix01}_avg , w500_${suffix02}_avg)
  var2 = alpha

;printVarSummary(var1)
;printVarSummary(var1_diff)

;*** if input data not over the whole globe, e.g. only in africa ***
;; adjust lon value
;  lon = w500_${suffix02}&lon  
;  lon1 = lon
;  nlon = dimsizes(lon)
;  do i=0,nlon-1
;    if (lon(i).gt.180.) then
;      lon1(i) = lon(i) - 360.
;    end if
;  end do
;
;  var1&lon = lon1
;  var1_diff&lon = lon1
;  var2&lon = lon1

;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-w500_siglvl_africa-${suffix01}_${suffix02}"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
  res@mpLimitMode = "LatLon"
  res@mpMaxLatF = 40.
  res@mpMinLatF = -40.
  res@mpMaxLonF = 55.
  res@mpMinLonF = -20.

;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;
  res@mpFillOn = False

;*** res of w500 ***
  res_${suffix02} = res
  res_${suffix02}@cnLevelSelectionMode = "ManualLevels"
  res_${suffix02}@cnMinLevelValF = -40.
  res_${suffix02}@cnMaxLevelValF = 40.
  res_${suffix02}@cnLevelSpacingF = 10.

  cmap_${suffix02} = read_colormap_file("CBR_coldhot")
  cmap_${suffix02} = cmap_${suffix02}(::-1,:) ; reverse the color map 
  res_${suffix02}@cnFillPalette = cmap_${suffix02}
  res_${suffix02}@cnSpanFillPalette = True

  res_${suffix02}@tiMainString = "Black"
  res_${suffix02}@gsnLeftString = "W at 500 hPa"

;*** res of w500 diff ***
  res_diff = res
  res_diff@cnFillDrawOrder = "predraw"

  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -5.
  res_diff@cnMaxLevelValF = 5.
  res_diff@cnLevelSpacingF = 1.

  cmap_diff = read_colormap_file("GMT_polar")
  cmap_diff = cmap_diff(::-1,:) ; reverse the color map 
  res_diff@cnFillPalette = cmap_diff
  res_diff@cnSpanFillPalette = True

  res_diff@tiMainString = "Emis minus Black"
  res_diff@gsnLeftString = "W500 diff at "+siglev+"% level"

  ;res_diff@cnFillPalette = "GMT_polar"
  ;res_diff@cnSpanFillPalette = True

;*** res of ttest ***
  res_sig = res
  ;res_sig@cnFillMode = "RasterFill"
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = True

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)
  ;res_sig@cnFillColors = (/0,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,6/)
  ;res_sig@cnFillPatterns = (/0,0/)
  res_sig@lbLabelBarOn = False

  res_sig@cnInfoLabelOn = False

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
  ;plot = gsn_csm_contour_map(wks,var2,res_sig)
  plot1 = gsn_csm_contour_map(wks,var1,res_${suffix02})
  plot2 = gsn_csm_contour_map_overlay(wks, var1_diff, var2, res_diff, res_sig)

  plot = new(2,"graphic")
  plot(0) = plot1
  plot(1) = plot2

;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
;plot = gsn_csm_pres_hgt(wks,cndata,res)
;plot = ignorant_contour(wks,cndata,res)

;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015
  gsn_panel(wks,plot,(/1,2/),resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-omega_siglvl-2files" end ***

#*** case: "cesm-prec_siglvl-2files" start ***
elif [ $casename_work -a $casename_work == "cesm-prec_siglvl-2files" ]; then
cat >> $ncl_name << EOF

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

; ${suffix01} experiment
  precc1_${suffix01} = file_${suffix01}->PRECC
  precl1_${suffix01} = file_${suffix01}->PRECL

  precc_${suffix01} = multiply(precc1_${suffix01}, 86400.*1000.)
  precc_${suffix01}@units = "mm/day"

  precl_${suffix01} = multiply(precl1_${suffix01}, 86400.*1000.)
  precl_${suffix01}@units = "mm/day"

; ${suffix02} experiment
  precc1_${suffix02} = file_${suffix02}->PRECC
  precl1_${suffix02} = file_${suffix02}->PRECL

  precc_${suffix02} = multiply(precc1_${suffix02}, 86400.*1000.)
  precc_${suffix02}@units = "mm/day"

  precl_${suffix02} = multiply(precl1_${suffix02}, 86400.*1000.)
  precl_${suffix02}@units = "mm/day"

;*** working var ***
  var_${suffix01} = precc_${suffix01}
  var_${suffix02} = precc_${suffix02}
  var_${suffix01}_avg = dim_avg_n_Wrap(var_${suffix01},0)
  var_${suffix02}_avg = dim_avg_n_Wrap(var_${suffix02},0)

;-------------
; do t-test
;-------------
  prob = var_${suffix01}_avg
  prob@long_name = "significance level"
  prob@units = "NONE"

  dim = dimsizes(var_${suffix01})
  nlat = dim(1)
  nlon = dim(2)

  do j=0,nlat-1
  do i=0,nlon-1
    xtmp = var_${suffix01}(:,j,i)
    ytmp = var_${suffix02}(:,j,i)

  ;*** compute time-average and variance ***
    xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
    yAve = dim_avg_Wrap (ytmp)
    xVar = dim_variance_Wrap (xtmp)         ; calculate variances
    yVar = dim_variance_Wrap (ytmp)

  ;*** get size ***
    xN = dimsizes(xtmp)
    yN = dimsizes(ytmp)

    siglvl = 0.05                      ; critical sig lvl for r
    iflag= False
    prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
  end do
  end do

  alpha = prob
  alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2
  siglev = 100.*(1.-siglvl)

;----------
; plot var
;----------
  var1 = var_${suffix02}_avg   ; left panel
  var1_diff = diff(var_${suffix01}_avg , var_${suffix02}_avg)  ; right panel
  var2 = alpha                                    ; overlay significance to right panel

;*** if input data not over the whole globe, e.g. only in africa ***
;  lon = var_${suffix02}&lon
;  lon1 = lon
;  nlon = dimsizes(lon)
;  do i=0,nlon-1
;    if (lon(i).gt.180.) then
;      lon1(i) = lon(i) - 360.
;    end if
;  end do
;  var1&lon = lon1
;  var1_diff&lon = lon1
;  var2&lon = lon1

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;

  option_foreback = False
  cmap1 = ignorant_select_colormap("precip_diff_12lev",(/2,3,4,5,6,7,8,8,9,10,11,12,13,14/),option_foreback)

;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-precc_siglvl_africa-${suffix02}_${suffix01}"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"precip2_17lev")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
  res@mpLimitMode = "LatLon"
  res@mpMaxLatF = 40.
  res@mpMinLatF = -40.
  res@mpMaxLonF = 55.
  res@mpMinLonF = -20.

;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;
  res@mpFillOn = False

;*** res of w500 ***
  res_${suffix02} = res
  ;res_${suffix02}@cnLevelSelectionMode = "ManualLevels"
  ;res_${suffix02}@cnMinLevelValF = 0.5
  ;res_${suffix02}@cnMaxLevelValF = 8.
  ;res_${suffix02}@cnLevelSpacingF = 0.5

  res_${suffix02}@cnLevelSelectionMode = "ExplicitLevels"
  res_${suffix02}@cnLevels = (/0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.,1.5,2.,2.5,3.,3.5,4.,4.5,5./)
  res_${suffix02}@cnFillPalette = "precip2_17lev"

  res_${suffix02}@tiMainString = "Black"
  res_${suffix02}@gsnLeftString = "Conv Prec"

;*** res of w500 diff ***
  res_diff = res
  res_diff@cnFillDrawOrder = "predraw"

  res_diff@cnLevelSelectionMode = "ExplicitLevels"
  res_diff@cnLevels = 0.5*(/-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0.,0.1,0.2,0.3,0.4,0.5,0.6/)
  res_diff@cnFillPalette = cmap1
  res_diff@cnSpanFillPalette = False

  res_diff@tiMainString = "Emis minus Black"
  ;res_diff@gsnLeftString = "Conv Prec Diff"
  res_diff@gsnLeftString = "Conv Prec Diff at "+siglev+"% level"

  ;res_diff@cnFillPalette = "GMT_polar"
  ;res_diff@cnSpanFillPalette = True

;*** res of ttest ***
  res_sig = res
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = True

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,6/)
  res_sig@lbLabelBarOn = False

  res_sig@cnInfoLabelOn = False

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
  ;plot = gsn_csm_contour_map(wks,var2,res_sig)
  plot1 = gsn_csm_contour_map(wks,var1,res_${suffix02})
  plot2 = gsn_csm_contour_map_overlay(wks, var1_diff, var2, res_diff, res_sig)

  plot = new(2,"graphic")
  plot(0) = plot1
  plot(1) = plot2
;
  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015
  gsn_panel(wks,plot,(/1,2/),resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-prec_siglvl-2files" end ***

#*** case: "cesm-regrid_2files-CERES_EBAF" start ***
elif [ $casename_work -a $casename_work == "cesm-regrid_2files-CERES_EBAF" ]; then
cat >> $ncl_name << EOF

;-------------
; open files
;-------------

  filename_ceres = ""

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_ceres = addfile (filename_ceres ,"r" )
 
  varvar = "FLUT"
  varvar_${suffix01} = file_${suffix01}->\$varvar\$ (0,:,:)
  varvar_${suffix02} = file_${suffix02}->\$varvar\$  (0,:,:)
  lon_${suffix01}   = file_${suffix01}->lon
  lat_${suffix01}   = file_${suffix01}->lat

  varvar_ceres = file_ceres->rlut (0,:,:) ; TOA Outgoing Longwave Radiation
  lon_ceres = file_ceres->lon
  lat_ceres = file_ceres->lat

;print(lat_ceres)
;print(lon_ceres)
;printVarSummary()

;---------------
; post process
;---------------

  ;*** regrid_2files CERES data to fit CESM ***
  fiCyclicX = True
  foOption  = 0
  varvar_ceres_regrid_2files = linint2_Wrap(lon_ceres, lat_ceres, varvar_ceres, fiCyclicX, lon_${suffix01}, lat_${suffix01}, foOption)

;printVarSummary(varvar_ceres_regrid_2files)
;printVarSummary(varvar_ceres)
;printVarSummary(varvar_${suffix01})

  varvar_${suffix01}_ceres = diff(varvar_${suffix01}, tofloat(varvar_ceres_regrid_2files))
  varvar_${suffix02}_ceres = diff(varvar_${suffix02}, tofloat(varvar_ceres_regrid_2files))
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  ;wks_name = "fig-lwup_toa-climo-both_${suffix02}-CERES_EBAF"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.

;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
  res@gsnLeftString = "TOA all-sky OLR"
  res@gsnRightString = "W m-2"

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "CESM1.1.1_F2000_10years - ${suffix01}_Sahara_Sahel"
  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
  res_${suffix01}@cnMinLevelValF = 210.
  res_${suffix01}@cnMaxLevelValF = 300.
  res_${suffix01}@cnLevelSpacingF = 10.

  ;res_${suffix01}@cnFillPalette = cmap_lwtoa
  ;res_${suffix01}@cnSpanFillPalette = False

;  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
;  res_${suffix01}@cnMinLevelValF = 280.
;  res_${suffix01}@cnMaxLevelValF = 310.
;  res_${suffix01}@cnLevelSpacingF = 2.
;
;  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
;  res_${suffix01}@cnLevels = (//)
  res_${suffix01}@cnFillPalette = "CBR_wet"
  res_${suffix01}@cnSpanFillPalette = True

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"
  res_${suffix01}@tiMainString = "${suffix01}"

;*** res for ceres ***
  res_ceres = res_${suffix01}
  res_ceres@tiMainString = "CERES_EBAF 2000/03-2016/01 climatology"

;*** res for ${suffix02} ***
  res_diff = res
  ;res_diff@gsnLeftString = "2 meter temperature"

  ;res_diff@cnLevelSelectionMode = "ExplicitLevels"
  ;res_diff@cnLevels = (/-50.,-40.,-30.,-20.,-10.,-5.,0.,5.,10.,20./)
  ;res_diff@cnFillPalette = cmap_lwtoa_diff
  ;res_diff@cnSpanFillPalette = False

  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -30.
  res_diff@cnMaxLevelValF = 30.
  res_diff@cnLevelSpacingF = 5.
;
;  res_diff@cnLevelSelectionMode = "ExplicitLevels"
;  res_diff@cnLevels = (//)

  cmap_name = "GMT_polar"
  cmap_values = read_colormap_file(cmap_name)
  cmap_values = cmap_values(::-1,:)
  res_diff@cnFillPalette = cmap_values
  res_diff@cnSpanFillPalette = True


;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;
;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}, res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}, res_${suffix02})
  plot_varvar_ceres  = gsn_csm_contour_map (wks, varvar_ceres, res_ceres)

  ;res_ceres@tiMainString = "ceres_regrid_2files"
  ;res_ceres@tiMainString = "ERA-Interim 1979/01-2015/12 climatology"
  plot_varvar_ceres_regrid_2files  = gsn_csm_contour_map (wks, varvar_ceres_regrid_2files, res_ceres)

  res_diff@tiMainString = "${suffix01} minus CERES"
  plot_varvar_${suffix01}_ceres = gsn_csm_contour_map (wks, varvar_${suffix01}_ceres, res_diff)

  res_diff@tiMainString = "${suffix02} minus CERES"
  plot_varvar_${suffix02}_ceres = gsn_csm_contour_map (wks, varvar_${suffix02}_ceres, res_diff)
  
  
  plot_varvar = new (6,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_ceres
  plot_varvar(3) = plot_varvar_ceres_regrid_2files
  plot_varvar(4) = plot_varvar_${suffix01}_ceres
  plot_varvar(5) = plot_varvar_${suffix02}_ceres

  resp = True
  resp@gsnPanelRowSpec = True

  plot_panel = plot_varvar(3:5)   ; plot CERES and difference of CESMs
  gsn_panel(wks, plot_panel, (/1,2/), resp)

  ;plot_panel = plot_varvar(0:3)  ; plot CESM and CERES
  ;gsn_panel(wks, plot_panel, (/2,2/), resp)
;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-regrid_2files-CERES_EBAF" end ***

#*** case: "cesm-regrid_2files-ERAIN_ts" start ***
elif [ $casename_work -a $casename_work == "cesm-regrid_2files-ERAIN_ts" ]; then
cat >> $ncl_name << EOF

;-------------
; open files
;-------------

  filename_erain = ""

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_erain = addfile ( filename_erain , "r" )
 
  varvar = "TS"
  varvar_${suffix01} = file_${suffix01}->\$varvar\$ (0,:,:)
  varvar_${suffix02} = file_${suffix02}->\$varvar\$  (0,:,:)
  lon_${suffix01}   = file_${suffix01}->lon
  lat_${suffix01}   = file_${suffix01}->lat

  varvar_erain = file_erain->skt (0,:,:) ; skin temperature
  lon_erain = file_erain->longitude
  lat_erain = file_erain->latitude

;print()
;printVarSummary()

;---------------
; post process
;---------------

  ;*** regrid ERAIN data ***
  fiCyclicX = True
  foOption  = 0
  varvar_erain_regrid = linint2_Wrap(lon_erain, lat_erain(::-1), varvar_erain(::-1,:), fiCyclicX, lon_${suffix01}, lat_${suffix01}, foOption)

;print(lon_erain)
;print(lat_erain)
;print(lon_${suffix01})
;print(lat_${suffix01})

;printVarSummary(varvar_erain_regrid)
;printVarSummary(varvar_${suffix01})

  varvar_${suffix01}_erain = diff(varvar_${suffix01}, tofloat(varvar_erain_regrid))
  varvar_${suffix02}_erain = diff(varvar_${suffix02}, tofloat(varvar_erain_regrid))
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
;  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
;  res_${suffix01}@cnMinLevelValF = 
;  res_${suffix01}@cnMaxLevelValF = 
;  res_${suffix01}@cnLevelSpacingF = 
;
;  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
;  res_${suffix01}@cnLevels = (//)
  res_${suffix01}@cnFillPalette = "NCV_jet"
  res_${suffix01}@cnSpanFillPalette = True

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for erain ***
  res_erain = res_${suffix01}
  res_erain@tiMainString = "erain"

;*** res for ${suffix02} ***
  res_diff = res
  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -10.
  res_diff@cnMaxLevelValF = 10.
  res_diff@cnLevelSpacingF = 1.
;
;  res_diff@cnLevelSelectionMode = "ExplicitLevels"
;  res_diff@cnLevels = (//)
  res_diff@cnFillPalette = "GMT_polar"
  res_diff@cnSpanFillPalette = True


;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}, res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}, res_${suffix02})
  plot_varvar_erain  = gsn_csm_contour_map (wks, varvar_erain, res_erain)

  res_erain@tiMainString = "erain_regrid"
  plot_varvar_erain_regrid  = gsn_csm_contour_map (wks, varvar_erain_regrid, res_erain)

  res_diff@tiMainString = "${suffix01} minus erain"
  plot_varvar_${suffix01}_erain = gsn_csm_contour_map (wks, varvar_${suffix01}_erain, res_diff)

  res_diff@tiMainString = "${suffix02} minus erain"
  plot_varvar_${suffix02}_erain = gsn_csm_contour_map (wks, varvar_${suffix02}_erain, res_diff)
  
  
  plot_varvar = new (6,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_erain
  plot_varvar(3) = plot_varvar_erain_regrid
  plot_varvar(4) = plot_varvar_${suffix01}_erain
  plot_varvar(5) = plot_varvar_${suffix02}_erain

  resp = True
  resp@gsnPanelRowSpec = True

  plot_panel = plot_varvar(3:5)   ; plot ERAIN and difference
  gsn_panel(wks, plot_panel, (/1,2/), resp)

  ;plot_panel = plot_varvar(0:3)  ; plot ERAIN and CESM
  ;gsn_panel(wks, plot_panel, (/2,2/), resp)
;
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)



EOF
#*** case: "cesm-regrid_2files-ERAIN_ts" end ***

#*** case: "cesm-regrid_2files-ERAIN_w500" start ***
elif [ $casename_work -a $casename_work == "cesm-regrid_2files-ERAIN_w500" ]; then
cat >> $ncl_name << EOF

;--------------
; open files
;--------------

  filename_erain = ""

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_erain = addfile ( filename_erain , "r" )

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
  OMEGA_${suffix01} = file_${suffix01}->OMEGA 
  lon_${suffix01}   = file_${suffix01}->lon
  lat_${suffix01}   = file_${suffix01}->lat

  hyai_${suffix02} = file_${suffix02}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix02} = file_${suffix02}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix02} = file_${suffix02}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix02} = file_${suffix02}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix02}   = file_${suffix02}->PS        ; surface pressures  in Pa
  p0_${suffix02}   = file_${suffix02}->P0        ; reference pressure in Pa
  OMEGA_${suffix02} = file_${suffix02}->OMEGA 

  lon_erain = file_erain->longitude
  lat_erain = file_erain->latitude
  OMEGA_erain = file_erain->w(0,21,:,:)  ; vertical velocity at 500 hPa
  ;OMEGA_erain = tofloat(file_erain->w(0,21,:,:))
  w500_erain = multiply( OMEGA_erain, 86400./100.)
  w500_erain@units = "hPa/day"

;printVarSummary(OMEGA_erain)
;printVarSummary(w500_erain)

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

  plev = (/500./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

  OMEGA_plev_${suffix01} = vinth2p(OMEGA_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
  copy_VarAtts(OMEGA_${suffix01}, OMEGA_plev_${suffix01})

  OMEGA_plev_${suffix02} = vinth2p(OMEGA_${suffix02}, hyam_${suffix02}, hybm_${suffix02}, plev, ps_${suffix02}, 1, p0_${suffix02}/100., 1, False)
  copy_VarAtts(OMEGA_${suffix02}, OMEGA_plev_${suffix02})

  w500_${suffix01} = multiply(OMEGA_plev_${suffix01}(:,0,:,:) , 86400./100.)
  w500_${suffix02} = multiply(OMEGA_plev_${suffix02}(:,0,:,:) , 86400./100.)

  w500_${suffix01}@units = "hPa/day"
  w500_${suffix02}@units = w500_${suffix01}@units

  w500_${suffix01}_avg = dim_avg_n_Wrap(w500_${suffix01},0)
  w500_${suffix02}_avg = dim_avg_n_Wrap(w500_${suffix02},0)

  ;fiCyclicX = True
  fiCyclicX = False
  foOption  = 0
  w500_erain_regrid = linint2_Wrap(lon_erain, lat_erain(::-1), w500_erain(::-1,:), fiCyclicX, lon_${suffix01}, lat_${suffix01}, foOption)

;printVarSummary(w500_erain_regrid)
;printVarSummary(w500_${suffix01}_avg)
;printVarSummary(w500_${suffix02}_avg)

  varvar_${suffix01} = w500_${suffix01}_avg
  varvar_${suffix02} = w500_${suffix02}_avg
  varvar_erain = w500_erain
  varvar_erain_regrid = w500_erain_regrid

  varvar_${suffix01}_erain = diff(varvar_${suffix01}, tofloat(varvar_erain_regrid))
  varvar_${suffix02}_erain = diff(varvar_${suffix02}, tofloat(varvar_erain_regrid))

;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.

;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;
  res@mpFillOn = False

;*** res of w500 ***
  res_${suffix02} = res
  res_${suffix02}@cnLevelSelectionMode = "ManualLevels"
  res_${suffix02}@cnMinLevelValF = -40.
  res_${suffix02}@cnMaxLevelValF = 40.
  res_${suffix02}@cnLevelSpacingF = 10.

  cmap_${suffix02} = read_colormap_file("CBR_coldhot")
  cmap_${suffix02} = cmap_${suffix02}(::-1,:) ; reverse the color map 
  res_${suffix02}@cnFillPalette = cmap_${suffix02}
  res_${suffix02}@cnSpanFillPalette = True

  res_${suffix02}@tiMainString = "${suffix02}"
  res_${suffix02}@gsnLeftString = "W at 500 hPa"

  res_${suffix01} = res_${suffix02}
  res_${suffix01}@tiMainString = "${suffix01}"

  res_erain = res_${suffix02}
  res_erain@tiMainString = "ERAIN"

;*** res of w500 diff ***
  res_diff = res
  res_diff@cnFillDrawOrder = "predraw"

  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -16.
  res_diff@cnMaxLevelValF = 16.
  res_diff@cnLevelSpacingF = 2.

  cmap_diff = read_colormap_file("GMT_polar")
  cmap_diff = cmap_diff(::-1,:) ; reverse the color map 
  res_diff@cnFillPalette = cmap_diff
  res_diff@cnSpanFillPalette = True

  res_diff@tiMainString = "${suffix01} minus ${suffix02}"
  res_diff@gsnLeftString = "W diff at 500 hPa"

  ;res_diff@cnFillPalette = "GMT_polar"
  ;res_diff@cnSpanFillPalette = True

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}, res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}, res_${suffix02})
  plot_varvar_erain  = gsn_csm_contour_map (wks, varvar_erain, res_erain)

  res_erain@tiMainString = "ERA-Interim 1979/01-2015/12 climatology"
  ;res_erain@tiMainString = "erain_regrid"
  plot_varvar_erain_regrid  = gsn_csm_contour_map (wks, varvar_erain_regrid, res_erain)

  res_diff@tiMainString = "${suffix01} minus ERAIN"
  plot_varvar_${suffix01}_erain = gsn_csm_contour_map (wks, varvar_${suffix01}_erain, res_diff)

  res_diff@tiMainString = "${suffix02} minus ERAIN"
  plot_varvar_${suffix02}_erain = gsn_csm_contour_map (wks, varvar_${suffix02}_erain, res_diff)


  plot_varvar = new (6,"graphic")
  plot_varvar(0) = plot_varvar_${suffix02}
  plot_varvar(1) = plot_varvar_${suffix01}
  plot_varvar(2) = plot_varvar_erain
  plot_varvar(3) = plot_varvar_erain_regrid
  plot_varvar(4) = plot_varvar_${suffix01}_erain
  plot_varvar(5) = plot_varvar_${suffix02}_erain

  resp = True
  resp@gsnPanelRowSpec = True

  plot_panel = plot_varvar(3:5)   ; plot ERAIN and difference
  gsn_panel(wks, plot_panel, (/1,2/), resp)

  ;plot_panel = plot_varvar(0:3)  ; plot ERAIN and CESM
  ;gsn_panel(wks, plot_panel, (/2,2/), resp)

;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-regrid_2files-ERAIN_w500" end ***

#*** case: "cesm-regrid_2files-GPCP" start ***
elif [ $casename_work -a $casename_work == "cesm-regrid_2files-GPCP" ]; then
cat >> $ncl_name << EOF

;-------------
; open files
;-------------

  infilenames_gpcp = ""

; ${suffix01} experiment
  file_${suffix01} = addfile( "${file01}" , "r" )

  precc1_${suffix01} = file_${suffix01}->PRECC (0,:,:)
  prect1_${suffix01} = file_${suffix01}->PRECT (0,:,:)
  lon_${suffix01}   = file_${suffix01}->lon
  lat_${suffix01}   = file_${suffix01}->lat

  precc_${suffix01} = multiply(precc1_${suffix01}, 86400.*1000.)
  precc_${suffix01}@units = "mm/day"

  prect_${suffix01} = multiply(prect1_${suffix01}, 86400.*1000.)
  prect_${suffix01}@units = "mm/day"

; ${suffix02} experiment
  file_${suffix02} = addfile( "${file02}" , "r" )

  precc1_${suffix02} = file_${suffix02}->PRECC(0,:,:)
  prect1_${suffix02} = file_${suffix02}->PRECT(0,:,:)

  precc_${suffix02} = multiply(precc1_${suffix02}, 86400.*1000.)
  precc_${suffix02}@units = "mm/day"

  prect_${suffix02} = multiply(prect1_${suffix02}, 86400.*1000.)
  prect_${suffix02}@units = "mm/day"

; gpcp
  infile_gpcp = addf00ile( infilenames_gpcp , "r" )
  prect1_gpcp = infile_gpcp->precip
  lon_gpcp = infile_gpcp->lon
  lat_gpcp = infile_gpcp->lat

  prect_gpcp = dim_avg_n_Wrap(prect1_gpcp,0)
;printVarSummary(prect_gpcp)

;print()
;printVarSummary(precc)
;printVarSummary(prect_gpcp)

;---------------
; post process
;---------------

; regrid GPCP 2.5x2.5 to CESM 1.9x2.5
  fiCyclicX = True
  foOption  = 0
  prect_gpcp_regrid = linint2_Wrap(lon_gpcp, lat_gpcp(::-1), prect_gpcp(::-1,:), fiCyclicX, lon_${suffix01}, lat_${suffix01}, foOption)

  prect_${suffix01}_gpcp = diff(prect_${suffix01}, prect_gpcp_regrid)
  prect_${suffix02}_gpcp = diff(prect_${suffix02}, prect_gpcp_regrid)

;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------

  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"precip2_17lev")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  res_prec = res
  res_prec@cnLevelSelectionMode = "ManualLevels"
  res_prec@cnMinLevelValF = 1. 
  res_prec@cnMaxLevelValF = 17.
  res_prec@cnLevelSpacingF = 1.
  res_prec@cnFillPalette = "precip2_17lev"

  res_diff = res
  res_diff@cnLevelSelectionMode = "ManualLevels"
  res_diff@cnMinLevelValF = -3. 
  res_diff@cnMaxLevelValF = 3.
  res_diff@cnLevelSpacingF = 0.5
  res_diff@cnFillPalette = "precip_diff_12lev"

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------

  res_prec@tiMainString = "${suffix01}"
  plot_prect_${suffix01}  = gsn_csm_contour_map (wks, prect_${suffix01}, res_prec)

  res_prec@tiMainString = "${suffix02}"
  plot_prect_${suffix02}  = gsn_csm_contour_map (wks, prect_${suffix02}, res_prec)

  res_prec@tiMainString = "GPCP"
  plot_prect_gpcp  = gsn_csm_contour_map (wks, prect_gpcp, res_prec)

  res_prec@tiMainString = "GPCP regrid"
  plot_prect_gpcp_regrid  = gsn_csm_contour_map (wks, prect_gpcp_regrid, res_prec)

  res_diff@tiMainString = "${suffix01} minus GPCP"
  plot_prect_${suffix01}_gpcp = gsn_csm_contour_map (wks, prect_${suffix01}_gpcp, res_diff)

  res_diff@tiMainString = "${suffix02} minus GPCP"
  plot_prect_${suffix02}_gpcp = gsn_csm_contour_map (wks, prect_${suffix02}_gpcp, res_diff)

  plot_prect = new (6,"graphic")
  plot_prect(0) = plot_prect_${suffix02}
  plot_prect(1) = plot_prect_${suffix01}
  plot_prect(2) = plot_prect_gpcp
  plot_prect(3) = plot_prect_gpcp_regrid
  plot_prect(4) = plot_prect_${suffix01}_gpcp
  plot_prect(5) = plot_prect_${suffix02}_gpcp

  resp = True
  resp@gsnPanelRowSpec = True

  plot_panel = plot_varvar(3:5)   ; plot GPCP and difference
  gsn_panel(wks, plot_panel, (/1,2/), resp)

  ;plot_panel = plot_varvar(0:3)  ; plot GPCP and CESM
  ;gsn_panel(wks, plot_panel, (/2,2/), resp)
;
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015


;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-regrid_2files-GPCP" end ***

#*** case: "taylor-diagram" start ***
elif [ $casename_work -a $casename_work == "taylor-diagram" ]; then
cat >> $ncl_name << EOF
;**************************
; discription:
;  plot taylor diagram
;  ref: 1. http://www.ncl.ucar.edu/Applications/taylor.shtml
;       2. Karl E. Taylor, Summarizing multiple aspects of model performance in a single diagram, JGR, vol 106, no. D7, 7183-7192, April 16, 2001. 
;**************************

;-------------
; open files
;-------------

  fname_set1 = "${file01}"
  file_in = addfile(fname_set1 , "r")

  ${var01}_obs = file_in-> ;(ttt,:,:)
  ${var01}_${suffix01} = file_in-> ;(ttt,:,:)
  ${var01}_${suffix02} = file_in-> ;(ttt,:,:)

  lon = file_in->lon
  lat = file_in->lat

  pi = acos(-1.) 
  coslat = cos(lat/180.*pi)
;print(coslat)

;------
; post 
;------

; compute obs standard variation
  ${var01}_obs_stddev = stddev(${var01}_obs)

; compute case standard variation and correlation coefficient
  ${var01}_${suffix01}_stddev = stddev(${var01}_${suffix01})
  ${var01}_pattern_${suffix01} = pattern_cor(${var01}_${suffix01}, ${var01}_obs, 1.0, 0)
  ${var01}_nstddev_${suffix01} = divide(${var01}_${suffix01}_stddev,${var01}_obs_stddev)

  ${var01}_${suffix02}_stddev = stddev(${var01}_${suffix02})
  ${var01}_pattern_${suffix02} = pattern_cor(${var01}_${suffix02}, ${var01}_obs, 1.0, 0)
  ${var01}_nstddev_${suffix02} = divide(${var01}_${suffix02}_stddev,${var01}_obs_stddev)

;------------
; plot array
;------------

; Cases [Model]
  case      = (/ "${suffix01}", "${suffix02}" /) 
  nCase     = dimsizes(case )                 ; # of Cases [Cases]

; variables compared and sources
  var_source = (/"OLR-all sky_CERES-EBAF","OLR-clear sky_CERES-EBAF", "Total Prep_GPCP","Skin Temp_ERAIN","2M Temp_ERAIN","W500_ERAIN"/)
  nVar      = dimsizes(var_source)                   ; # of Variables

; "Case ${suffix01}"                        
  CA_ratio   = (/${var01}_nstddev_${suffix01}, ${var01}c_nstddev_${suffix01}, prect_nstddev_${suffix01}, ts_nstddev_${suffix01}, t2m_nstddev_${suffix01}, w500_nstddev_${suffix01}/)
  CA_cc      = (/${var01}_pattern_${suffix01}, ${var01}c_pattern_${suffix01}, prect_pattern_${suffix01}, ts_pattern_${suffix01}, t2m_pattern_${suffix01}, w500_pattern_${suffix01}/)

; "Case ${suffix02}" 
  CB_ratio   = (/${var01}_nstddev_${suffix02}, ${var01}c_nstddev_${suffix02}, prect_nstddev_${suffix02}, ts_nstddev_${suffix02}, t2m_nstddev_${suffix02}, w500_nstddev_${suffix02}/)
  CB_cc      = (/${var01}_pattern_${suffix02}, ${var01}c_pattern_${suffix02}, prect_pattern_${suffix02}, ts_pattern_${suffix02}, t2m_pattern_${suffix02}, w500_pattern_${suffix02}/)

; arrays to be passed to taylor_diagram. It will calculate the x xnd y coordinates.
  ratio      = new ((/nCase, nVar/),typeof(CA_cc) )  
  cc         = new ((/nCase, nVar/),typeof(CA_cc) ) 

  ratio(0,:) = CA_ratio 
  ratio(1,:) = CB_ratio

  cc(0,:)    = CA_cc 
  cc(1,:)    = CB_cc

;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;**********************************
; create plot
;**********************************
  varSource = var_source              ; add extra info [*not* required]

  ty_opt   = True                           ; taylor diagram with options
        
  ty_opt@Markers       = (/16, 16/)         ; make all solid fill
  ty_opt@Colors        = (/"red", "blue" /)          
  ty_opt@varLabels     = varSource
  ty_opt@caseLabels    = case

  ty_opt@varLabelsYloc = 1.5                ; Move location of variable labels [default 0.45]
  ty_opt@caseLabelsFontHeightF = 0.14       ; make slight larger   [default=0.12 ]
  ty_opt@varLabelsFontHeightF  = 0.011      ; make slight smaller  [default=0.013]
 
  ty_opt@tiMainString  = "Annual"           ; title
  ty_opt@stnRad        = (/ 0.5, 1.5 /)     ; additional standard radii
  ty_opt@ccRays        = (/ 0.6, 0.9 /)     ; correllation rays
  ty_opt@centerDiffRMS = True               ; RMS 'circles'

;                                  ; 'made-up' resources
; ty_opt@Colors          =  (/ "blue" , "red", "green", "cyan", "black" \
;                           , "turquoise", "brown", "yellow"/)
; ty_opt@Markers         =  (/ 2, 3, 6, 14, 9, 12, 7, 4/) ; Marker Indices
; ty_opt@markerTxOffset  = 0.0175   ; offset for text above marker
; ty_opt@stnRad          = (/ 1. /) ;  (/ 0.50, 0.75, 1.5 /) 
; ty_opt@centerDiffRMS   = False    ;  True mean draw additional radii from REF 
; ty_opt@caseLabelsFontHeightF = 0.05
; ty_opt@varLabelsFontHeightF  = 0.013
; ty_opt@varLabelsYloc         = 0.65
; ty_opt@legendWidth           = 0.015
; ty_opt@legendHeight          = 0.030*nCase
; ty_opt@taylorDraw            = True
; ty_opt@taylorFrame           = True


  plot  = taylor_diagram(wks,ratio,cc,ty_opt)

EOF
#*** case: "taylor-diagram" end ***

#*** case: "cesm-file-time_series" start ***
elif [ $casename_work -a $casename_work == "cesm-file-time_series" ]; then
cat >> $ncl_name << EOF
;----------------------------------------------------------
; description:
;   plot selceted variables of all time steps in a CESM file
;
;   filename can be given through command line
;     > ncl infile="filename" \$nclscript
;----------------------------------------------------------

;----------------------------------
; read variables from command line
;----------------------------------
  if (isvar("infile")) then           ; command line setting
      filename = infile               ; read from command line
  end if
  ;filename = "${file01}"

  wks_title  = "fig-cesm111-FC5-year2-ps_ts_pw_flnt"  ; plot name: wks_title+"yyyymmdd-hh"h
  main_title = "CESM1.1.1-FC5-year2"                  ; tiMainString: main_title+"yyyymmdd-hh"h

;-------------
; open files
;-------------
  ;filename = "./cesm111-FC5-year2.cam.h0.0002-01-01-10800.nc"
  file_${suffix01} = addfile( filename , "r" )

  date_${suffix01} = file_${suffix01}->date
  datesec_${suffix01} = file_${suffix01}->datesec

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa

  ts_${suffix01} = file_${suffix01}->TS
  flnt_${suffix01} = file_${suffix01}->FLNT
  q_${suffix01} = file_${suffix01}->Q

  ntime = dimsizes(date_${suffix01})

;*** interpolation and change units ***
;  plev = 850.
;  plev@long_name = "pressure"
;  plev@units     = "hPa"

;  q_plev_${suffix01} = vinth2p(q_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
;  copy_VarAtts(q_${suffix01}, q_plev_${suffix01})
;  q850_${suffix01} = q_plev_${suffix01}(:,0,:,:)
;
;  _${suffix01} = multiply(_${suffix01}, )
;  _${suffix01}@units = ""

;---------------
; post process
;---------------


;*** change units ***
  ps_${suffix01} = divide(ps_${suffix01}, 100.)
  ps_${suffix01}@units = "hPa"

  datehour_${suffix01} = divide(datesec_${suffix01},3600)

;*** compute precipitable water ***
  dp   = dpres_hybrid_ccm(ps_${suffix01},p0_${suffix01},hyai_${suffix01},hybi_${suffix01})   
; dp(ntime,nlev-1,nlat,nlon)
  dp!0 = "time"
  dp!1 = "lev"
  dp!2 = "lat"
  dp!3 = "lon"

  pw_${suffix01} = prcwater_dp(q_${suffix01}(time|:,lat|:,lon|:,lev|:),dp(time|:,lat|:,lon|:,lev|:))    
; pw [kg/m2]
  pw_${suffix01}@long_name = "total column precipitable water"
  pw_${suffix01}@units     = "kg/m2"

  copy_VarCoords(ps_${suffix01},pw_${suffix01})

;*** interpolation and change units ***
;  plev = 850.
;  plev@long_name = "pressure"
;  plev@units     = "hPa"

;  q_plev_${suffix01} = vinth2p(q_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
;  copy_VarAtts(q_${suffix01}, q_plev_${suffix01})
;  q850_${suffix01} = q_plev_${suffix01}(:,0,:,:)
;
;  _${suffix01} = multiply(_${suffix01}, )
;  _${suffix01}@units = ""

  num_var = 4
  var1 = ps_${suffix01}
  var2 = pw_${suffix01}
  var3 = ts_${suffix01}
  var4 = flnt_${suffix01}

;print()
;printVarSummary(var1)
;printVarSummary(var2)
;printVarSummary(var3)
;printVarSummary(var4)

;print(datehour_${suffix01})

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_${suffix01}lect_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_${suffix01}lect_colormap("standard",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
;  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"WhiteBlueGreenYellowRed")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_standard")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False

;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 2
;  res@gsnSpreadColorEnd = -1

;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = True 
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
;
;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

  res1 = res ; surface pressure 
  res1@cnLinesOn = True
  res1@cnLevelSelectionMode = "ManualLevels"
  res1@cnMinLevelValF = 800.
  res1@cnMaxLevelValF = 1040.
  res1@cnLevelSpacingF = 20.
  res1@cnFillPalette = "MPL_jet"
  ;res1@cnFillPalette = "BlueRed"
  ;res1@cnFillPalette = "cmp_b2r"
  ;res1@cnFillPalette = "MPL_rainbow"
  ;res1@cnFillPalette = "BlAqGrYeOrReVi200"

  res2 = res ; precipitable water
  res2@cnLevelSelectionMode = "ManualLevels"
  res2@cnMinLevelValF = 1.
  res2@cnMaxLevelValF = 15.
  res2@cnLevelSpacingF = 1.
  res2@cnFillPalette = "precip2_17lev"

  res3 = res ; surface temperature
  res3@cnLevelSelectionMode = "ManualLevels"
  res3@cnMinLevelValF = 220.
  res3@cnMaxLevelValF = 310.
  res3@cnLevelSpacingF = 10.
  res3@cnFillPalette = "WhiteBlueGreenYellowRed"

  res4 = res ; TOA net LW
  res4@cnLevelSelectionMode = "ManualLevels"
  res4@cnMinLevelValF = 100.
  res4@cnMaxLevelValF = 300.
  res4@cnLevelSpacingF = 20.
  res4@cnFillPalette = "MPL_gist_yarg"

  res5 = res
  res6 = res
  
;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
;plot = gsn_csm_contour_map(wks,cndata,res)
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
;plot = gsn_csm_pres_hgt(wks,cndata,res)
;plot = ignorant_contour(wks,cndata,res)

  plot_all = new (num_var,"graphic")

do tt = 0,ntime-1
;do tt = 0,0

  ;wks_name = wks_title+"-"+tostring(date_${suffix01})+"-"+sprinti("%2.2i",datehour_${suffix01})+"h"
  wks_name = wks_title+"-000"+tostring(date_${suffix01})+"-"+sprinti("%2.2i",datehour_${suffix01})+"h"
  main_string = main_title+" - 000"+tostring(date_${suffix01})+"-"+sprinti("%2.2i",datehour_${suffix01})+"h"

  print("plot "+wks_name(tt)+" ...")

;print(wks_name)
;print(main_string)

  wks = gsn_open_wks(wks_type , wks_name(tt))
  ;gsn_define_colormap(wks,"WhiteBlueGreenYellowRed")

  plot_all(0) = gsn_csm_contour_map (wks, var1(tt,:,:), res1) 
  plot_all(1) = gsn_csm_contour_map (wks, var2(tt,:,:), res2) 
  plot_all(2) = gsn_csm_contour_map (wks, var3(tt,:,:), res3) 
  plot_all(3) = gsn_csm_contour_map (wks, var4(tt,:,:), res4) 
  
;
  resp = True
  resp@gsnMaximize = True
  resp@txString = main_string(tt)

  row1    = 2  ; row number of panel plot
  column1 = 2  ; column number of panel plot
;  start1  = 0  ; start index of plots
;  end1    = 10 ; end index of plots 
;  stride1 = 1  ; stride of plots
  gsn_panel(wks,plot_all,(/row1,column1/),resp)
;  gsn_panel(wks,plot_all(start1:end1:stride1),(/row1,column1/),resp)
end do

;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpW_dthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)

EOF
#*** case: "cesm-file-time_series" end ***

#*** case: "rrtmg-contour-band_diff" start ***
elif [ $casename_work -a $casename_work == "rrtmg-contour-band_diff" ]; then
cat >> $ncl_name << EOF

;----------------------------------------------------------------
; description:
;   plot global contour of radiant flux difference of RRTMG_LW at 16 or 4 bands
;----------------------------------------------------------------

;-------------
; open files
;-------------

  band_name16  = (/"10-250 cm~S~-1", "250-500 cm~S~-1", "500-630 cm~S~-1", "630-700 cm~S~-1", \\
                "700-820 cm~S~-1", "820-980 cm~S~-1", "980-1080 cm~S~-1", "1080-1180 cm~S~-1", \\
                "1180-1390 cm~S~-1","1390-1480 cm~S~-1","1480-1800 cm~S~-1", "1800-2080 cm~S~-1", \\
                "2080-2250 cm~S~-1", "2250-2380 cm~S~-1","2380-2600 cm~S~-1","2600-3000 cm~S~-1" /)

  band_name04 = (/"10-630 cm~S~-1","630-820 cm~S~-1","820-1180 cm~S~-1","1180-3000 cm~S~-1"/)

  month = (/"01Jan", "02Feb", "03Mar", "04Apr", "05May", "06Jun", \\
            "07Jul", "08Aug", "09Sep", "10Oct", "11Nov", "12Dec"/)

  nband16 = dimsizes(band_name16)
  nband04 = dimsizes(band_name04)
  nmonth = dimsizes(month)

  file_${suffix01} = addfile( "${file01}" , "r" )
  ;nband = nband04
  nband = nband16

  varvar = "${var01}"

;do  mm = 0,1
do  mm = 0,nmonth-1
  ufluxs_${suffix01} = file_${suffix01}->\$varvar\$(mm,:,:,:)
  ;ufluxs_${suffix01} = file_${suffix01}->flntc_band(mm,:,:,:)

  titlestring = "TOA all-sky LW flux diff - surface types change (1990 minus 1850) - "+month(mm)

  if (nband .eq. 4) then
    wks_name = "fig-${suffix01}_cesm-toa_diff-lwup4band-suf_1990_1850-allsky-"+month(mm)
  else if (nband .eq. 16) then
    wks_name = "fig-${suffix01}_cesm-toa_diff-lwup16band-suf_1990_1850-allsky-"+month(mm)
  end if  
  end if  

  ;titlestring = "pp - "+month(mm)
  ;wks_name = "test111"+month(mm)

  if (nband .eq. 4) then

    ;*** plot var for 4 bands ***
    flbu_${suffix01}_band = ufluxs_${suffix01}(0:3,:,:)
    flbu_${suffix01}_band = 0.
    flbu_${suffix01}_band(0,:,:) = dim_sum_n_Wrap(ufluxs_${suffix01}(0:2,:,:) ,0)
    flbu_${suffix01}_band(1,:,:) = dim_sum_n_Wrap(ufluxs_${suffix01}(3:4,:,:) ,0)
    flbu_${suffix01}_band(2,:,:) = dim_sum_n_Wrap(ufluxs_${suffix01}(5:8,:,:) ,0)
    flbu_${suffix01}_band(3,:,:) = dim_sum_n_Wrap(ufluxs_${suffix01}(9:15,:,:),0)
    nband = 4
  
    var_band = flbu_${suffix01}_band
    var_sum = dim_sum_n_Wrap(var_band,0)

  else if (nband .eq. 16) then
  
    ;*** plot var for 16 bands ***
    var_band = ufluxs_${suffix01}
    var_sum = dim_sum_n_Wrap(var_band,0)
    nband = 16

  end if
  end if

printMinMax(var_sum,1)
;printVarSummary(var_band)

;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;

;-------------------
; set work station
;-------------------
  ;wks_name = "fig-${suffix01}_offline-toa-lwup4band-emis_${suffix01}_diff"
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True
  opt = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 160.
;  res@cnMaxLevelValF = 400.
;  res@cnLevelSpacingF = 20.
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (/0.1,0.5,1.,2.,5.,10.,15.,20.,25.,30.,35.,40.,45.,50/)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  res@cnFillPalette = cmap_lwtoa
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
  res@lbLabelBarOn = False
  ;res@lbLabelBarOn = True

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 40.
;  res@mpMinLatF = -40.
;  res@mpMaxLonF = 55.
;  res@mpMinLonF = -20.

;  res@mpFillOn = True
;  res@mpFillDrawOrder = "postdraw"
;  res@mpFillAreaSpecifiers = (/"water","land"/)
;  res@mpSpecifiedFillColors = (/0,-1/)

;*** set title string ***
;  res@tiMainString = "xiu - ${suffix01}"
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =

;*** res for band ***
  res_band = res
  res_band@cnLevelSelectionMode = "ExplicitLevels"
  ;;res_band@cnLevels = (/0.,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12./)
  ;res_band@cnLevels = (/0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.,2.,4.,6.,8.,10.,12./)
  ;res_band@cnLevels = (/-6.,-5.,-4.,-3.,-2.,-1.,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,-0.01, 0., \\
  ;                      0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.,2.,3.,4.,5.,6./)
  res_band@cnLevels = (/-6., -5., -4., -3., -2., -1., -0.8, -0.6, -0.4,-0.2, 0., \\
                        0.2, 0.4, 0.6, 0.8,  1.,  2.,   4.,   6.,   8., 10./) 

  ;;res_band@cnFillPalette = "WhiteBlue"
  ;res_band@cnFillPalette = "cmp_b2r"
  ;res_band@cnFillPalette = "NCV_blu_red"
  res_band@cnFillPalette = "ViBlGrWhYeOrRe"
  

  ;res_band@cnLevelSelectionMode = "ManualLevels"
  ;res_band@cnMinLevelValF = -3.
  ;res_band@cnMaxLevelValF = 3.
  ;res_band@cnLevelSpacingF = 0.5

  ;res_band@cnFillPalette = "GMT_polar"
  ;res_band@cnSpanFillPalette = True

;*** res_band for sum ***
  res_sum = res_band
  res_sum@gsnLeftString = "10-3000 cm~S~-1"

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar = new (nband+1,"graphic")

  plot_varvar(0) = gsn_csm_contour_map_avg(wks,var_sum,res_sum,opt)

  do i=0,nband-1
    i_plus = i+1
    res_band@gsnLeftString = band_name16(i)
    plot_varvar(i_plus) = gsn_csm_contour_map_avg(wks,var_band(i,:,:),res_band,opt)
  end do
;
  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
  resp@txString = titlestring
  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

  resp@gsnPanelLabelBar = True
  resp@lbOrientation = "horizontal"
  resp@pmLabelBarWidthF = 0.9
  ;resp@pmLabelBarParallelPosF = 0.1
  resp@pmLabelBarOrthogonalPosF = -0.005

  if (nband .eq. 16) then
    gsn_panel(wks, plot_varvar, (/1,4,4,4,4/), resp)
  else if (nband .eq. 4) then
    gsn_panel(wks, plot_varvar, (/1,2,2/), resp)
  end if
  end if

end do ; end do of monthes

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

;  gsn_panel(wks, plot_varvar, (/2,1/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)
;

EOF
#*** case: "rrtmg-contour-band_diff" end ***

#*** case: "cesm-contour-3files" start ***
elif [ $casename_work -a $casename_work == "cesm-contour-3files" ]; then
cat >> $ncl_name << EOF
;-----------------
; description:
;   plot a variable contour from 3 different CESM files
;   default plot: contout of [${suffix01}], and diff of [${suffix02},${suffix03}]
;-----------------

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )
  file_${suffix03} = addfile( "${file03}" , "r" )

  txstring = "" ; text on the panel plot
  varvar = ""    ; process variable
  plotname = "test111-"+varvar  ; plot name is plotname+"-step-"+t
  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

  varvar_${suffix01} = file_${suffix01}->\$varvar\$ ;(ttt,:,:)
  varvar_${suffix02} = file_${suffix02}->\$varvar\$ ;(ttt,:,:)
  varvar_${suffix03} = file_${suffix03}->\$varvar\$ ;(ttt,:,:)

  ;varvar_${suffix01} = multiply(varvar_${suffix01}, )
  ;varvar_${suffix02} = multiply(varvar_${suffix02}, )
  ;varvar_${suffix03} = multiply(varvar_${suffix03}, )

  ;varvar_${suffix01}@units = ""
  ;varvar_${suffix02}@units = varvar_${suffix01}@units
  ;varvar_${suffix03}@units = varvar_${suffix01}@units

  varvar_diff_${suffix02} = diff(varvar_${suffix02},varvar_${suffix01})
  varvar_diff_${suffix03} = diff(varvar_${suffix03},varvar_${suffix01})

;print()
;printVarSummary()

;---------------
; post process
;---------------
;
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;-------------------
; set work station
;-------------------
;  wks = gsn_open_wks(wks_type,wks_name)
;  gsn_define_colormap(wks,"WhBlGrYeRe")       ; select color table

;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;  res@gsnSpreadColorStart = 7
;  res@gsnSpreadColorEnd = 100           


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;

;*** res for ${suffix01} ***
  res_${suffix01} = res
  res_${suffix01}@tiMainString = "${suffix01}"
;  res_${suffix01}@cnLevelSelectionMode = "ManualLevels"
;  res_${suffix01}@cnMinLevelValF = 
;  res_${suffix01}@cnMaxLevelValF = 
;  res_${suffix01}@cnLevelSpacingF = 
;
;  res_${suffix01}@cnLevelSelectionMode = "ExplicitLevels"
;  res_${suffix01}@cnLevels = (//)

;*** res for ${suffix02} ***
  res_${suffix02} = res_${suffix01}
  res_${suffix02}@tiMainString = "${suffix02}"

;*** res for ${suffix03} ***
  res_${suffix03} = res_${suffix01}
  res_${suffix03}@tiMainString = "${suffix02}"

;*** res for ${suffix02} ***
  res_diff_${suffix02} = res
  res_diff_${suffix02}@tiMainString = "${suffix02} minus ${suffix01}"

  res_diff_${suffix03} = res
  res_diff_${suffix03}@tiMainString = "${suffix03} minus ${suffix01}"

;  res_diff@cnLevelSelectionMode = "ManualLevels"
;  res_diff@cnMinLevelValF = 
;  res_diff@cnMaxLevelValF = 
;  res_diff@cnLevelSpacingF = 
;
;  res_diff@cnLevelSelectionMode = "ExplicitLevels"
;  res_diff@cnLevels = (//)


;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)
  plot_varvar = new (3,"graphic")

do t=t1,t2
  dd = sprinti("%2.2i",t)
  wks_name = plotname+"-step-"+dd
  wks = gsn_open_wks(wks_type,wks_name)
  ;gsn_define_colormap(wks,"WhBlGrYeRe")       ; select color table
  ;gsn_define_colormap(wks,"WhiteBlueGreenYellowRed")       ; select color table
  gsn_define_colormap(wks,"amwg")       ; select color table

  plot_varvar_${suffix01}  = gsn_csm_contour_map (wks, varvar_${suffix01}(t,:,:), res_${suffix01})
  plot_varvar_${suffix02}  = gsn_csm_contour_map (wks, varvar_${suffix02}(t,:,:), res_${suffix02})
  plot_varvar_${suffix03}  = gsn_csm_contour_map (wks, varvar_${suffix03}(t,:,:), res_${suffix02})
  plot_varvar_diff_${suffix02} = gsn_csm_contour_map (wks, varvar_diff_${suffix02}(t,:,:), res_diff_${suffix02})
  plot_varvar_diff_${suffix03} = gsn_csm_contour_map (wks, varvar_diff_${suffix03}(t,:,:), res_diff_${suffix03})
  
  plot_varvar(0) = plot_varvar_${suffix01}
  plot_varvar(1) = plot_varvar_diff_${suffix02}
  plot_varvar(2) = plot_varvar_diff_${suffix03}
;
  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
  resp@txString = txstring
  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/1,2/), resp)
;  gsn_panel(wks, plot_varvar, (/1,3/), resp)
end do

;
;-----------------
; draw label bar
;-----------------
;
;*** label bar share res ***
;  lbres = True
;  lbres@lbPerimOn = False
;  lbres@lbMonoFillPattern = True
;  lbres@lbFillPattern = 0
;  lbres@lbLabelFontHeightF = 0.012
;  lbres@lbLabelAlignment     = "InteriorEdges"
;
;*** label bar res***
;  lbares = lbres
;  lbares@vpWidthF = 0.06
;  lbares@vpHeightF = 0.3
;  lbares@lbFillColors = cmap
;  lbares@lbOrientation = "vertical"
;  lbares@lbTitleString = ""
;  lbares@lbTitlePosition = "Right"
;  lbares@lbTitleFontHeightF = 0.01
;
;*** set label bar levels & strings
;  nlev_lba = dimsizes(res@cnLevels)
;  labels_lba = flt2string(res@cnLevels)
;
;*** draw label bar ***
;  lba_x = 0.92
;  lba_y = 0.75
;  gsn_labelbar_ndc(wks,nlev_lba+1,labels_lba,lba_x,lba_y,lbares)
;
;------------
; draw text
;------------
;
;  txres = True
;  txres@txFontHeightF = 0.014
;  txres@txJust = "CenterLeft"
;  txres@txFont = 25
;
;  tx_x = 0.913
;  tx_y = 0.43
;  gsn_text_ndc(wks,"",tx_x,tx_y,txres)
;
;-------
; frame
;-------
;  frame(wks)



EOF
#*** case: "cesm-contour-3files" end ***

#*** case: "cesm-cn_map-specified" start ***
elif [ $casename_work -a $casename_work == "cesm-cn_map-specified" ]; then

#*** set general ***
  cat >> $ncl_name << EOF
;-------------------
; general settings
;-------------------
  txstring = "" ; text on the panel plot
  varvars = (/${var01}/)    ; process variable
  nvar = dimsizes(varvars)  

  ;option_plot = "fig_1var_nfiles-name_nvars_nsteps"
  ;option_plot = "fig_nvars_1file-name_nfiles_nsteps"
  option_plot = "fig-1var_ntimes-name_nvars_nfiles"

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname + var + "-step-" + t

  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

EOF

  # input files
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( "${infile[$i]}" , "r" )
EOF
  done

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

#*** set changable parts of "fig_1var_nfiles-name_nvars_nsteps" ***
  cat >> $ncl_name << EOF

  ;*** "fig_1var_nfiles-name_nvars_nsteps" changable parts ***
EOF

  for (( i=0; i<${num_files}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  string_${suffix_work[$i]} = "${suffix_work[$i]}"  ; tiMainstring of each plot
EOF
  done

  echo "" >> $ncl_name

  for (( i=0; i<${num_files}; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
  string_${ss1} = string_${suffix_work[$i]}+" minus "+string_${suffix_work[$(($num_files-1))]} ; tiMainstring of each plot
EOF
  done

#*** set resources ***
  cat >> $ncl_name << EOF

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  res@cnFillPalette = "amwg"

  res_diff = res ; diff res

  opt  = True

  resp = True    ; panel res
  resp@txString = txstring

EOF

  cat >> $ncl_name << EOF
  ;*** "fig_1var_nfiles-name_nvars_nsteps" changable parts ***
EOF
  #*** file res ***
  #echo "res_${suffix_work[0]} = res" >> $ncl_name
#  i=0
#  cat >> $ncl_name << EOF
#  res_${suffix_work[$i]} = res
#  res_${suffix_work[$i]}@tiMainString = string_${suffix_work[$i]}
#
#EOF

  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  res_${suffix_work[$i]} = res
  res_${suffix_work[$i]}@tiMainString = string_${suffix_work[$i]}

EOF
  done

  #*** diff res ***
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
  res_${ss1} = res_diff
  res_${ss1}@tiMainString = string_${ss1}

EOF
  done

  cat >> $ncl_name << EOF
  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_diff_vars = res
EOF


  # write colormap
  cat $ncl_codes_colormap >> $ncl_name

  # write wks
  cat $ncl_codes_wks >> $ncl_name

  # write cn res
  cat $ncl_codes_cn >> $ncl_name 

#flagaa

#*** set plot function ***
  cat >> $ncl_name << EOF
;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

EOF

#-----------------------------------------------------------
#*** option_plot == "fig_1var_nfiles-name_nvars_nsteps" ***
#-----------------------------------------------------------

  cat >> $ncl_name << EOF
;----------------------------------------------------
; option_plot = "fig_1var_nfiles-name_nvars_nsteps"
;----------------------------------------------------

if ( option_plot .eq. "fig_1var_nfiles-name_nvars_nsteps" ) then
  plot_varvar = new ($num_files,"graphic")
EOF

#*** set variables ***
  cat >> $ncl_name << EOF

do vv=0,nvar-1 
  varvar = varvars(vv)
  print("process ["+varvar+"] ...")

EOF

  # read-in variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  varvar_${suffix_work[$i]} = file_${suffix_work[$i]}->\$varvar\$${dim_work}
EOF
  done

  # change values
  echo "" >> $ncl_name
  echo ";  nfactor =" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  varvar_${suffix_work[$i]} = multiply(varvar_${suffix_work[$i]} , nfactor)
EOF
  done

  # change units
  echo "" >> $ncl_name
  echo ";  varvar_${suffix_work[0]}@units = \"\"" >> $ncl_name

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  varvar_${suffix_work[$i]}@units = varvar_${suffix_work[0]}@units
EOF
  done

  # unit conversion 
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  varvar_${suffix_work[$i]} = unit_convert(varvar_${suffix_work[$i]} , "" , "")
EOF
  done

  # set difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
  varvar_${ss1} = diff(varvar_${suffix_work[$i]} , varvar_${suffix_work[$(($num_files-1))]})
EOF
  done

  cat >> $ncl_name << EOF

  do t=t1,t2
    dd = sprinti("%2.2i",t)
    wks_name = plotname+varvar+"-step-"+dd
    wks = gsn_open_wks(wks_type,wks_name)
  
    if (txstring .eq. "") then
      resp@txString = varvar+" - step-"+dd
    end if

EOF

  # plot each variable
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    plot_varvar_${suffix_work[$i]} = gsn_csm_contour_map (wks, varvar_${suffix_work[$i]}(t,:,:), res_${suffix_work[$i]})
EOF
  done
#
  echo "" >> $ncl_name

  # plot each diff variable
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
    plot_varvar_${ss1} = gsn_csm_contour_map (wks, varvar_${ss1}(t,:,:), res_${ss1})
EOF
  done

  # set panel plot varaibles
  cat >> $ncl_name << EOF

    plot_varvar(0) = plot_varvar_${suffix_work[$(($num_files-1))]}
EOF
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  i_plus=$(($i+1))
  cat >> $ncl_name << EOF
    plot_varvar($i_plus) = plot_varvar_${ss1}
EOF
  done

  cat >> $ncl_name << EOF

    resp@gsnPanelRowSpec = True
    gsn_panel(wks, plot_varvar, (/1,$(($num_files-1))/), resp)
    print("Done. Create ["+wks_name+"]")

  end do ; end do of time steps
  end do ; end do of varvar

end if ; end if of option_plot = "fig_1var_nfiles-name_nvars_nsteps"

EOF

#-----------------------------------------------------------
#*** option_plot = "fig_nvars_1file-name_nfiles_nsteps" ***
#-----------------------------------------------------------

  cat >> $ncl_name << EOF
;----------------------------------------------------
; option_plot = "fig_nvars_1file-name_nfiles_nsteps"
;----------------------------------------------------

if ( option_plot .eq. "fig_nvars_1file-name_nfiles_nsteps" ) then

  plot_varvar = new (nvar,"graphic")
EOF

  # set plot for each file
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar_${suffix_work[$i]} = new (nvar,"graphic")
EOF
  done

  # set plot for each difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar_${suffix_work[$i]}M${suffix_work[$(($num_files-1))]} = new (nvar,"graphic")
EOF
  done

  cat >> $ncl_name << EOF

  do t=t1,t2
    dd = sprinti("%2.2i",t)

EOF

  # set wks for each file
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    wks_name_${suffix_work[$i]} = plotname+"${suffix_work[$i]}-step-"+dd
    wks_${suffix_work[$i]} = gsn_open_wks(wks_type, wks_name_${suffix_work[$i]}) 

EOF
  done

  # set wks for each difference
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
    wks_name_${ss1} = plotname+"${ss1}-step-"+dd
    wks_$ss1 = gsn_open_wks(wks_type, wks_name_${ss1})

EOF
  done

  # set read variables
  cat >> $ncl_name << EOF

    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("process ["+varvar+"] ...")

EOF

  # read-in variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
      varvar_${suffix_work[$i]} = file_${suffix_work[$i]}->\$varvar\$${dim_work}
EOF
  done

  # change values
  echo "" >> $ncl_name
  echo "    ;  nfactor =" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]} = multiply(varvar_${suffix_work[$i]} , nfactor)
EOF
  done

  # change units
  echo "" >> $ncl_name
  echo "    ;  varvar_${suffix_work[0]}@units = \"\"" >> $ncl_name

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]}@units = varvar_${suffix_work[0]}@units
EOF
  done

  # unit conversion 
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]} = unit_convert(varvar_${suffix_work[$i]} , "" , "")
EOF
  done

  # set difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"

  cat >> $ncl_name << EOF
      varvar_$ss1 = diff(varvar_${suffix_work[$i]} , varvar_${suffix_work[$((num_files-1))]})
EOF
  done
  
  echo "" >> $ncl_name
  echo "      res_vars@tiMainString = varvar" >> $ncl_name

  # plot each variable
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}
  cat >> $ncl_name << EOF
      plot_varvar_${ss1}(vv) = gsn_csm_contour_map(wks_${ss1}, varvar_${ss1}(t,:,:), res_vars)
EOF
  done

  echo "" >> $ncl_name
  echo "      res_diff_vars@tiMainString = varvar" >> $ncl_name

  # plot each difference
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
      plot_varvar_${ss1}(vv) = gsn_csm_contour_map(wks_${ss1}, varvar_${ss1}(t,:,:), res_diff_vars)
EOF
  done

  echo "" >> $ncl_name
  # delete variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
      delete(varvar_${suffix_work[$i]})
EOF
  done

  # delete each difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}
  cat >> $ncl_name << EOF
      delete(varvar_$ss1)
EOF
  done

  cat >> $ncl_name << EOF
    end do ; end do of vars

    row1 = toint(sqrt(nvar))
    column1 = row1+1 
EOF

  echo "" >> $ncl_name
  # panel plot variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}
  cat >> $ncl_name << EOF
    resp@txString = "$ss1 - step"+dd
    gsn_panel(wks_$ss1, plot_varvar_$ss1, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_${ss1}+"]")

EOF
  done

  # panel plot each difference
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1=${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}
  ss2="${suffix_work[$i]} Minus ${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
    resp@txString = "$ss2 - step"+dd
    gsn_panel(wks_$ss1, plot_varvar_$ss1, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_${ss1}+"]")

EOF
  done

  cat >> $ncl_name << EOF
  end do  ; end do of time steps

end if ; end if of option_plot = "fig_nvars_1file-name_nfiles_nsteps"
EOF

#-----------------------------------------------------------
#*** option_plot = "fig-1var_ntimes-name_nvars_nfiles" ***
#-----------------------------------------------------------
  cat >> $ncl_name << EOF

;----------------------------------------------------
; option_plot = "fig-1var_ntimes-name_nvars_nfiles"
;----------------------------------------------------

if (option_plot .eq. "fig-1var_ntimes-name_nvars_nfiles")
  fdims = getfiledimsizes(file_set1)
  fdims_name = getvardims(file_set1)
  
  nfdim = dimsizes(fdims)
  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( t1 .gt. timemax .or. t1 .lt. 0 ) then
    t1 = 0
    t2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( t2 .gt. timemax ) then
    t2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if

  ntime  = t2-t1+1
  tcount = 0
  ;print(t1+" , "+t2)

EOF

  # set plot for each file
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar_${suffix_work[$i]} = new (ntime,"graphic")
EOF
  done

  # set plot for each difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar_${suffix_work[$i]}M${suffix_work[$(($num_files-1))]} = new (ntime,"graphic")
EOF
  done

  # set read variables
  cat >> $ncl_name << EOF

  do vv=0,nvar-1 
    varvar = varvars(vv)
    print("process ["+varvar+"] ...")

EOF

  # read-in variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    varvar_${suffix_work[$i]} = file_${suffix_work[$i]}->\$varvar\$${dim_work}
EOF
  done

  # change values
  echo "" >> $ncl_name
  echo "    ;  nfactor =" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]} = multiply(varvar_${suffix_work[$i]} , nfactor)
EOF
  done

  # change units
  echo "" >> $ncl_name
  echo "    ;  varvar_${suffix_work[0]}@units = \"\"" >> $ncl_name

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]}@units = varvar_${suffix_work[0]}@units
EOF
  done

  # unit conversion 
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    ;  varvar_${suffix_work[$i]} = unit_convert(varvar_${suffix_work[$i]} , "" , "")
EOF
  done

  # set difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"

  cat >> $ncl_name << EOF
    varvar_$ss1 = diff(varvar_${suffix_work[$i]} , varvar_${suffix_work[$((num_files-1))]})
EOF
  done
  
  echo "" >> $ncl_name
  # set wks for each file
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    wks_name_${suffix_work[$i]} = plotname+"${suffix_work[$i]}-"+varvar
    wks_${suffix_work[$i]} = gsn_open_wks(wks_type, wks_name_${suffix_work[$i]}) 

EOF
  done

  # set wks for each difference
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
    wks_name_${ss1} = plotname+"${ss1}-"+varvar
    wks_$ss1 = gsn_open_wks(wks_type, wks_name_${ss1})

EOF
  done

  cat >> $ncl_name << EOF
    tcount = 0

    do t=t1,t2
      dd = sprinti("%2.2i",t)
 
      res_vars@tiMainString = varvar+" - step-"+dd

EOF

  # plot each variable
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}
  cat >> $ncl_name << EOF
      plot_varvar_${ss1}(tcount) = gsn_csm_contour_map(wks_${ss1}, varvar_${ss1}(t,:,:), res_vars)
EOF
  done

  cat >> $ncl_name << EOF
      res_diff_vars@tiMainString = varvar+" - step-"+dd 

EOF

  # plot each difference
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1="${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
      plot_varvar_${ss1}(tcount) = gsn_csm_contour_map(wks_${ss1}, varvar_${ss1}(t,:,:), res_diff_vars)
EOF
  done

  cat >> $ncl_name << EOF

      tcount = tcount+1
    end do ; end do of time steps

    row1 = toint(sqrt(ntime))
    column1 = row1+1

EOF

#  # panel plot variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}
  cat >> $ncl_name << EOF
    resp@txString = "$ss1 - "+varvar
    gsn_panel(wks_$ss1, plot_varvar_$ss1, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_${ss1}+"]")

EOF
  done
#
#  # panel plot each difference
  for ((i=0; i<$num_files-1; i=i+1 ))
  do
  ss1=${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}
  ss2="${suffix_work[$i]} Minus ${suffix_work[$(($num_files-1))]}"
  cat >> $ncl_name << EOF
    resp@txString = "$ss2 - "+varvar
    gsn_panel(wks_$ss1, plot_varvar_$ss1, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_${ss1}+"]")

EOF
  done

  # delete variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    delete(varvar_${suffix_work[$i]})
EOF
  done
#
  # delete each difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  ss1=${suffix_work[$i]}M${suffix_work[$(($num_files-1))]}
  cat >> $ncl_name << EOF
    delete(varvar_$ss1)
EOF
  done

  cat >> $ncl_name << EOF

  end do ; end do of vars

end if ; end if of option_plot = "fig-1var_ntimes-name_nvars_nfiles"

EOF
  # write panel res
  #cat $ncl_codes_panel >> $ncl_name
#
#  cat >> $ncl_name << EOF
#  gsn_panel(wks, plot_varvar, (/1,$(($num_files-1))/), resp)
#  end do ; end do of time steps
#  end do ; end do of varvar
#end if ; end if of option_plot = "fig_1var_nfiles-name_nvars_nsteps"
#EOF

#*** case: "cesm-cn_map-specified" end ***

#*** case: "cesm-contour-vars" start ***
elif [ $casename_work -a $casename_work == "cesm-contour-vars" ]; then
cat >> $ncl_name << EOF
  txstring = "" ; text on the panel plot
  plotname = "test111"  ; plot name is plotname+"-step-"+t
  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

;----------------------------------------------------------
; description:
;   plot selceted variables of all time steps in a CESM file
;
;   filename can be given through command line
;     > ncl infile="filename" \$nclscript
;----------------------------------------------------------

;----------------------------------
; read variables from command line
;----------------------------------
;  if (isvar("infile")) then           ; command line setting
;      filename = infile               ; read from command line
;  end if
  filename = "${file01}"
  file_${suffix01} = addfile (filename , "r")

EOF

#*** set strings ***

  for (( i=0; i<${num_vars}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  string_${vname_work[$i]} = "${vname_work[$i]}"  ; tiMainstring of each plot
EOF
  done

#*** set resources ***
  cat >> $ncl_name << EOF

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  opt  = True

  resp = True    ; panel res
  resp@txString = txstring

EOF

  # wrtie each variable res
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  ;*** res for ${vname_work[$i]} ***
  res_${vname_work[$i]} = res
  res_${vname_work[$i]}@tiMainString = string_${vname_work[$i]}

EOF
  done

#*** set variables ***

  # interpolation variables
  cat >> $ncl_name << EOF

;-------------------
; read variables
;-------------------

  hyai_${suffix01} = file_${suffix01}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix01} = file_${suffix01}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix01} = file_${suffix01}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix01} = file_${suffix01}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix01}   = file_${suffix01}->PS        ; surface pressures  in Pa
  p0_${suffix01}   = file_${suffix01}->P0        ; reference pressure in Pa
EOF

  # read-in variables
  echo "" >> $ncl_name
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  ${vname_work[$i]}_${suffix01} = file_${suffix01}->${var[$i]}
EOF
  done

  # change values
  echo "" >> $ncl_name
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  ${vname_work[$i]}_${suffix01} = multiply(${vname_work[$i]}_${suffix01} , )
EOF
  done

  # change units
  echo "" >> $ncl_name
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  ${vname_work[$i]}_${suffix01}@units = ""
EOF
  done

  # interpolation
  cat >> $ncl_name << EOF

;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

  plev = (/850./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

EOF

# write interpolation part
  for ((i=0; i<$num_vars; i=i+1))
  do
    var01=${vname_work[$i]}
    cat >> $ncl_name << EOF
;  ${var01}_plev_${suffix01} = vinth2p(${var01}_${suffix01}, hyam_${suffix01}, hybm_${suffix01}, plev_${suffix01}, ps_${suffix01}, 1, p0_${suffix01}/100., 1, False)
;  copy_VarAtts(${var01}_${suffix01}, ${var01}_plev_${suffix01})

EOF
  done

# write plot variables
  cat >> $ncl_name << EOF
;--------------------
; set plot variables
;--------------------
;
EOF
  for ((i=0; i<$num_vars; i=i+1))
  do
    cat >> $ncl_name << EOF
  varvar_${vname_work[$i]}_${suffix01} = ${vname_work[$i]}_${suffix01}
;  varvar_${vname_work[$i]}_${suffix01} = ${vname_work[$i]}_plev_${suffix01}

EOF
  done

  # write colormap res
  cat $ncl_codes_colormap >> $ncl_name

  # write wks res
  cat $ncl_codes_wks >> $ncl_name

  # write contour res
  cat $ncl_codes_cn >> $ncl_name

#*** set plot function ***
  cat >> $ncl_name << EOF
;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar = new ($num_vars,"graphic")

do t=t1,t2
  dd = sprinti("%2.2i",t)
  wks_name = plotname+"-step-"+dd
  wks = gsn_open_wks(wks_type,wks_name)
  
EOF

  # plot each variable
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_${vname_work[$i]} = gsn_csm_contour_map (wks, varvar_${vname_work[$i]}_${suffix01}(t,:,:), res_${vname_work[$i]})
EOF
  done

  echo "" >> $ncl_name

  # plot each variable
  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  plot_${vname_work[$i]} = gsn_csm_contour_map_avg (wks, varvar_${vname_work[$i]}_${suffix01}(t,:,:), res_${vname_work[$i]} , opt)
EOF
  done

  # set panel plot varaibles
  echo "" >> $ncl_name

  for ((i=0; i<$num_vars; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar($i) = plot_${vname_work[$i]}
EOF
  done
  
  # write panel res
  cat $ncl_codes_panel >> $ncl_name

  cat >> $ncl_name << EOF
  gsn_panel(wks, plot_varvar, (/1,$(($num_vars))/), resp)
end do
EOF

#*** case: "cesm-contour-vars" end ***

#*** case: "cesm-cross_sec-files" start ***
elif [ $casename_work -a $casename_work == "cesm-cross_sec-files" ]; then

#*** set general ***
  cat >> $ncl_name << EOF
  txstring = "" ; text on the panel plot
  varvar = "${var01}"    ; process variable
  plotname = wks_name+varvar  ; plot name is plotname+"-step-"+t
  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

  ;plottype = "latlon" ; plot a lat-lon contour at interpolated pressure level  
  plottype = "latp"    ; plot a lat-pressure cross section

  if ( plottype .eq. "latlon" ) then
    plev = 200.      ; interpolate pressure level, in hPa
    plotname = "test111-"+varvar+"_"+plev+"hPa"  ; plot name is plotname+"-step-"+t

  else if ( plottype .eq. "latp" ) then
    plotname = "test111-"+varvar+"_latp"  ; plot name is plotname+"-step-"+t
    plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
             250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
             850., 875., 900., 925., 950., 975., 1000./)
  end if
  end if

  plev@long_name = "pressure"
  plev@units     = "hPa"

EOF

#*** set strings ***

  for (( i=0; i<${num_files}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  string_${suffix_work[$i]} = "${suffix_work[$i]}"  ; tiMainstring of each plot
EOF
  done

  echo "" >> $ncl_name

  for (( i=0; i<${num_files}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  string_diff_${suffix_work[$i]} = string_${suffix_work[$i]}+" minus "+string_${suffix_work[0]} ; tiMainstring of each plot
EOF
  done

#*** set files ***
  cat >> $ncl_name << EOF

;------------
; open file
;------------

EOF
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( "${infile[$i]}" , "r" )
EOF
  done

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

#*** set variables ***
  echo "" >> $ncl_name

  # read-in variables
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  ${var01}_${suffix_work[$i]} = file_${suffix_work[$i]}->\$varvar\$${dim_work}
  hyai_${suffix_work[$i]} = file_${suffix_work[$i]}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix_work[$i]} = file_${suffix_work[$i]}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix_work[$i]} = file_${suffix_work[$i]}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix_work[$i]} = file_${suffix_work[$i]}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix_work[$i]}   = file_${suffix_work[$i]}->PS        ; surface pressures  in Pa
  p0_${suffix_work[$i]}   = file_${suffix_work[$i]}->P0        ; reference pressure in Pa

EOF
  done

  cat >> $ncl_name << EOF
;-------------------------------------------------------------
; interpolate model data to given pressure level & write out 
;-------------------------------------------------------------

; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
;   hyam[*] : hybrid A coefficients (unitless)
;   hybm[*] : hybrid B coefficients (unitless)
;   plev[*} : output pressure levels (hPa)
;   ps      : surface pressure, same dimension as data (Pa)
;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
;   p0      : scalar, reference pressure (hPa)
;   ii      : Not used at this time. Set to 1.
;   kxtrp   : Logical.
;             False => no extrapolation when the pressure level is outside of the range of psfc.
;
;  var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
;  var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)

EOF

  # write interpolation part
  for ((j=0; j<$num_files; j=j+1))
  do
      cat >> $ncl_name << EOF
  ${var01}_plev_${suffix_work[$j]} = vinth2p(${var01}_${suffix_work[$j]}, hyam_${suffix_work[$j]}, hybm_${suffix_work[$j]}, plev, ps_${suffix_work[$j]}, 1, p0_${suffix_work[$j]}/100., 1, False)
  copy_VarAtts(${var01}_${suffix_work[$j]}, ${var01}_plev_${suffix_work[$j]})

EOF
  done

  # write plot variables, if plottype = "latlon"
  cat >> $ncl_name << EOF
  if ( plottype .eq. "latlon" ) then
EOF

  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    varvar_${suffix_work[$i]} = ${var01}_plev_${suffix_work[$i]}(:,0,:,:)
EOF
  done

  cat >> $ncl_name << EOF
  end if 

EOF

  # write plot variables, if plottype = "latp"
  cat >> $ncl_name << EOF
  if ( plottype .eq. "latp" ) then
EOF

  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    varvar_${suffix_work[$i]} = dim_avg_n_Wrap(${var01}_plev_${suffix_work[$i]},3)  ; average over lon
EOF
  done

  cat >> $ncl_name << EOF
  end if 
EOF

  cat >> $ncl_name << EOF
;
;  nfactor = 
EOF

  # change values
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  varvar_${suffix_work[$i]} = multiply(varvar_${suffix_work[$i]} , nfactor)
EOF
  done

  # change units
  echo "" >> $ncl_name
  echo ";  varvar_${suffix_work[0]}@units = \"\"" >> $ncl_name

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
;  varvar_${suffix_work[$i]}@units = varvar_${suffix_work[0]}@units
EOF
  done

  # set difference
  echo "" >> $ncl_name
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  varvar_diff_${suffix_work[$i]} = diff(varvar_${suffix_work[$i]} , varvar_${suffix_work[0]})
EOF
  done

  cat >> $ncl_name << EOF

;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))

  ;cmap_prec = ignorant_select_colormap("precip2_17lev",999,False)
  ;cmap_diff = ignorant_select_colormap("precip_diff_12lev",999,False)

;-------------------
; set work station
;-------------------
;  wks = gsn_open_wks(wks_type,wks_name)
;  gsn_define_colormap(wks,"WhBlGrYeRe")       ; select color table

;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
;  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
  if ( plottype .eq. "latp" ) then
    res@trYReverse = True
    res@gsnYAxisIrregular2Linear = True

    ;res@gsnYAxisIrregular2Log = True
    ;res@tmYLMode = "Explicit"
    ;res@tmYLValues = plev
    ;res@tmYLValues = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 300., 500., 700., 1000./)
    ;res@tmYLLabels = res@tmYLValues

  end if
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = 
;  res@cnMaxLevelValF = 
;  res@cnLevelSpacingF = 
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
;  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
;  res@cnFillPalette = "amwg"
;  res@cnSpanFillPalette = False
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.

;  res@gsnSpreadColorStart = 7
;  res@gsnSpreadColorEnd = 100           

;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 
;  res@mpMinLatF = 
;
;  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""

;*** set title string ***
;  res@tiMainString =
;  res@tiXAxisString =
;  res@tiYAxisString =
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =

EOF

#*** set resources ***
  cat >> $ncl_name << EOF

  ;*** res for ${suffix_work[0]} ***
  res_${suffix_work[0]} = res
  res_${suffix_work[0]}@tiMainString = string_${suffix_work[0]}

  if ( plottype .eq. "latlon" ) then
    res_${suffix_work[0]}@gsnLeftString = varvar_${suffix_work[0]}@long_name+" at "+plev+" hPa"
  end if
  
EOF

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  ;*** res for ${suffix_work[$i]} ***
  res_${suffix_work[$i]} = res_${suffix_work[0]}
  res_${suffix_work[$i]}@tiMainString = string_${suffix_work[$i]}

EOF
  done

  cat >> $ncl_name << EOF

  ;*** res for diff ***
  res_diff = res
  if ( plottype .eq. "latlon" ) then
    res_diff@gsnLeftString = res_${suffix_work[0]}@gsnLeftString
  end if
EOF

  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  ;*** res for ${suffix_work[$i]} ***
  res_diff_${suffix_work[$i]} = res_diff
  res_diff_${suffix_work[$i]}@tiMainString = string_diff_${suffix_work[$i]}

EOF
  done

#*** set plot function ***
  cat >> $ncl_name << EOF
;-------
; plot
;-------
  opt = True                 ; option of gsn_csm_contour_map_avg
;  opt@LatWeighted = False    ; do average considering latitude transformation effects
;                           ; if turn on, data_input coordinate variable's MUST in correct format
;  opt@MeanFormat = "%7.3f"   ; set mean value format
;  opt@MeanPrefix = "mean: "  ; set prefix of mean value
;  plot = gsn_csm_contour_map_avg(wks,cndata,res,opt)

  plot_varvar = new ($num_files,"graphic")

do t=t1,t2
  dd = sprinti("%2.2i",t)
  wks_name = plotname+"-step-"+dd
  wks = gsn_open_wks(wks_type,wks_name)
  gsn_define_colormap(wks,"amwg")       ; select color table
  
EOF

  # plottype = "latlon"
  cat >> $ncl_name << EOF
  if ( plottype .eq. "latlon" ) then
EOF

  # plot each variable, when plottype = "latlon"
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    plot_varvar_${suffix_work[$i]} = gsn_csm_contour_map_avg (wks, varvar_${suffix_work[$i]}(t,:,:), res_${suffix_work[$i]}, opt)
EOF
  done

  echo "" >> $ncl_name

  # plot each diff variable, when plottype = "latlon"
  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    plot_varvar_diff_${suffix_work[$i]} = gsn_csm_contour_map_avg (wks, varvar_diff_${suffix_work[$i]}(t,:,:), res_diff_${suffix_work[$i]}, opt)
EOF
  done

  cat >> $ncl_name << EOF
  end if

EOF

  # plottype = "latp"
  cat >> $ncl_name << EOF
  if ( plottype .eq. "latp" ) then
EOF

  # plot each variable, when plottype = "latp"
  for ((i=0; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    plot_varvar_${suffix_work[$i]} = gsn_csm_contour (wks, varvar_${suffix_work[$i]}(t,:,:), res_${suffix_work[$i]})
EOF
  done

  echo "" >> $ncl_name

  # plot each diff variable, when plottype = "latp"
  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
    plot_varvar_diff_${suffix_work[$i]} = gsn_csm_contour (wks, varvar_diff_${suffix_work[$i]}(t,:,:), res_diff_${suffix_work[$i]})
EOF
  done

  cat >> $ncl_name << EOF
  end if

EOF

  # set panel plot varaibles
  cat >> $ncl_name << EOF
  plot_varvar(0) = plot_varvar_${suffix_work[0]}
EOF
  for ((i=1; i<$num_files; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  plot_varvar($i) = plot_varvar_diff_${suffix_work[$i]}
EOF
  done

  cat >> $ncl_name << EOF

  resp = True
  resp@gsnPanelRowSpec = True
;  resp@gsnFrame = False
  resp@txString = txstring
  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks, plot_varvar, (/1,$(($num_files-1))/), resp)
end do
EOF
#*** case: "cesm-cross_sec-files" end ***

#*** case: "cesm-xy-zonal" start ***
elif [ $casename_work -a $casename_work == "cesm-xy-zonal" ]; then

#***************
# set general 
#***************
  cat >> $ncl_name << EOF
  txstring = "" ; text on the panel plot
  tiXstring = "Latitude"  ; string at X axis
  tiYstring = ""  ; string at Y Axis

  plotname = wks_name  ; plot name is plotname+"-step-"+t
  colormap = "default"
  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

EOF

#***************
# set strings 
#***************

  #*** write variable legend string ***
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    var33s[$j]=""
    for (( i=0; i<${num_files}; i=i+1 ))
    do
      ss1="${vname_work[$j]}_${suffix_work[$i]}"
      var33="string_${ss1}"
      cat >> $ncl_name << EOF
  $var33 = "  $ss1"  ;  legend string of each variable
EOF
      if [ $j -eq $(($num_vars-1)) ] && [ $i -eq $(($num_files-1)) ] ; then
        var33s[$j]="${var33s[$j]}${var33}  "
      else
        var33s[$j]="${var33s[$j]}${var33}, "
      fi
    done
    echo "" >> $ncl_name
    #echo ${var33s[$j]}
  done

  #*** write all legend string ***
  nvar33s=${#var33s}
  cat >> $ncl_name << EOF
;*** set legend string ***
  varvar_string_all = (/ \\
EOF

  for ((i=0; i<$num_vars; i=i+1))
  do
    cat >> $ncl_name << EOF
      ${var33s[$i]} \\
EOF
  done

  cat >> $ncl_name << EOF
                      /)

EOF

  #*** write vars legend string ***
  jj0=0
  jj1=$(($num_files-1))
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_string_${vname_work[$j]} = varvar_string_all(${jj0}:${jj1})
EOF11
    jj0=$(($jj0+$num_files))
    jj1=$(($jj1+$num_files))
  done

  echo "" >> $ncl_name

  #*** write files legend string ***
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_string_${suffix_work[$i]} = varvar_string_all(${i}::${num_files})
EOF11
  done

  echo "" >> $ncl_name 

#****************
# set resources 
#****************

  cat >> $ncl_name << EOF
;----------------
; set resources 
;----------------

  res = True
  res@gsnFrame = False
  res@gsnDraw = False

  res@xyMonoLineColor = False
  res@xyLineColors = (/2,3,4,5,6,7,8,9,10,11,12,13,14,15/)

  res@xyMonoDashPattern = True

  res@xyMonoLineThickness = True
  res@xyLineThicknessF = 3.

  res@pmLegendDisplayMode = "Always"
  res@pmLegendSide = "Top"
  res@pmLegendWidthF = 0.15 
  ;res@pmLegendHeightF = 0.18
  ;res@xyExplicitLegendLabels = (/"",""/)
  ;res@lgLabelFontHeightF = 0.01
  ;res@pmLegendOrthogonalPosF = -0.1  ; move up(+) / down(-)
  ;res@pmLegendParallelPosF = 0.8  ; move right (left(-) / right(+)
  res@lgPerimOn = False
  ;res@lgItemOrder = (/0,1,2,3,4,5,6,7/)

  res@tiXAxisString = tiXstring
  res@tiYAxisString = tiYstring

  resp = True ; panel res
  resp@txString = txstring
EOF

  #*** write xy res for ref 
  cat $ncl_codes_xy >> $ncl_name

  #*** write panel res for ref 
  cat $ncl_codes_panel >> $ncl_name

  #*** write res_all
  cat >> $ncl_name << EOF
  res_all = res
  res_all@xyExplicitLegendLabels = varvar_string_all

  nn = dimsizes(varvar_string_all)
  igorder_all = ispan(0,nn-1,1)
  igorder_all = igorder_all(::-1)
  res_all@lgItemOrder = igorder_all

EOF

  # write variables res
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF
;*** res of varabile ${vname_work[$j]} ***
  res_${vname_work[$j]} = res
  res_${vname_work[$j]}@xyExplicitLegendLabels = varvar_string_${vname_work[$j]}
  nn = dimsizes(varvar_string_${vname_work[$j]})
  igorder_${vname_work[$j]} = ispan(0,nn-1,1)
  igorder_${vname_work[$j]} = igorder_${vname_work[$j]}(::-1)
  res_${vname_work[$j]}@lgItemOrder = igorder_${vname_work[$j]}

EOF
  done

  # write files res
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
;*** res of file ${suffix_work[$i]} ***
  res_${suffix_work[$i]} = res
  res_${suffix_work[$i]}@xyExplicitLegendLabels = varvar_string_${suffix_work[$i]}
  nn = dimsizes(varvar_string_${suffix_work[$i]})
  igorder_${suffix_work[$i]} = ispan(0,nn-1,1)
  igorder_${suffix_work[$i]} = igorder_${suffix_work[$i]}(::-1)
  res_${suffix_work[$i]}@lgItemOrder = igorder_${suffix_work[$i]}

EOF
  done  

#*****************************
# write read files/variables
#*****************************

  cat >> $ncl_name << EOF

;------------------------------
; open files & read variables
;------------------------------

EOF

  #*** read files and variables ***
  for (( i=0; i<${num_files}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( "${infile[$i]}" , "r" )
EOF
  done

  echo "" >> $ncl_name

  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    for (( i=0; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = file_${suffix_work[$i]}->${var[$j]}
EOF
    done
    echo "" >> $ncl_name
  done

  #*** change units ***
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF

  nfactor = 1.
  ${vname_work[$j]}_${suffix_work[0]}@units = ""
EOF

    for (( i=0; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = multiply(${vname_work[$j]}_${suffix_work[$i]} , nfactor)
EOF
    done

    for (( i=1; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]}@units = ${vname_work[$j]}_${suffix_work[0]}@units
EOF
    done

  done

#*** set plot variables ***

  nn=0
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    yyvar_var[nn]="varvar_"${vname_work[$j]}
    nn=$(($nn+1))
  done

  nn=0
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    yyvar_file[nn]="varvar_"${suffix_work[$i]}
    nn=$(($nn+1))
  done

  #echo ${yyvar_var[@]}
  #echo ${yyvar_file[@]}
  #echo ${#yyvar_file[@]}

#***************
# post process 
#***************

  cat >> $ncl_name << EOF

;---------------
; post process
;---------------

EOF

  #*** average over lon coordinate ***
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    var11s[$j]=""
    for (( i=0; i<${num_files}; i=i+1 ))
    do
      var11="${vname_work[$j]}_${suffix_work[$i]}_zonal"
      cat >> $ncl_name << EOF
  $var11 = dim_avg_n_Wrap (${vname_work[$j]}_${suffix_work[$i]} , 2) ; average over lon
EOF
  
      if [ $j -eq $(($num_vars-1)) ] && [ $i -eq $(($num_files-1)) ] ; then
        var11s[$j]="${var11s[$j]}${var11}  "
      else
        var11s[$j]="${var11s[$j]}${var11}, "
      fi
    done
    echo "" >> $ncl_name
    #echo ${var11s[$j]}
  done

#****************
# plot variables
#****************

  cat >> $ncl_name << EOF
;---------------------
; set plot variables
;---------------------

EOF

  nvar11s=${#var11s}

  #*** write xx plot variable ***
  cat >> $ncl_name << EOF
  varvar_xx = ${vname_work[0]}_${suffix_work[0]}&lat

EOF

  #*** write yy_all plot variable ***
  cat >> $ncl_name << EOF
  varvar_yy_all = (/ \\
EOF

  for (( i=0; i<${num_vars}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
    ${var11s[$i]} \\
EOF
  done
  cat >> $ncl_name << EOF
                   /)

EOF
  
  #*** write yy_vars plot variable ***
  jj0=0
  jj1=$(($num_files-1))
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_yy_${vname_work[$j]} = varvar_yy_all(${jj0}:${jj1},:,:)
EOF11
    jj0=$(($jj0+$num_files))
    jj1=$(($jj1+$num_files))
  done

  echo "" >> $ncl_name

  #*** write yy_files plot variable ***
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_yy_${suffix_work[$i]} = varvar_yy_all(${i}::${num_files},:,:)
EOF11
  done

#*******
# plot 
#*******

  #*** set plot function ***
  cat >> $ncl_name << EOF

;-------
; plot
;-------

  plot_varvar_all  = new ($((num_vars*num_files)) , "graphic")
  plot_varvar_var  = new ($num_vars , "graphic")
  plot_varvar_file = new ($num_files , "graphic")

do t=t1,t2
  dd = sprinti("%2.2i",t)
  wks_name = plotname+"-step-"+dd
  wks = gsn_open_wks(wks_type,wks_name)
  gsn_define_colormap(wks,colormap)       ; select color table  
EOF

  #*** write wks resource ***
  cat $ncl_codes_wks >> $ncl_name

  #*** plot all variables ***
  cat >> $ncl_name << EOF
  plot_all = gsn_csm_xy (wks, varvar_xx, varvar_yy_all(:,t,:), res_all)

EOF

  # plot each variable
  for ((j=0; j<$num_vars; j=j+1 ))
  do
  cat >> $ncl_name << EOF
  plot_${vname_work[$j]} = gsn_csm_xy (wks, varvar_xx, varvar_yy_${vname_work[$j]}(:,t,:), res_${vname_work[$j]})
EOF
  done

  echo "" >> $ncl_name

  # plot each file
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  plot_${suffix_work[$i]} = gsn_csm_xy (wks, varvar_xx, varvar_yy_${suffix_work[$i]}(:,t,:), res_${suffix_work[$i]})
EOF
  done

  # set panel plot varaibles
  echo "" >> $ncl_name

  # set panel for variables
  for ((j=0; j<$num_vars; j=j+1 ))
  do
    cat >> $ncl_name << EOF
  plot_varvar_var($j) = plot_${vname_work[$j]}
EOF
  done

  echo "" >> $ncl_name

  # set panel for files
  for ((i=0; i<$num_files; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  plot_varvar_file($i) = plot_${suffix_work[$i]}
EOF
  done

  # draw plot
    cat >> $ncl_name << EOF

  draw(plot_all)
  frame(wks)
  gsn_panel(wks, plot_varvar_var, (/1,$num_vars/), resp)
  gsn_panel(wks, plot_varvar_file, (/1,$num_files/), resp)

end do
EOF

#*** case: "cesm-xy-zonal" end ***

#*** case: "cesm-xy-profile" start ***
elif [ $casename_work -a $casename_work == "cesm-xy-profile" ]; then

#***************
# set general 
#***************
  cat >> $ncl_name << EOF
  txstring = "" ; text on the panel plot
  tiXstring = ""  ; string at X axis
  tiYstring = "Pressure (hPa)"  ; string at Y Axis

  plotname = wks_name  ; plot name is plotname+"-step-"+t
  colormap = "default"
  t1 = 0           ; plot time step start
  t2 = 0           ; plot time step end

  plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
           250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
           850., 875., 900., 925., 950., 975., 1000./)
  plev@long_name = "pressure"
  plev@units     = "hPa"

;***********************************************
; Description:
;   interpolate CESM variables (T,Q...) to pressure levels, then compute the lat-lon average 
;   and plot the area mean quantities versus pressure levels
;***********************************************

EOF

#***************
# set strings 
#***************

  #*** write variable legend string ***
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    var33s[$j]=""
    for (( i=0; i<${num_files}; i=i+1 ))
    do
      ss1="${vname_work[$j]}_${suffix_work[$i]}"
      var33="string_${ss1}"
      cat >> $ncl_name << EOF
  $var33 = "  $ss1"  ;  legend string of each variable
EOF
      if [ $j -eq $(($num_vars-1)) ] && [ $i -eq $(($num_files-1)) ] ; then
        var33s[$j]="${var33s[$j]}${var33}  "
      else
        var33s[$j]="${var33s[$j]}${var33}, "
      fi
    done
    echo "" >> $ncl_name
    #echo ${var33s[$j]}
  done

  #*** write all legend string ***
  nvar33s=${#var33s}
  cat >> $ncl_name << EOF
;*** set legend string ***
  varvar_string_all = (/ \\
EOF

  for ((i=0; i<$num_vars; i=i+1))
  do
    cat >> $ncl_name << EOF
      ${var33s[$i]} \\
EOF
  done

  cat >> $ncl_name << EOF
                      /)

EOF

  #*** write vars legend string ***
  jj0=0
  jj1=$(($num_files-1))
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_string_${vname_work[$j]} = varvar_string_all(${jj0}:${jj1})
EOF11
    jj0=$(($jj0+$num_files))
    jj1=$(($jj1+$num_files))
  done

  echo "" >> $ncl_name

  #*** write files legend string ***
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_string_${suffix_work[$i]} = varvar_string_all(${i}::${num_files})
EOF11
  done

  echo "" >> $ncl_name 

#****************
# set resources 
#****************

  cat >> $ncl_name << EOF
;----------------
; set resources 
;----------------

  res = True
  res@gsnFrame = False
  res@gsnDraw = False

  res@trYReverse = True

  res@gsnYAxisIrregular2Linear = True   ; use linear scale in pressure
;  res@gsnYAxisIrregular2Log = True     ; use log scale in pressure
;  res@tmYLMode = "Explicit"
;  res@tmYLValues = plev
;  res@tmYLValues = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 300., 500., 700., 1000./)
;  res@tmYLLabels = res@tmYLValues

  res@xyMonoLineColor = False
  res@xyLineColors = (/2,3,4,5,6,7,8,9,10,11,12,13,14,15/)

  res@xyMonoDashPattern = True

  res@xyMonoLineThickness = True
  res@xyLineThicknessF = 3.

  res@pmLegendDisplayMode = "Always"
  res@pmLegendSide = "Top"
  res@pmLegendWidthF = 0.15 
  ;res@pmLegendHeightF = 0.18
  ;res@xyExplicitLegendLabels = (/"",""/)
  ;res@lgLabelFontHeightF = 0.01
  ;res@pmLegendOrthogonalPosF = -0.1  ; move up(+) / down(-)
  ;res@pmLegendParallelPosF = 0.8  ; move right (left(-) / right(+)
  res@lgPerimOn = False
  ;res@lgItemOrder = (/0,1,2,3,4,5,6,7/)

  res@tiXAxisString = tiXstring
  res@tiYAxisString = tiYstring

  resp = True ; panel res
  resp@txString = txstring
EOF

  #*** write xy res for ref 
  cat $ncl_codes_xy >> $ncl_name

  #*** write panel res for ref 
  cat $ncl_codes_panel >> $ncl_name

  #*** write res_all
  cat >> $ncl_name << EOF
  res_all = res
  res_all@xyExplicitLegendLabels = varvar_string_all

  nn = dimsizes(varvar_string_all)
  igorder_all = ispan(0,nn-1,1)
  igorder_all = igorder_all(::-1)
  res_all@lgItemOrder = igorder_all

EOF

  # write variables res
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF
;*** res of varabile ${vname_work[$j]} ***
  res_${vname_work[$j]} = res
  res_${vname_work[$j]}@xyExplicitLegendLabels = varvar_string_${vname_work[$j]}
  nn = dimsizes(varvar_string_${vname_work[$j]})
  igorder_${vname_work[$j]} = ispan(0,nn-1,1)
  igorder_${vname_work[$j]} = igorder_${vname_work[$j]}(::-1)
  res_${vname_work[$j]}@lgItemOrder = igorder_${vname_work[$j]}

EOF
  done

  # write files res
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
;*** res of file ${suffix_work[$i]} ***
  res_${suffix_work[$i]} = res
  res_${suffix_work[$i]}@xyExplicitLegendLabels = varvar_string_${suffix_work[$i]}
  nn = dimsizes(varvar_string_${suffix_work[$i]})
  igorder_${suffix_work[$i]} = ispan(0,nn-1,1)
  igorder_${suffix_work[$i]} = igorder_${suffix_work[$i]}(::-1)
  res_${suffix_work[$i]}@lgItemOrder = igorder_${suffix_work[$i]}

EOF
  done  

#*****************************
# write read files/variables
#*****************************

  cat >> $ncl_name << EOF

;------------------------------
; open files & read variables
;------------------------------

EOF

  #*** read files and variables ***
  for (( i=0; i<${num_files}; i=i+1 ))
  do
  cat >> $ncl_name << EOF
  file_${suffix_work[$i]} = addfile( "${infile[$i]}" , "r" )
EOF
  done

  echo "" >> $ncl_name

  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    for (( i=0; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = file_${suffix_work[$i]}->${var[$j]}
EOF
    done
    echo "" >> $ncl_name
  done

  #*** change units ***
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF

  nfactor = 1.
  ${vname_work[$j]}_${suffix_work[0]}@units = ""
EOF

    for (( i=0; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]} = multiply(${vname_work[$j]}_${suffix_work[$i]} , nfactor)
EOF
    done

    for (( i=1; i<${num_files}; i=i+1 ))
    do
      cat >> $ncl_name << EOF
  ${vname_work[$j]}_${suffix_work[$i]}@units = ${vname_work[$j]}_${suffix_work[0]}@units
EOF
    done

  done

#*** set plot variables ***

  nn=0
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    yyvar_var[nn]="varvar_"${vname_work[$j]}
    nn=$(($nn+1))
  done

  nn=0
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    yyvar_file[nn]="varvar_"${suffix_work[$i]}
    nn=$(($nn+1))
  done

  #echo ${yyvar_var[@]}
  #echo ${yyvar_file[@]}
  #echo ${#yyvar_file[@]}

#***************
# post process 
#***************

  cat >> $ncl_name << EOF

;---------------
; post process
;---------------

  ;*** needed variables for interpolation ***
EOF

  # read variables for interpolation
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  hyai_${suffix_work[$i]} = file_${suffix_work[$i]}->hyai      ; hybrid A coefficient at layer interface
  hybi_${suffix_work[$i]} = file_${suffix_work[$i]}->hybi      ; hybrid B coefficient at layer interface
  hyam_${suffix_work[$i]} = file_${suffix_work[$i]}->hyam      ; hybrid A coefficient at layer midpoints
  hybm_${suffix_work[$i]} = file_${suffix_work[$i]}->hybm      ; hybrid B coefficient at layer midpoints
  ps_${suffix_work[$i]}   = file_${suffix_work[$i]}->PS        ; surface pressures  in Pa
  p0_${suffix_work[$i]}   = file_${suffix_work[$i]}->P0        ; reference pressure in Pa

EOF
  done

  cat >> $ncl_name << EOF
  ;*** set cosine-latitude weighted array ***
  jlat    = ${vname_work[0]}_${suffix_work[0]}&lat
  deg2rad = 4.0*atan(1.0)/180.0
  clat    = cos(jlat*deg2rad)

  ;-------------------------------------------------------------
  ; interpolate model data to given pressure level & write out 
  ;-------------------------------------------------------------
  ; function vinth2p( data, hyam, hybm, plev, ps, intyp, p0, ii, kxtrp )
  ;   data[:,:,lev,lat,lon] -- rightmost dimension must (be lev,lat,lon)
  ;   hyam[*] : hybrid A coefficients (unitless)
  ;   hybm[*] : hybrid B coefficients (unitless)
  ;   plev[*} : output pressure levels (hPa)
  ;   ps      : surface pressure, same dimension as data (Pa)
  ;   intyp   : interpolation type, 1 = LINEAR, 2 = LOG, 3 = LOG LOG
  ;   p0      : scalar, reference pressure (hPa)
  ;   ii      : Not used at this time. Set to 1.
  ;   kxtrp   : Logical.
  ;             False => no extrapolation when the pressure level is outside of the range of psfc.
  ;
  ;   var1_plev = vinth2p(var1, hyai, hybi, plev, ps, 1, p0/100., 1, False)
  ;   var1_plev = vinth2p(var1, hyam, hybm, plev, ps, 1, p0/100., 1, False)
  ;
  ; function wgt_areaave (q, wgty, wgtx, opt)
  ;   data: input data in size of ([...,],lat,lon)
  ;   wgty: A scalar (typically 1.0) or singly-dimensioned array of size "lat" (y) containing the weights. 
  ;   wgtx: A scalar (typically 1.0) or singly-dimensioned array of size "lon" (x) containing the weights. 
  ;   opt : opt = 0, using available non-missing data. opt = 1, if any point in q is missing, the area average is not computed.                  
  ;-------------------------------------------------------------

EOF

  # write interpolation part
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    var22s[$j]=""
    for ((i=0; i<$num_files; i=i+1))
    do
      var21="${vname_work[$j]}_plev_${suffix_work[$i]}"
      var22="${vname_work[$j]}_${suffix_work[$i]}_areaavg"
      cat >> $ncl_name << EOF
  $var21 = vinth2p(${vname_work[$j]}_${suffix_work[$i]}, hyam_${suffix_work[$i]}, hybm_${suffix_work[$i]}, plev, ps_${suffix_work[$i]}, 1, p0_${suffix_work[$i]}/100., 1, False)
  $var22 = wgt_areaave($var21, clat, 1.0, 1)

EOF
      if [ $j -eq $(($num_vars-1)) ] && [ $i -eq $(($num_files-1)) ] ; then
        var22s[$j]="${var22s[$j]}${var22}  "
      else
        var22s[$j]="${var22s[$j]}${var22}, "
      fi

    done
  done

#****************
# plot variables
#****************

  cat >> $ncl_name << EOF
;---------------------
; set plot variables
;---------------------

EOF

  #*** write all variables ***
  nvar22s=${#var22s}
  cat >> $ncl_name << EOF
  varvar_yy = plev

  varvar_xx_all = (/ \\
EOF

  for ((i=0; i<$num_vars; i=i+1))
  do
    cat >> $ncl_name << EOF
      ${var22s[$i]} \\
EOF
  done

  cat >> $ncl_name << EOF
                  /)
EOF

  echo "" >> $ncl_name

  # write yy_vars plot variable
  jj0=0
  jj1=$(($num_files-1))
  for (( j=0; j<${num_vars}; j=j+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_xx_${vname_work[$j]} = varvar_xx_all(${jj0}:${jj1},:,:)
EOF11
    jj0=$(($jj0+$num_files))
    jj1=$(($jj1+$num_files))
  done

  echo "" >> $ncl_name

  # write yy_files plot variable
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF11
  varvar_xx_${suffix_work[$i]} = varvar_xx_all(${i}::${num_files},:,:)
EOF11
  done

#*******
# plot 
#*******

  #*** set plot function ***
  cat >> $ncl_name << EOF

;-------
; plot
;-------

  plot_varvar_all  = new ($((num_vars*num_files)) , "graphic")
  plot_varvar_var  = new ($num_vars , "graphic")
  plot_varvar_file = new ($num_files , "graphic")

do t=t1,t2
  dd = sprinti("%2.2i",t)
  wks_name = plotname+"-step-"+dd
  wks = gsn_open_wks(wks_type,wks_name)
  gsn_define_colormap(wks,colormap)       ; select color table  
EOF

  #*** write wks resource ***
  cat $ncl_codes_wks >> $ncl_name

  #*** plot all variables ***
  cat >> $ncl_name << EOF
  plot_all = gsn_csm_xy (wks, varvar_xx_all(:,t,:), varvar_yy, res_all)

EOF

  # plot each variable
  for ((j=0; j<$num_vars; j=j+1 ))
  do
  cat >> $ncl_name << EOF
  plot_${vname_work[$j]} = gsn_csm_xy (wks, varvar_xx_${vname_work[$j]}(:,t,:), varvar_yy, res_${vname_work[$j]})

EOF
  done

  echo "" >> $ncl_name

  # plot each file
  for (( i=0; i<${num_files}; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  plot_${suffix_work[$i]} = gsn_csm_xy (wks, varvar_xx_${suffix_work[$i]}(:,t,:), varvar_yy, res_${suffix_work[$i]})

EOF
  done

  # set panel plot varaibles
  echo "" >> $ncl_name

  # set panel for variables
  for ((j=0; j<$num_vars; j=j+1 ))
  do
    cat >> $ncl_name << EOF
  plot_varvar_var($j) = plot_${vname_work[$j]}
EOF
  done

  echo "" >> $ncl_name

  # set panel for files
  for ((i=0; i<$num_files; i=i+1 ))
  do
    cat >> $ncl_name << EOF
  plot_varvar_file($i) = plot_${suffix_work[$i]}
EOF
  done

  # draw plot
    cat >> $ncl_name << EOF

  draw(plot_all)
  frame(wks)
  gsn_panel(wks, plot_varvar_var, (/1,$num_vars/), resp)
  gsn_panel(wks, plot_varvar_file, (/1,$num_files/), resp)

end do
EOF

#*** case: "cesm-xy-profile" end ***

#*** case: "ncl-case-bash" start ***
elif [ $casename_work -a $casename_work == "ncl-case-bash" ]; then
cat > $ncl_name << EOF11
#!/bin/bash

infile=(f1 f2 f3 f4)
suffix_work=(s1 s2 s3 s4)
var=(vv1 vv2 vv3)
vname_work=(v1 v2 v3)

file01="f2"
var01="Q"
suffix01="s1"
ncl_name="x1.ncl"

num_suffix=\${#suffix_work[@]}
num_files=\${#infile[@]}
num_vars=\${#var[@]}

homepath="$homepath"
ncargroot='\$NCARG_ROOT'
ignorant_name1="\${homepath}/script/ncl/ignorantNCL.ncl"
ignorant_name2="\${homepath}/script/ncl/ignorantNCL-colormaps.ncl"

#-------------
# write NCL
#------------
  cat > \$ncl_name << EOF
load "\$ncargroot/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "\$ncargroot/lib/ncarg/nclscripts/wrf/WRFUserARW.ncl"
load "\$ncargroot/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "\$ncargroot/lib/ncarg/nclscripts/csm/contributed.ncl"
load "\$ncargroot/lib/ncarg/nclscripts/csm/shea_util.ncl"
load "\$ignorant_name1"
load "\$ignorant_name2"

begin

EOF

#*** set general ***
  cat >> \$ncl_name << EOF
;------------------
; general settings
;------------------

EOF

  for (( i=0; i<\${num_files}; i=i+1 ))
  do
  cat >> \$ncl_name << EOF
  file_\${suffix_work[\$i]} = addfile( "\${infile[\$i]}" , "r" )

EOF
  done

  for (( i=0; i<\${num_vars}; i=i+1 ))
  do
  cat >> \$ncl_name << EOF
  \${vname_work[$i]}_\${suffix01} = file_\${suffix01}->\${var[\$i]}

EOF
  done

echo "end" >> \$ncl_name

exit 0

EOF11
#*** case: "ncl-case-bash" end ***

#*** case: "barchart-basic" start ***
elif [ $casename_work -a $casename_work == "barchart-basic" ]; then
cat >> $ncl_name << EOF

;-----------
; settings
;-----------
  
;*** set x,y values ***
  file_${suffix01} = addfile( "${file01}" , "r" )
  varvar = file_${suffix01}->${var01}

  xx = (//)
  yy = (//) 

;print(xx)
;print(yy)

  dim_x   = dimsizes(xx)
  nbar    = dimsizes(yy)
  yy_mean = dim_avg(yy)
  yy_sum  = dim_sum(yy)

  yy = yy/yy_sum

  if ( dim_x-nbar .ne. 1 ) then
    print("")
    print("ERROR: dim_x ["+dim_x+"] must be larger dim_y ["+nbar+"] by 1")
    print("")
  end if

;*** set plot res ***
  res               = True
  res@tiMainString  = "" ; main title
  res@tiXAxisString = "" ; x-axis title
  res@tiYAxisString = "" ; y-axis title

  res@gsnDraw       = False ; don't draw or advance the frame
  res@gsnFrame      = False 
  res@gsnMaximize   = True

  res@trYMinF       = min(yy)    ; min  y axis value
  ;res@trYMinF       = 0.    ; min  y axis value
  res@trYMaxF       = max(yy)   ; max  y axis value
  res@trXMinF       = min(xx)    ; max  x axis value
  res@trXMaxF       = max(xx)    ; max  x axis value
  res@tmXBMinorOn   = False ; turn off minor tickmarks
  res@tmYLMinorOn   = False
  res@tmXTOn        = False ; turn off top tickmarks
  res@tmYROn        = False ; turn off right tickmarks
  ;res@tmXTBorderOn  = False ; turn off top axis
  ;res@tmYRBorderOn  = False ; turn off right axis

  res@tmXBMode = "Explicit"
  res@tmXBValues = xx
  res@tmXBLabels = flt2string(res@tmXBValues)

;*** set polygon resources ***
  pgres                  = True
  pgres@gsLineThicknessF = 2.0   ; make lines thicker

  pg_colors = new(nbar,"integer")
  pg_colors = 3

;*** set polyline res ***
  lnres = True
  lnres@gsLineColor = 1
  lnres@gsLineThicknessF = 3.0   ; make lines thicker

  line_xx = (/min(xx),max(xx)/)
  line_yy = (/yy_mean,yy_mean/)

;*** set text res ***
  ntext = 2  
  text_labels = new(ntext, "string")
  text_xxs    = new(ntext, "float")
  text_yys    = text_xxs

  text_labels(0) = "mean"
  text_xxs(0) = max(xx)*0.9
  text_yys(0) = yy_mean

  text_labels(1) = "sum:"+sprintf("%8.3f",yy_mean)
  text_xxs(1) = max(xx)*0.9
  text_yys(1) = max(yy)*0.9

  text_label = "mean"
  text_xx = max(xx)*0.9
  text_yy = yy_mean

  txres = True
  txres@txFontHeightF = 0.02

;----------------
; program start
;----------------

;*************
; set arrays
;*************

;*** arrays for fack axis ***
  x_ref    = (/0,1/) ; arrays for fack axis
  y_ref    = (/0,0/)

;*** polygon arrays ***
  xpts = new(5,"float")   ; point position
  ypts = xpts
  dum1a  = new(nbar,"graphic") ; each polygon
  dum1b  = new(nbar,"graphic")

;*******
; plot
;*******

;*** open work station ***
  wks = gsn_open_wks(wks_type,wks_name)
  gsn_define_colormap(wks,"default")

;*** plot fack axis ***
  plot = gsn_csm_xy(wks,x_ref,y_ref,res)

;*** plot polygon ***
  do i=0,nbar-1
    xpts(0) = xx(i)
    ypts(0) = 0.
    xpts(1) = xx(i)
    ypts(1) = yy(i)
    xpts(2) = xx(i+1)
    ypts(2) = yy(i)
    xpts(3) = xx(i+1)
    ypts(3) = 0.
    xpts(4) = xx(i)
    ypts(4) = 0.

    pgres@gsFillColor = pg_colors(i)
    dum1a(i)  = gsn_add_polygon(wks,plot,xpts,ypts,pgres)
    dum1b(i)  = gsn_add_polyline(wks,plot,xpts,ypts,pgres)
  end do

;*** plot mean line ***
  polyline = gsn_add_polyline(wks,plot,line_xx,line_yy,lnres)

;*** plot texts ***
  do i=0,ntext-1
    text = gsn_add_text(wks,plot,text_labels(i),text_xxs(i),text_yys(i),txres)
  end do

;*** draw and frame ***
  draw(plot)
  frame(wks)

EOF
#*** case: "barchart-basic" end ***

#*** case: "eof-exp_coeffs-1file" start ***
elif [ $casename_work -a $casename_work == "eof-exp_coeffs-1file" ]; then
cat >> $ncl_name << EOF
;-------------------------------
; Description:
;   Compute EOF expansion coefficiens of a dataset, and then plot time series
;-------------------------------

;----------
; settings
;----------

;*** general settings ***
  varname = "$var01"  ; variable name

;*** EOF settings ***
  neval  = 2    ; # of eigenvalues
  optEOF = True  ; @jopt = 1, use correlation matrix, defaut is covariance
                 ; @prrit = 50, # non-missing points in order to do EOF

;*** plot settings ***
  
  ;--- select plot eigenvalues, index start from 1, i.e.  PC1  ---
  eval_start = 1     ; 1 means PC1
  eval_end   = neval ; all PCs 
  ;eval_start = 2
  ;eval_end   = 3

  ;--- select plot time period, index start from 1  ---
  time_start = 1
  ;time_end   = -1  ; -1 means all time steps
  time_end   = 10*12

  ;--- labels ---
  xxvv = ispan(eval_start,eval_end,1)
  sxxvv = tostring(xxvv)
  label_names = " PC "+sxxvv
;print(label_names)

  ;--- titile string ---
  mainstring = ""
  xstring = "Months"
  ystring = "Expansion Coeffients"

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  var     = file_${suffix01}->\$varname\$
  ;var     = file_${suffix01}->\$varname\$(0:10,:)
  var4eof = var(grid|:, time|:)

;printVarSummary(var)
;printVarSummary(var4eof)

;------
; EOF
;------  

  ;*** Computes empirical orthogonal functions (EOFs, aka: Principal Component Analysis) ***
  ;
  ; function eofunc_n_Wrap(data, neval, optEOF, dim)
  ; function eofunc       (data, neval, optEOF)
  ;   [INPUT]
  ;   data  : numeric, A multi-dimensional array, for eofunc, rightmost dimestion MUST be time
  ;   neval : integer, returned eigenvalues and eigenvectors
  ;   optEOF: logical, optEOF@jopt  = 1, use correlation matrix. 0: use covariance matrix (defaut)
  ;                    optEOF@pcrit = 85, a float value that indicates the percentage of non-missing points that must exist at any single point in order to be calculated.
  ;   dim   : integer, dimension containing the number of observations. Generally, this is the time dimension.
  ;
  ;   [RETURN]
  ;   A multi-dimensional array of the same size as data with the dimension indicated by dim removed, and an additional leftmost dimension of the same size as neval added. 
  ;     Will contain the following attributes:
  ;     eval  : a one-dimensional array of size neval that contains the eigenvalues.
  ;     pcvar : a one-dimensional array of size neval equal to the percent variance associated with each eigenvalue.
  ;     pcrit : The same value and type of optEOF@pcrit if the user changed the default.
  ;     matrix: A string indicating the type of matrix used, "correlation" or "covariance".
  ;     method: A string indicating the status of the matrix, "transpose" or "no transpose"
  ;     sig   : (v6.3.0 onward) A one-dimensional logical array of size neval indicating if each eigenvalue is significantly separated from adjacent eigenvalues. See eofunc_north.


;*** do EOF ***
  var_eof = eofunc(var4eof, neval,optEOF)
printVarSummary(var_eof)
;printVarSummary(var4eof)

;----------------------------------------------
; EOF expansion coefficients, i.e. time series
;----------------------------------------------

  ;*** Calculates the time series of the amplitudes associated with each eigenvalue in an EOF. ***
  ; function eofunc_ts(data, evec, optETS)
  ;   [INPUT]
  ;   data  : numeric, A multi-dimensional array, for eofunc, rightmost dimestion MUST be time
  ;   evec  : numeric, A multi-dimensional array containing the EOFs calculated using function *eofunc*.
  ;   optETS: logical, optETS@jopt = 1: Use the standardized data matrix to compute the time series. The default is to use data and evec.
  ;
  ;   [RETURN]
  ;     A two-dimensional array dimensioned by the number of eigenvalues selected in eofunc by the size of the time dimension of data. Will contain the following attribute:
  ;       ts_mean: an array of the same size and type as evec containing the means removed from data as part of the calculation.

  var_exp_coeffs = eofunc_ts(var4eof, var_eof, False)
;printVarSummary(var4eof)
;printVarSummary(var_exp_coeffs)

;--------------------
; set plot - xx & yy
;--------------------
  if (time_end .lt. 1) then
    time_end = dimsizes(var4eof(0,:))
  end if

  xx = ispan(time_start,time_end,1)
  yy = var_exp_coeffs(eval_start-1:eval_end-1,time_start-1:time_end-1)

;printVarSummary(xx)
;printVarSummary(yy)

;------------
; write out
;------------

;------
; plot
;------
  res = True

;*** gsn res ***
  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;
;*** adjust axis type ***
;  res@xyYStyle = "log"  ;  "Linear" "Irregular"
;  res@trYReverse = True
;
;*** adjust XY range ***
;  res@trXMinF = min(xx_values)
;  res@trXMaxF = max(xx_values)
 ; res@trYMinF = 0. 
;  res@trYMaxF = 100.
;
;*** adjust xy line mode ***
  res@xyMonoMarkLineMode = True
  res@xyMarkLineMode  = "Lines" ;"MarkLines" "Lines" "Markers" 
;  res@xyMarkLineModes = (/"MarkLines"/)
;
;*** adjust xy dash pattern ***
;  res@xyMonoDashPattern = False
;  res@xyDashPattern = 1
;  res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  res@xyMonoLineColor = False
;  res@xyLineColors = (/1,3,3,14,14/)
;  res@xyLineColor = 10
;
;*** adjust xy markers ***
  res@xyMonoMarker = True
  res@xyMarker = 4
;  res@xyMarkers = (//)
;
;  res@xyMonoMarkerColor = False
;  res@xyMarkerColor = 1
;  res@xyMarkerColors = (//)
;
;*** adjust xy line thickness ***
  res@xyMonoLineThickness = True
  res@xyLineThicknessF = 3.
;  res@xyLineThicknesses = 
;
;*** adjust tickmark ***
;  res@tmXTOn = False
;  res@tmXTLabelsOn = False
;
;  res@tmXBMode = "Explicit"
;  res@tmXBValues = xx_values
;  res@tmXBLabels = xx_labels
;  res@tmXBLabels = flt2string(res@tmXBValues)
;  res@tmXBLabels = (//)
;  res@tmXBMinorValues = (//)
;
;*** adjust grids ***
;  res@tmXMajorGrid = True
  res@tmYMajorGrid = True
  res@tmYMinorGrid = True
  res@tmYMajorGridLineDashPattern = 2
  res@tmYMinorGridLineDashPattern = 2
  res@tmYMajorGridLineColor = 1
  res@tmYMinorGridLineColor = 1
 
;*** adjust string ***
  res@tiMainString = mainstring
  res@tiXAxisString = xstring
  res@tiYAxisString = ystring
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =

;*** plot ***
  wks = gsn_open_wks(wks_type,wks_name)  
;  plot = gsn_csm_xy(wks,xx,yy,res)

  res1 = True
  opt = True
;  label_names = tostring(xx)
  plot = ignorant_xy(wks,xx,yy,label_names,res,opt)

EOF
#*** case: "eof-exp_coeffs-1file" end ***

#*** case: "eof-pc_contour-1file" start ***
elif [ $casename_work -a $casename_work == "eof-pc_contour-1file" ]; then
cat >> $ncl_name << EOF
;-------------------------------
; Description:
;   Do EOF analysis of a dataset, and then plot on map
;-------------------------------

;----------
; settings
;----------

;*** general settings ***
  varname = "$var01"  ; variable name

;*** EOF settings ***
  neval  = 2    ; # of eigenvalues
  optEOF = True  ; @jopt = 1, use correlation matrix, defaut is covariance
                 ; @prrit = 50, # non-missing points in order to do EOF

;*** plot settings ***
  txstring   = ""  ; panel string
  mainstring = ""  ; maiin string of each plot
  leftstring = "PC "  ; gsnLeftString
  rightstring = "" ; default, explained fraction of variance, gsnRightString

;*** panel plot settings ***
  row1    = 2  ; row number of panel plot
  column1 = 1  ; column number of panel plot
;  start1  = 0  ; start index of plots
;  end1    = 10 ; end index of plots 
;  stride1 = 1  ; stride of plots

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  var     = file_${suffix01}->\$varname\$
  ;var     = file_${suffix01}->\$varname\$(0:10,:)
  var4eof = var(grid|:, time|:)

;printVarSummary(var)

;------
; EOF
;------  

  ;*** Computes empirical orthogonal functions (EOFs, aka: Principal Component Analysis) ***
  ;
  ; function eofunc_n_Wrap(data, neval, optEOF, dim)
  ; function eofunc       (data, neval, optEOF)
  ;   [INPUT]
  ;   data  : numeric, A multi-dimensional array, for eofunc, rightmost dimestion MUST be time
  ;   neval : integer, returned eigenvalues and eigenvectors
  ;   optEOF: logical, optEOF@jopt  = 1, use correlation matrix. 0: use covariance matrix (defaut)
  ;                    optEOF@pcrit = 85, a float value that indicates the percentage of non-missing points that must exist at any single point in order to be calculated.
  ;   dim   : integer, dimension containing the number of observations. Generally, this is the time dimension.
  ;
  ;   [RETURN]
  ;   A multi-dimensional array of the same size as data with the dimension indicated by dim removed, and an additional leftmost dimension of the same size as neval added. 
  ;     Will contain the following attributes:
  ;     eval  : a one-dimensional array of size neval that contains the eigenvalues.
  ;     pcvar : a one-dimensional array of size neval equal to the percent variance associated with each eigenvalue.
  ;     pcrit : The same value and type of optEOF@pcrit if the user changed the default.
  ;     matrix: A string indicating the type of matrix used, "correlation" or "covariance".
  ;     method: A string indicating the status of the matrix, "transpose" or "no transpose"
  ;     sig   : (v6.3.0 onward) A one-dimensional logical array of size neval indicating if each eigenvalue is significantly separated from adjacent eigenvalues. See eofunc_north.


;*** do EOF ***
  var_eof = eofunc(var4eof, neval,optEOF)
;printVarSummary(var_eof)

;-----------------------
; regrid EOF to lat/lon
;-----------------------

  lon1 = fspan(0.,358.,180)
  lat1 = fspan(30.,-30.,31)

  sst1 = file_${suffix01}->SST
  ind1 = file_${suffix01}->ind   ; in order: (lon=0,lat=30~-30, lon=2, lat=30~-30)
  
  nlat = 31
  nlon = 180
  nocn = dimsizes(ind1)

  var_eof_latlon = new((/neval,nlat,nlon/),"float")
  var_eof_latlon = -999.99
  var_eof_latlon@_FillValue = -999.99
  var_eof_latlon!0 = "time"
  var_eof_latlon!1 = "lat" 
  var_eof_latlon!2 = "lon"

  var_eof_latlon&lat = lat1
  var_eof_latlon&lat@units = "degree_north"  

  var_eof_latlon&lon = lon1
  var_eof_latlon&lon@units = "degree_east"

  do k=0,nocn-1
    index1 = toint(ind1(k))
    i1 = toint(tofloat(index1-1.)/31.)
    j1 = index1 - i1*31 - 1
    ;print(index1+" , "+j1+" , "+i1)
    var_eof_latlon(:,j1,i1) = (/var_eof(:,k)/)
  end do

printVarSummary(var_eof_latlon)

  cndata = var_eof_latlon
 
;-------------
; set colors
;-------------
;
;  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
;  cmap2 = ignorant_select_colormap("default",(/3,5,6,7,8/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
  res@cnLevelSelectionMode = "ManualLevels"
  res@cnMinLevelValF = -0.06
  res@cnMaxLevelValF = 0.06
  res@cnLevelSpacingF = 0.01
;
;  res@cnLevelSelectionMode = "ExplicitLevels"
;  res@cnLevels = (//)
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
  res@cnFillPalette = "GMT_polar" 
  ;res@cnFillPalette = "GMT_seis" 
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 30. 
;  res@mpMinLatF = -30.
;
  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
  res@tiMainString = mainstring
;  res@tiXAxisString = 
;  res@tiYAxisString = 
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString = 
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
;plot = gsn_csm_contour_map(wks,cndata,res)


  plot = new(neval, "graphic")

  do i=0,neval-1
    i_plus = i+1
    res@gsnLeftString = leftstring+i_plus
    res@gsnRightString = sprintf("%5.2f",var_eof@pcvar(i))+" %"
    ;res@gsnRightString = rightstring
    plot(i) = gsn_csm_contour_map(wks,cndata(i,:,:),res)
  end do

;-------
; panel
;-------

  resp = True
;  resp@gsnFrame = False
  resp@txString = txstring
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks,plot,(/row1,column1/),resp)
  ;gsn_panel(wks,plot(start1:end1:stride1),(/row1,column1/),resp)


EOF
#*** case: "eof-pc_contour-1file" end ***

#*** case: "eof-variance_cumsum-1file" start ***
elif [ $casename_work -a $casename_work == "eof-variance_cumsum-1file" ]; then
cat >> $ncl_name << EOF

;*** general settings ***
  varname = "$var01"  ; variable name

;*** EOF settings ***
  neval  = 10    ; # of eigenvalues
  optEOF = True  ; @jopt = 1, use correlation matrix, defaut is covariance
                 ; @prrit = 50, # non-missing points in order to do EOF

;*** plot settings ***
  mainstring = ""
  xstring = "Principal Components"
  ystring = "Cumulative Fractionl of Variance Explained (%)"

;-------------------------------
; Description:
;   Do EOF analysis of a dataset, and them compute fraction of variance explained then plot cumulative sum
;-------------------------------

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  var     = file_${suffix01}->\$varname\$
  ;var     = file_${suffix01}->\$varname\$(0:10,:)
  var4eof = var

;printVarSummary(var)

;------
; EOF
;------  

  ;*** Computes empirical orthogonal functions (EOFs, aka: Principal Component Analysis) ***
  ;
  ; function eofunc_n_Wrap(data, neval, optEOF, dim)
  ; function eofunc       (data, neval, optEOF)
  ;   [INPUT]
  ;   data  : numeric, A multi-dimensional array, for eofunc, rightmost dimestion MUST be time
  ;   neval : integer, returned eigenvalues and eigenvectors
  ;   optEOF: logical, optEOF@jopt  = 1, use correlation matrix. 0: use covariance matrix (defaut)
  ;                    optEOF@pcrit = 85, a float value that indicates the percentage of non-missing points that must exist at any single point in order to be calculated.
  ;   dim   : integer, dimension containing the number of observations. Generally, this is the time dimension.
  ;
  ;   [RETURN]
  ;   A multi-dimensional array of the same size as data with the dimension indicated by dim removed, and an additional leftmost dimension of the same size as neval added. 
  ;     Will contain the following attributes:
  ;     eval  : a one-dimensional array of size neval that contains the eigenvalues.
  ;     pcvar : a one-dimensional array of size neval equal to the percent variance associated with each eigenvalue.
  ;     pcrit : The same value and type of optEOF@pcrit if the user changed the default.
  ;     matrix: A string indicating the type of matrix used, "correlation" or "covariance".
  ;     method: A string indicating the status of the matrix, "transpose" or "no transpose"
  ;     sig   : (v6.3.0 onward) A one-dimensional logical array of size neval indicating if each eigenvalue is significantly separated from adjacent eigenvalues. See eofunc_north.


;*** do EOF ***
  var_eof = eofunc(var4eof, neval,optEOF)
;printVarSummary(var_eof)

;*** fraction of variance explained ***
  pcvar = var_eof@pcvar
;printVarSummary(pcvar)

;*** cumulative sum of fraction of variance ***
  pcvar_cumsum = dim_cumsum(pcvar,0) ; cumulative sum, when encountering missing value, 0:stop, 1: resume, 2: add aero
                                     ; http://www.ncl.ucar.edu/Document/Functions/Built-in/dim_cumsum.shtml
;print(pcvar_cumsum)

;*** set plot - xx ***
  nn = dimsizes(pcvar)

  xx_values = new(nn, "integer")
  xx_labels = new(nn, "string")

  do i=1,nn
    i_minus = i-1
    xx_values(i_minus) = i
    xx_labels(i_minus) = i
  end do

;*** set plot - yy ***
  xx = xx_values
  yy = pcvar_cumsum

;------------
; write out
;------------

;------
; plot
;------
  res = True

;*** gsn res ***
  res@gsnMaximize = True
;  res@gsnFrame = False
;  res@gsnDraw = False
;
;*** adjust axis type ***
;  res@xyYStyle = "log"  ;  "Linear" "Irregular"
;  res@trYReverse = True
;
;*** adjust XY range ***
  res@trXMinF = min(xx_values)
  res@trXMaxF = max(xx_values)
  res@trYMinF = 0. 
  res@trYMaxF = 100.
;
;*** adjust xy line mode ***
  res@xyMonoMarkLineMode = True
  res@xyMarkLineMode  = "MarkLines"  ; "Lines" "Markers" 
;  res@xyMarkLineModes = (/"MarkLines"/)
;
;*** adjust xy dash pattern ***
;  res@xyMonoDashPattern = False
;  res@xyDashPattern = 1
;  res@xyDashPatterns = (/1,2,3/)
;
;*** adjust xy line color ***
;  res@xyMonoLineColor = False
;  res@xyLineColors = (/1,3,3,14,14/)
;  res@xyLineColor = 10
;
;*** adjust xy markers ***
  res@xyMonoMarker = True
  res@xyMarker = 4
;  res@xyMarkers = (//)
;
;  res@xyMonoMarkerColor = False
;  res@xyMarkerColor = 1
;  res@xyMarkerColors = (//)
;
;*** adjust xy line thickness ***
  res@xyMonoLineThickness = True
  res@xyLineThicknessF = 3.
;  res@xyLineThicknesses = 
;
;*** adjust tickmark ***
;  res@tmXTOn = False
;  res@tmXTLabelsOn = False
;
  res@tmXBMode = "Explicit"
  res@tmXBValues = xx_values
  res@tmXBLabels = xx_labels
;  res@tmXBLabels = flt2string(res@tmXBValues)
;  res@tmXBLabels = (//)
;  res@tmXBMinorValues = (//)
;
;*** adjust grids ***
;  res@tmXMajorGrid = True
  res@tmYMajorGrid = True
  res@tmYMinorGrid = True
  res@tmYMajorGridLineDashPattern = 2
  res@tmYMinorGridLineDashPattern = 2
  res@tmYMajorGridLineColor = 1
  res@tmYMinorGridLineColor = 1
 
;*** adjust string ***
  res@tiMainString = mainstring
  res@tiXAxisString = xstring
  res@tiYAxisString = ystring
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString =

;*** plot ***
  wks = gsn_open_wks(wks_type,wks_name)  
  plot = gsn_csm_xy(wks,xx,yy,res)


EOF
#*** case: "eof-variance_cumsum-1file" end ***

#*** case: "kmeans_cluster-contour-file1" start ***
elif [ $casename_work -a $casename_work == "kmeans_cluster-contour-file1" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   Do K-means cluster analysis of a dataset, and then plot all clusters on a map
;--------------------

;----------
; settings
;----------

;*** general settings ***
  varname = "$var01"  ; variable name

;*** EOF settings ***
  nkmeans  = 4      ; # of cluster
  optkeams = False  ; default option

;*** plot settings ***
  mainstring = ""
  leftstring = "k-means cluster "

;*** panel plot settings ***
  row1    = 2  ; row number of panel plot
  column1 = 2  ; column number of panel plot
;  start1  = 0  ; start index of plots
;  end1    = 10 ; end index of plots 
;  stride1 = 1  ; stride of plots

;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  var     = file_${suffix01}->\$varname\$
  ;var     = file_${suffix01}->\$varname\$(0:10,:)
  var4kmeans = var(grid|:, time|:)

;printVarSummary(var)

;-----------------------------
; k-means clustering analysis
;-----------------------------

  ;*** Performs k-means clustering via the Hartigan and Wong AS-136 algorithm ***
  ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/kmeans_as136.shtml
  ;
  ; function kmeans_as136 (data, k, optkmeans)
  ;   [INPUT]
  ;   data     : numeric, A multi-dimensional array, rightmost dimestion MUST be time
  ;   k        : integer, User-specified number of clusters.
  ;   optkmeans: logical, @iter = 25,  the maximum iteration count (default=25)
  ;                       @iseed = 1, results in the center clusters being set to the first k sets of observations
  ;                              = 2, results in the cluster centers being set to a random set of observations
  ;   [RETURN]
  ;     The return array (say), clcnter, will contain the cluster centers. It will be dimensioned (k,N), where N collectively represents the 'variable' dimension(s).
  ;       clcnter will have the following attributes associated with it:
  ;       @id   - a one-dimensional integer array of size M indicating the cluster to which each observation is assigned.
  ;       @npts - a one-dimensional integer array of size k containing the number of points in each cluster.
  ;       @ss2  - a one-dimensional double array of size k containing the within-cluster sum of squares.

  var_kmeans = kmeans_as136(var4kmeans, nkmeans, False)
;printVarSummary(var_kmeans)

;-----------------------
; regrid EOF to lat/lon
;-----------------------

  lon1 = fspan(0.,358.,180)
  lat1 = fspan(30.,-30.,31)

  ind1 = file_${suffix01}->ocean_idx   ; in order: (lon=0,lat=30~-30, lon=2, lat=30~-30)
  
  nlat = 31
  nlon = 180
  nocn = dimsizes(ind1)

  var_kmeans_latlon = new((/nkmeans,nlat,nlon/),"float")
  var_kmeans_latlon = -999.99
  var_kmeans_latlon@_FillValue = -999.99
  var_kmeans_latlon!0 = "time"
  var_kmeans_latlon!1 = "lat" 
  var_kmeans_latlon!2 = "lon"

  var_kmeans_latlon&lat = lat1
  var_kmeans_latlon&lat@units = "degree_north"  

  var_kmeans_latlon&lon = lon1
  var_kmeans_latlon&lon@units = "degree_east"

  do k=0,nocn-1
    index1 = toint(ind1(k))
    i1 = toint(tofloat(index1-1.)/31.)
    j1 = index1 - i1*31 - 1
    ;print(index1+" , "+j1+" , "+i1)
    var_kmeans_latlon(:,j1,i1) = (/var_kmeans(:,k)/)
  end do

printVarSummary(var_kmeans_latlon)

  cndata = var_kmeans_latlon
 
;-------------
; set colors
;-------------
;
  option_foreback = False
;  cmap1 = ignorant_select_colormap("amwg",999,option_foreback)
  cmap = ignorant_select_colormap("BlueDarkRed18",(/5,6,7,8,10, \\
                                                     11,12,13,14,15,16,17,18,19/),option_foreback)
;  cmap_all = ignorant_combine_colormaps(cmap1,cmap2,0)
;
;  cnmap1 = ignorant_define_colormap("blue_red",999)
;  cnmap1 = ignorant_define_colormap("rainbow_white",(/1,2,3,4,5/))
;
;
;-------------------
; set work station
;-------------------
  wks = gsn_open_wks(wks_type,wks_name)
;
;  gsn_define_colormap(wks,"gui_default")
;  gsn_draw_colormap(wks)
;  gsn_merge_colormaps(wks,"amwg","gui_default")
;drawNDCGrid(wks)

;----------------
; set resources
;----------------
;
  res = True

;*** gsn resources ***
  res@gsnMaximize = True
  res@gsnFrame = False
  res@gsnDraw = False
;  res@gsnAddCyclic = False
;
;*** adjust X,Y axis ***
;  res@gsnXAxisIrregular2Log = True
;  res@gsnXAxisIrregular2Linear = True
;  res@trYReverse = True
;
;*** adjust contour levels ***
;  res@cnLevelSelectionMode = "ManualLevels"
;  res@cnMinLevelValF = -0.06
;  res@cnMaxLevelValF = 0.06
;  res@cnLevelSpacingF = 0.01
;
  res@cnLevelSelectionMode = "ExplicitLevels"
  res@cnLevels = (/-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.,1.5,2.,3./)
;
;*** adjust contour fill ***
  res@cnFillOn = True
  res@cnFillMode = "RasterFill"
;  res@cnMissingValFillColor = 28  ; light gray when color map is "default"
;  res@cnFillColors = 
;  res@gsnSpreadColors = True
;  res@gsnSpreadColorStart = 1
;  res@gsnSpreadColorEnd = -1
;
  res@cnFillPalette = cmap
  ;res@cnFillPalette = "GMT_polar" 
  ;res@cnFillPalette = "GMT_seis" 
;  
;*** adjust contour line & labels***
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

;  res@cnInfoLabelOn = False

;  res@cnLineLabelsOn = True
;  res@cnLineLabelBackgroundColor = -1  ; transparent

;  res@cnLinesOn = True
;  res@gsnContourZeroLineThicknessF = 2.
;  res@gsnContourPosLineDashPattern = 0
;  res@gsnContourNegLineDashPattern = 2

;  res@cnLineThicknessF = 2.


;*** adjust map ***
;  res@mpLimitMode = "LatLon"
;  res@mpMaxLatF = 30. 
;  res@mpMinLatF = -30.
;
  res@mpCenterLonF = 180.
;
;*** adjust tickmark ***
;  res@tmXBOn = False
;  res@tmXTOn = False
;  res@tmYROn = False
;  res@tmYLOn = False
;
;*** adjust label bar ***
;  res@lbLabelBarOn = False
;  res@lbOrientation = "vertical"
;
;  res@lbTitleOn = True
;  res@lbTitleString = ""
;  res@lbTitlePosition = "Bottom"
;  res@lbTitleFontHeightF = ""
;
;  res@lbLabelAlignment = "BoxCenters"
;  res@lbLabelStrings = (//)
;  res@lbLabelFontHeightF = 0.01
;  res@lbLabelJust       = "CenterLeft"
;
;*** set title string ***
  res@tiMainString = mainstring
;  res@tiXAxisString = 
;  res@tiYAxisString = 
;  res@gsnLeftString =
;  res@gsnLeftStringFontHeightF =
;  res@gsnCenterString =
;  res@gsnRightString = 
;
;

;-------
; plot
;-------
;opt = True                 ; option of gsn_csm_contour_map_avg
;opt@LatWeighted = False    ; .True. (default) : do latitude cosine-weighted average, 
                            ;                    the coordinate variable MUST be lat/latitude with units of  "degrees_norh"
                            ; .False.          : no weighted average
;opt@MeanFormat = "%7.3f"   ; set mean value format
;opt@MeanPrefix = "mean: "  ; set prefix of mean value
;
;plot = gsn_csm_contour(wks,cndata,res)
;plot = gsn_csm_contour_map(wks,cndata,res)


  plot = new(nkmeans, "graphic")

  do i=0,nkmeans-1
    i_plus = i+1
    res@gsnLeftString = leftstring+i_plus
    ;res@gsnRightString = sprintf("%5.2f",var_eof@pcvar(i))+" %"
    plot(i) = gsn_csm_contour_map(wks,cndata(i,:,:),res)
  end do

;-------
; panel
;-------

  resp = True
;  resp@gsnFrame = False
;  resp@txString = ""
;  resp@gsnPanelRowSpec = True
;  resp@gsnPanelLeft = 0.1
;  resp@gsnPanelRight = 0.9
;  resp@gsnPanelTop = 0.9
;  resp@gsnPanelBottom = 0.05
;  resp@gsnPanelXWhiteSpacePercent = 5
;  resp@gsnPanelYWhiteSpacePercent = 5

;*** panel label bar ***
;  resp@gsnPanelLabelBar = True
;  resp@pmLabelBarWidthF = 0.7
;  resp@pmLabelBarHeightF = 0.04
;  resp@pmLabelBarOrthogonalPosF = -0.04
;  resp@lbTitleOn = True
;  resp@lbTitleString = "" 
;  resp@lbTitleFontHeightF = 0.015

  gsn_panel(wks,plot,(/row1,column1/),resp)
  ;gsn_panel(wks,plot(start1:end1:stride1),(/row1,column1/),resp)


EOF
#*** case: "kmeans_cluster-contour-file1" end ***

#*** case: "cloudsat-groundtrack-ascd_dscd" start ***
elif [ $casename_work -a $casename_work == "cloudsat-groundtrack-ascd_dscd" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   plot groundtracks of a satellite over a map according to a sorted ascending/descending series
;--------------------

;-----------
; settings
;-----------

  ;wks_name = "fig-groundtracks-ascd_dscd-map"

  track1 = 0
  track2 = 15
  ;track2 = 232 ; total number of tracks

  mainstring = "track ["+track1+"] to track ["+track2+"]"
  rightstring = "Red: ascending, Blue: descending (From light to dark)"


;-------------
; open files
;-------------

  file_${suffix01} = addfile( "${file01}" , "r" )

  info_ascd = file_${suffix01}->INFO_ASCEND
  info_dscd = file_${suffix01}->INFO_DESCEND

  steps_ascd = file_${suffix01}->STEPS_ASCEND
  steps_dscd = file_${suffix01}->STEPS_DESCEND

  ascd_lat = info_ascd(:,1,:)
  ascd_lon = info_ascd(:,2,:)

  dscd_lat = info_dscd(:,1,:)
  dscd_lon = info_dscd(:,2,:)

;print(sum(steps_ascd))
;print(sum(steps_dscd))
  
;print()
;printVarSummary(info_ascd)

;----------------------------------------------
; print ascending/descending seriers for check
;----------------------------------------------
;
;  number = dimsizes(info_ascd(:,0,0))
;  jj = 0
;
;  do i=0,number-1
;  ;do i=0,3
;  ;do i=number-3,number-1
;    steps_ad = steps_ascd(i)
;    time_ad = info_ascd(i,0,:)
;    lat_ad = info_ascd(i,1,:)
;    lon_ad = info_ascd(i,2,:)
;
;    steps_dd = steps_dscd(i)
;    time_dd = info_dscd(i,0,:)
;    lat_dd = info_dscd(i,1,:)
;    lon_dd = info_dscd(i,2,:)
;
;    do j=0,steps_ad-1
;      print(jj+", time: "+sprintf("%8.0f",time_ad(j))+", lat: "+lat_ad(j)+", lon: "+lon_ad(j)+", ascd number: "+i)
;      jj = jj+10
;    end do
;
;    do j=0,steps_dd-1
;      print(jj+", time: "+sprintf("%8.0f",time_dd(j))+", lat: "+lat_dd(j)+", lon: "+lon_dd(j)+", dscd number: "+i)
;      jj = jj+10
;    end do
;    
;    delete(time_ad)
;    delete(lat_ad)
;    delete(lon_ad)
;    delete(time_dd)
;    delete(lat_dd)
;    delete(lon_dd)
;  end do

;---------------
; set map area
;---------------

;  mp_lat_max = 30.   ; map lat/lon area
;  mp_lat_min = -30.
;  mp_lon_max = 150.
;  mp_lon_min =  90.

;  box_lat_max = 20.  ; user-drawed box lat/lon area
;  box_lat_min = -10.
;  box_lon_max = 140.
;  box_lon_min = 100.

;---------------
; NCL resources
;---------------
;
  wks = gsn_open_wks(wks_type,wks_name)

  option_foreback = False
  cmap_ascd = ignorant_select_colormap("MPL_Reds",999,option_foreback)
  cmap_dscd = ignorant_select_colormap("MPL_Blues",999,option_foreback)

  ncmap_ascd = dimsizes(cmap_ascd(:,0))
  color_ascd = toint(fspan(33,ncmap_ascd-1,track2-track1+1))

  ncmap_dscd = dimsizes(cmap_dscd(:,0))
  color_dscd = toint(fspan(33,ncmap_dscd-1,track2-track1+1))

  mpres                    = True        ; Plot options desired.
  mpres@gsnFrame           = False       ; Don't advance the frame
  mpres@gsnMaximize        = True
  mpres@tiMainString = mainstring
  mpres@gsnRightString = rightstring

  ;mpres@mpLimitMode = "LatLon"
  ;mpres@mpMaxLatF = mp_lat_max
  ;mpres@mpMinLatF = mp_lat_min
  ;mpres@mpMaxLonF = mp_lon_max
  ;mpres@mpMinLonF = mp_lon_min

;  mpres@tiMainString       = ""
;  mpres@gsnRightString    = ("Source:"+file_name)
  plot = gsn_csm_map(wks,mpres)          ; Draw map   

  lnres = True
  lnres@gsLineColor = 2
  lnres@gsLineThicknessF = 3.
  ;gsn_polyline(wks,plot,(/box_lon_max,box_lon_max,box_lon_min,box_lon_min,box_lon_max/), \\
  ;                      (/box_lat_max,box_lat_min,box_lat_min,box_lat_max,box_lat_max/),lnres)
                                         ; trajectory
  gsres                    = True        ; "Graphic Style" resources
  gsres@gsMarkerSizeF      = 10.0        ; Marker size
  gsres@gsMarkerThicknessF = 1.0         ; Marker thickness
  gsres@gsMarkerIndex      = 1           ; Marker style

  gsres_ad = gsres
  gsres_dd = gsres
  
  do i=track1,track2
    c1 = color_ascd(i)
    gsres_ad@gsMarkerColor      = cmap_ascd(c1,:)      ; Marker color
    gsn_polymarker(wks,plot,ascd_lon(i,:),ascd_lat(i,:),gsres_ad) ; plot trajectory
  end do

  do i=track1,track2
    c1 = color_ascd(i)
    gsres_dd@gsMarkerColor      = cmap_dscd(c1,:)      ; Marker color
    gsn_polymarker(wks,plot,dscd_lon(i,:),dscd_lat(i,:),gsres_dd) ; plot trajectory
  end do

frame(wks)

EOF
#*** case: "cloudsat-groundtrack-ascd_dscd" end ***

#*** case: "cloudsat-groundtrack-time_series" start ***
elif [ $casename_work -a $casename_work == "cloudsat-groundtrack-time_series" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   plot groundtrack of a satellite over map according to time series of satallite track file 
;
;--------------------

;-------------
; open files
;-------------

  filename = "${file01}"
  nn = 138240    ; total # of time steps
  start1 = 0     ; start time step for drawing
  end1   = 8642  ; end   time step for drawing, 8642 = first day
  stride = 1     ; stride, 10x seconds

  mp_lat_max = 30.   ; map lat/lon area
  mp_lat_min = -30.
  mp_lon_max = 150.
  mp_lon_min =  90.

  box_lat_max = 20.  ; user-drawed box lat/lon area
  box_lat_min = -10.
  box_lon_max = 140.
  box_lon_min = 100.

;----------------
; read variables
;----------------

  data = asciiread(filename, (/nn,3/), "float")

  time_all = data(:,0)
  lat_all  = data(:,1)
  lon_all  = data(:,2)

  lat = lat_all(start1:end1:stride)
  lon = lon_all(start1:end1:stride)
 
  nsteps = dimsizes(lat)

printVarSummary(lat)
printVarSummary(lon)

;---------------
; NCL resources
;---------------
;
  wks = gsn_open_wks(wks_type,wks_name)

  mpres                    = True        ; Plot options desired.
  mpres@gsnFrame           = False       ; Don't advance the frame
  mpres@gsnMaximize        = True

  ;mpres@mpLimitMode = "LatLon"
  ;mpres@mpMaxLatF = mp_lat_max
  ;mpres@mpMinLatF = mp_lat_min
  ;mpres@mpMaxLonF = mp_lon_max
  ;mpres@mpMinLonF = mp_lon_min

  mpres@tiMainString       = ""
;  mpres@gsnRightString    = ("Source:"+file_name)
  plot = gsn_csm_map(wks,mpres)          ; Draw map   

  lnres = True
  lnres@gsLineColor = 2
  lnres@gsLineThicknessF = 3.
  ;gsn_polyline(wks,plot,(/box_lon_max,box_lon_max,box_lon_min,box_lon_min,box_lon_max/), \\
  ;                      (/box_lat_max,box_lat_min,box_lat_min,box_lat_max,box_lat_max/),lnres)
                                         ; trajectory
  gsres                    = True        ; "Graphic Style" resources
  gsres@gsMarkerSizeF      = 10.0        ; Marker size
  gsres@gsMarkerThicknessF = 1.0         ; Marker thickness
  gsres@gsMarkerColor      = "Blue"      ; Marker color
  gsres@gsMarkerIndex      = 1           ; Marker style

;do i=0,nsteps-1
 
  ;if (ff.le.47) then
    gsres@gsMarkerColor      = "Blue"      ; Marker color
  ;else if (ff.gt.47 .and. ff.le.101) then
  ;  gsres@gsMarkerColor      = "Green"      ; Marker color
    ;gsres@gsMarkerColor      = "Blue"      ; Marker color
  ;else 
  ;  gsres@gsMarkerColor      = "Black"      ; Marker color
    ;gsres@gsMarkerColor      = "Blue"      ; Marker color
  ;end if
 ; end if

  gsn_polymarker(wks,plot,lon,lat,gsres) ; plot trajectory
  ;gsn_polyline(wks,plot,lon,lat,lnres) ; plot trajectory
  ;gsn_polyline(wks,plot,lat,lon,gsres) ; plot trajectory

;end do

frame(wks)



EOF
#*** case: "cloudsat-groundtrack-time_series" end ***

#*** case: "scam-arm95-time_series" start ***
elif [ $casename_work -a $casename_work == "scam-arm95-time_series" ]; then
cat >> $ncl_name << EOF
;----------------------------
; Description:
;   draw time series of SCAM fields with ARM 1995 IOP
;   add/modify plot variables in *plot_var* & *string_var*
;
;----------------------------

;------------------
; general setting
;------------------
  filename = ""

  title = "SCAM-ARM_1995"
  labelnames_var = (/" "," "/)
  labelnames_diff = labelnames_var(1) +" minus " + labelnames_var(0)

  wks_type = "png"
  wks_name = "test111" 

  time_scam = fspan(0.,1225.,1226)  ; scam-arm95 time steps

;-----------------------------
; open files & read varibles
;-----------------------------

  file_${suffix01} = addfile( "${file01}" , "r" )
  file_${suffix02} = addfile( "${file02}" , "r" )

  FLUTC_${suffix02} = file_${suffix02}->FLUTC(:,0,0)
  FLNTC_${suffix02} = file_${suffix02}->FLNTC(:,0,0)
  FLNT_${suffix02} = file_${suffix02}->FLNT(:,0,0)

  FLUTC_${suffix01} = file_${suffix01}->FLUTC_MC6(:,0,0)
  FLNTC_${suffix01} = file_${suffix01}->FLNTC_MC6(:,0,0)
  FLNT_${suffix01} = file_${suffix01}->FLNT_MC6(:,0,0)

;---------------
; post process
;---------------

  FLUTC_all = (/FLUTC_${suffix02},FLUTC_${suffix01}/)
  FLNTC_all = (/FLNTC_${suffix02},FLNTC_${suffix01}/)
  FLNT_all  = (/FLNT_${suffix02},FLNT_${suffix01}/)

;----------------
; plot variables
;----------------
  plot_var = (/FLNT_all, \\
               FLDS_all, \\
               FLNS_all \\
               /)
  string_var = (/"info 1" , \\
                 "info 2" ,\\
                 "info 3" \\
                /)
  ;string_var = " "+string_var
  unit_var = string_var
  unit_var = "unit 1"   

  plot_diff = plot_var(:,1,:) - plot_var(:,0,:)
  string_diff = "Diff - "+string_var
  unit_diff = unit_var

  nvar  = dimsizes(string_var)
  ndiff = dimsizes(string_var)

;printVarSummary(plot_diff)
;printVarSummary(FLNTC_all)
;printVarSummary(FLDSC_all)
;printVarSummary(FLNSC_all)
;printVarSummary(COOLC_all)

;-------------------
; set work station
;-------------------
;  wks_type = "png"
;  wks_type@wkWidth = 1600
;  wks_type@wkHeight = 1200
;
  wks = gsn_open_wks(wks_type,wks_name)

  gsn_define_colormap(wks,"amwg")
;  gsn_draw_colormap(wks)

;----------------
; set resources
;----------------

  opt = True

;*** share res ***
  res = True
  res@gsnFrame = False
  res@gsnDraw = False

  res@xyMonoLineColor = False
  res@xyLineColors = (/15,9,3/)

  res@tmXTOn = False
  res@tmYROn = False

  res@trXMaxF = 1225.

;  res@vpXF = 0.13 ;0.12
  res@tiYAxisString = "Flux (W/m~S~2~N~)"
  res@tiYAxisFontHeightF  = 0.02

  tt_major = fspan(1.5,1153.5,9)
  tt_minor = fspan(73.5,1081.5,8)

  a_chrtime = (/"18~C~Jul",    \\
                "20","22","24","26","28","30", \\
                " 01~C~Aug","03"/)

  a_labeltime  = tt_major
  a_labelminor = tt_minor

  res@tmXBValues = a_labeltime
  res@tmXBLabels = a_chrtime
  res@tmXBMinorValues = a_labelminor

  res@tmXBMode = "Explicit"
  res@tmXBMajorThicknessF = 1.2
  res@tmXBMinorThicknessF = 1.

;-------
; plot
;-------
  plot = new(nvar+ndiff,graphic)
  jj = 0

  do ii = 0,nvar-1
    res@tiMainString   = string_var(ii)
    res@gsnRightString = unit_var(ii)
    plot(jj) = ignorant_xy(wks,time_scam,plot_var(ii,:,:),labelnames_var,res,opt)
    jj = jj+1
  end do

  do ii = 0,ndiff-1
    res@tiMainString   = string_diff(ii)
    res@gsnRightString = unit_diff(ii)
    res@xyLineColors = (/1,1,1/)
    plot(jj) = ignorant_xy(wks,time_scam,plot_diff(ii,:),labelnames_diff,res,opt)
    jj = jj+1
  end do

 ;
  resp = True
  resp@txString = title
  resp@gsnPaperOrientation = "landscape"
  resp@gsnMaximize = True
;  gsn_panel(wks,plot(0:2),(/1,3/),resp)
;  gsn_panel(wks,plot(3:5),(/1,3/),resp)
  gsn_panel(wks,plot,(/2,5/),resp)

EOF
#*** case: "scam-arm95-time_series" end ***

#*** case: "scatter_criteria-input_1D" start ***
elif [ $casename_work -a $casename_work == "scatter_criteria-input_1D" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   draw a scatter plot with some critetias for a 1-D input data
;--------------------

;------------------
; general setting
;------------------

  files = (/  \\
          /)

  nfile = dimsizes(files)
  titles = files
  wks_names = files
  xaxisstrings = files
  yaxisstrings = files

  titles = (/ \\
           /)

  wks_names = (/ \\
               /)
 
  xaxisstrings = (/  \\
                /)

  yaxisstrings = (/  \\
                  /)

  wks_type = "png"

  varvar = ""
  gsnleftstring = ""
  gsnrightstring = ""

;*** criteria ***
  ctr1_name = ""  ; criteria 1
  ctr1_max = 1.E+3        ; all values between ctr1_max and ctr1_min will be plotted, otherwise set to missing value
  ctr1_min = -1

  ctr2_name = ""  ; creteria 2
  ctr2_max = 100.         ; all values between ctr2_max and ctr2_min will be plotted, otherwise set to missing value
  ctr2_min = -1. 

  option_write_ctr = False  ; turn on/off of printing criteria on the plot
  format1 = "%1.1E"         ; string format
  format2 = "%1.1E"
  ctr_all_name = sprintf (format1,ctr1_min)+" <= "+ctr1_name+" <= "+sprintf (format1,ctr1_max)+" & "+ \\
                 sprintf (format2,ctr2_min)+" <= "+ctr2_name+" <= "+sprintf (format2,ctr2_max)
  
;-----------------
; program start 
;-----------------

do ff=0,nfile-1

  filename_${suffix01} = files(ff)
  filename_${suffix02} = filename_${suffix01}

  file_${suffix01} = addfile( filename_${suffix01} , "r" )
  file_${suffix02} = addfile( filename_${suffix02} , "r" )

  print("processing "+ff+"/"+nfile+",  ["+filename_${suffix01}+"]")

  title       = titles(ff)
  wks_name    = wks_names(ff)
  xaxisstring = xaxisstrings(ff)
  yaxisstring = yaxisstrings(ff)

;-----------------------------
; open files & read varibles
;-----------------------------

  varvar_MC6 = varvar + "_MC6"

  var_${suffix01}      = file_${suffix01}->\$varvar_MC6\$(:,0,0)
  var_${suffix02} = file_${suffix02}->\$varvar\$(:,0,0)

  var_${suffix01}@_FillValue = -999.99
  var_${suffix02}@_FillValue = var_${suffix01}@_FillValue

  ctr1_var_${suffix01} = file_${suffix01}->\$ctr1_name\$(:,0,0)
  ctr1_var_${suffix02} = file_${suffix02}->\$ctr1_name\$(:,0,0)

  ctr2_var_${suffix01} = file_${suffix01}->\$ctr2_name\$(:,0,0)
  ctr2_var_${suffix02} = file_${suffix02}->\$ctr2_name\$(:,0,0)

  ntime = dimsizes(var_${suffix01})

  do t=0,ntime-1
    if ( ctr1_var_${suffix01}(t) .ne. ctr1_var_${suffix02}(t) ) then
      print("ERROR: "+ctr1_name+" does not match between two cases!!!, error at time: "+t)
    else
      ctr1_val = ctr1_var_${suffix01}(t)
    end if

    if ( ctr2_var_${suffix01}(t) .ne. ctr2_var_${suffix02}(t) ) then
      print("ERROR: "+ctr2_name+" does not match between two cases!!!, error at time: "+t)
    else
      ctr2_val = ctr2_var_${suffix01}(t)
    end if

;print(ctr1_val+" , "+ctr2_val)

    if (ctr1_val.ge.ctr1_min .and. ctr1_val.le.ctr1_max  \\
        .and. ctr2_val.ge.ctr2_min .and. ctr2_val.le.ctr2_max  \\
        ) then
      aa=1
      ;print("yaya  "+ctr1_val+" , "+ctr2_val)
    else
      ;print("nono  "+ctr1_val+" , "+ctr2_val)
      var_${suffix01}(t) = -999.99
      var_${suffix02}(t) = -999.99
    end if
  end do

  ;var_${suffix01}(ind(var_${suffix01}.eq.0.)) = -999.99
  ;var_${suffix02}(ind(var_${suffix02}.eq.0.)) = -999.99

  pp1 = (/var_${suffix01},var_${suffix02}/)

  val_min = min(pp1)
  val_max = max(pp1)

;print(var_${suffix01}+" , "+var_${suffix02})

;-------------------
; set work station
;-------------------
;  wks_type = "png"
;  wks_type@wkWidth = 1600
;  wks_type@wkHeight = 1200
;
  wks = gsn_open_wks(wks_type,wks_name)

  gsn_define_colormap(wks,"amwg")
;  gsn_draw_colormap(wks)

;----------------
; set resources
;----------------

  opt = True

;*** share res ***
  res = True
  res@gsnFrame = False
;  res@gsnDraw = False
  res@gsnMaximize = True

  res@xyMarkLineMode = "Markers"
  ;res@xyMonoLineColor = False
  res@xyMarkerColors = (/15,9,3/)
  res@xyMarker = 4

  res@tmXTOn = False
  res@tmYROn = False

  res@trXMaxF = val_max
  res@trXMinF = val_min
  res@trYMaxF = val_max
  res@trYMinF = val_min

;  res@vpXF = 0.13 ;0.12
  res@tiMainString = title
  res@tiMainFontHeightF = 0.015

  res@tiYAxisString = yaxisstring
  res@tiXAxisString = xaxisstring
  res@gsnLeftString = gsnleftstring
  res@gsnRightString = gsnrightstring
  ;res@tiYAxisFontHeightF  = 0.02

;  tt_major = fspan(1.5,1153.5,9)
;  tt_minor = fspan(73.5,1081.5,8)

;  a_chrtime = (/"18~C~Jul",    \\
;                "20","22","24","26","28","30", \\
;                " 01~C~Aug","03"/)

;  a_labeltime  = tt_major
;  a_labelminor = tt_minor

;  res@tmXBValues = a_labeltime
;  res@tmXBLabels = a_chrtime
;  res@tmXBMinorValues = a_labelminor

;  res@tmXBMode = "Explicit"
;  res@tmXBMajorThicknessF = 1.2
;  res@tmXBMinorThicknessF = 1.

;-------
; plot
;-------

  plot = gsn_csm_xy(wks, var_${suffix02}, var_${suffix01}, res)

  lnres = True
  gsn_polyline(wks,plot,(/val_min,val_max/),(/val_min,val_max/),lnres)

  if (option_write_ctr) then
    txres = True
    txres@txFontHeightF = 0.015
    txres@txJust = "topleft"
    gsn_text(wks,plot,ctr_all_name,1.02*val_min,0.99*val_max,txres)
  end if

  frame(wks)

end do  ; end loop of files, ff

EOF
#*** case: "scatter_criteria-input_1D" end ***

#*** case: "scatter_criteria-input_2D" start ***
elif [ $casename_work -a $casename_work == "scatter_criteria-input_2D" ]; then
cat >> $ncl_name << EOF
;----------------------------
; Description:
;   draw a scatter plot with some critetias for a 2-D input data
;----------------------------

;------------------
; general setting
;------------------

  files = (/  \\
          /)
  nfile = dimsizes(files)
  titles = files
  wks_names = files
  xaxisstrings = files
  yaxisstrings = files

  titles = (/ \\
           /)

  wks_name_heads = (/ \\
               /)

  xaxisstrings = (/  \\
                /)

  yaxisstrings = (/  \\
                  /)

  wks_type = "png"

;*** criteria ***
  ctr1_name = ""  ; criteria 1
  ctr1_max = 1.E+3        ; all values between ctr1_max and ctr1_min will be plotted, otherwise set to missing value
  ctr1_min = -1
  ;ctr1_max = 1.E-6        ; all values between ctr1_max and ctr1_min will be plotted, otherwise set to missing value
  ;ctr1_min = 0

  ctr2_name = ""  ; creteria 2
  ctr2_max = 100.         ; all values between ctr2_max and ctr2_min will be plotted, otherwise set to missing value
  ctr2_min = -1.
  ;ctr2_max = 1.E-6         ; all values between ctr2_max and ctr2_min will be plotted, otherwise set to missing value
  ;ctr2_min = 0.

  option_write_ctr = False  ; turn on/off of printing criteria on the plot
  format1 = "%1.1E"         ; string format
  format2 = "%1.1E"
  ctr_all_name = sprintf (format1,ctr1_min)+" <= "+ctr1_name+" <= "+sprintf (format1,ctr1_max)+" & "+ \\
                 sprintf (format2,ctr2_min)+" <= "+ctr2_name+" <= "+sprintf (format2,ctr2_max)

;---------------
; program start
;---------------

  band_name1 = (/"10-250 cm~S~-1", "250-500 cm~S~-1", "500-630 cm~S~-1", "630-700 cm~S~-1", \\
                "700-820 cm~S~-1", "820-980 cm~S~-1", "980-1080 cm~S~-1", "1080-1180 cm~S~-1", \\
                "1180-1390 cm~S~-1","1390-1480 cm~S~-1","1480-1800 cm~S~-1", "1800-2080 cm~S~-1", \\
                "2080-2250 cm~S~-1", "2250-2380 cm~S~-1","2380-2600 cm~S~-1","2600-3000 cm~S~-1" /)

do ff =0,nfile-1 

  filename_${suffix01} = files(ff)
  filename_${suffix02} = filename_${suffix01}

  file_${suffix01} = addfile( filename_${suffix01} , "r" )
  file_${suffix02} = addfile( filename_${suffix01} , "r" )

  print("processing "+ff+"/"+nfile+",  ["+filename_${suffix01}+"]")

;do band1 =1, 1 
;do band1 =16, 16 
do band1 =1, 16 

  print("  band "+band_name1(band1-1))

  title       = titles(ff)
  wks_name    = wks_name_heads(ff)+sprinti("%2.2i",band1)
  xaxisstring = xaxisstrings(ff)
  yaxisstring = yaxisstrings(ff)

  varvar = "TAUC"+sprinti("%2.2i",band1)
  gsnleftstring = "Cloud Optical Depth at "+band_name1(band1-1)
  gsnrightstring = "Unitless"

;-----------------------------
; open files & read varibles
;-----------------------------

  varvar_MC6 = varvar + "_MC6"

  var_${suffix01}      = file_${suffix01}->\$varvar_MC6\$(:,:,0,0)
  var_${suffix02} = file_${suffix02}->\$varvar\$(:,:,0,0)

  var_${suffix01}@_FillValue = -999.99
  var_${suffix02}@_FillValue = var_${suffix01}@_FillValue

  ctr1_var_${suffix01} = file_${suffix01}->\$ctr1_name\$(:,0,0)
  ctr1_var_${suffix02} = file_${suffix02}->\$ctr1_name\$(:,0,0)

  ctr2_var_${suffix01} = file_${suffix01}->\$ctr2_name\$(:,0,0)
  ctr2_var_${suffix02} = file_${suffix02}->\$ctr2_name\$(:,0,0)

  ntime = dimsizes(ctr1_var_${suffix01})

  ;do t=0,1225
  ;do k=0,29
  ;  if (var_${suffix02}(t,k).gt.var_${suffix01}(t,k)) then
  ;  ;if (var_${suffix02}(t,k).lt.var_${suffix01}(t,k)) then
  ;    print("${suffix02}: "+var_${suffix02}(t,k)+" , ${suffix01}: "+var_${suffix01}(t,k)+" , IWP: "+ctr2_var_${suffix01}(t)+" , LWP:"+ctr1_var_${suffix01}(t))
  ;  end if
  ;end do
  ;end do


  do t=0,ntime-1
    if ( ctr1_var_${suffix01}(t) .ne. ctr1_var_${suffix02}(t) ) then
      print("ERROR: "+ctr1_name+" does not match between two cases!!!, error at time: "+t)
    else
      ctr1_val = ctr1_var_${suffix01}(t)
    end if

    if ( ctr2_var_${suffix01}(t) .ne. ctr2_var_${suffix02}(t) ) then
      print("ERROR: "+ctr2_name+" does not match between two cases!!!, error at time: "+t)
    else
      ctr2_val = ctr2_var_${suffix01}(t)
    end if

;print(ctr1_val+" , "+ctr2_val)

    if (ctr1_val.ge.ctr1_min .and. ctr1_val.le.ctr1_max  \\
        .and. ctr2_val.ge.ctr2_min .and. ctr2_val.le.ctr2_max  \\
        ) then
      aa=1
;print("yaya  "+ctr1_val+" , "+ctr2_val)
    else
      bb=1
;print("nono  "+ctr1_val+" , "+ctr2_val)
      var_${suffix01}(t,:) = -999.99
      var_${suffix02}(t,:) = -999.99
    end if
  end do

  var_${suffix01}_1d = ndtooned(var_${suffix01})
  var_${suffix02}_1d = ndtooned(var_${suffix02})

  var_${suffix01}_1d(ind(var_${suffix01}_1d.eq.0.)) = -999.99
  var_${suffix02}_1d(ind(var_${suffix02}_1d.eq.0.)) = -999.99

  pp1 = (/var_${suffix01}_1d,var_${suffix02}_1d/)

  val_min = 1.E-5 ;min(pp1)
  val_max = max(pp1)

;print(var_${suffix01}+" , "+var_${suffix02})

;-------------------
; set work station
;-------------------
;  wks_type = "png"
;  wks_type@wkWidth = 1600
;  wks_type@wkHeight = 1200
;
  wks = gsn_open_wks(wks_type,wks_name)

  gsn_define_colormap(wks,"amwg")
;  gsn_draw_colormap(wks)

;----------------
; set resources
;----------------

  opt = True

;*** share res ***
  res = True
  res@gsnFrame = False
;  res@gsnDraw = False
  res@gsnMaximize = True

  res@xyXStyle = "log"
  res@xyYStyle = "log"

  res@xyMarkLineMode = "Markers"
  ;res@xyMonoLineColor = False
  res@xyMarkerColors = (/15,9,3/)
  res@xyMarker = 4

  res@tmXTOn = False
  res@tmYROn = False

  res@trXMaxF = val_max
  res@trXMinF = val_min
  res@trYMaxF = val_max
  res@trYMinF = val_min

;  res@vpXF = 0.13 ;0.12
  res@tiMainString = title
  res@tiMainFontHeightF = 0.015

  res@tiYAxisString = yaxisstring
  res@tiXAxisString = xaxisstring
  res@gsnLeftString = gsnleftstring
  res@gsnRightString = gsnrightstring
  ;res@tiYAxisFontHeightF  = 0.02

;  tt_major = fspan(1.5,1153.5,9)
;  tt_minor = fspan(73.5,1081.5,8)

;  a_chrtime = (/"18~C~Jul",    \\
;                "20","22","24","26","28","30", \\
;                " 01~C~Aug","03"/)

;  a_labeltime  = tt_major
;  a_labelminor = tt_minor

;  res@tmXBValues = a_labeltime
;  res@tmXBLabels = a_chrtime
;  res@tmXBMinorValues = a_labelminor

;  res@tmXBMode = "Explicit"
;  res@tmXBMajorThicknessF = 1.2
;  res@tmXBMinorThicknessF = 1.

;-------
; plot
;-------

  plot = gsn_csm_xy(wks, var_${suffix02}_1d, var_${suffix01}_1d, res)

  lnres = True
  gsn_polyline(wks,plot,(/val_min,val_max/),(/val_min,val_max/),lnres)

  if (option_write_ctr) then
    txres = True
    txres@txFontHeightF = 0.015
    txres@txJust = "topleft"
    ;gsn_text_ndc(wks,ctr_all_name,0.15,0.85,txres)
    gsn_text(wks,plot,ctr_all_name,1.2*val_min,0.95*val_max,txres)
  end if

  frame(wks)

end do ; do-loop of band 1-16
end do ; do-loop of files

EOF
#*** case: "scatter_criteria-input_2D" end ***

#*** case: "check-filevar-missing" start ***
elif [ $casename_work -a $casename_work == "check-filevar-missing" ]; then
cat >> $ncl_name << EOF
;-------------------------------
; Description:
;   check the all variables in a file to see if there is any missing value
;-------------------------------

;------------------
; general settings
;------------------

  filename = "${file01}"

;-------------
; open files
;-------------
  file_${suffix01} = addfile( filename , "r" )

  varnames = getfilevarnames(file_${suffix01})
  nvar = dimsizes(varnames)
  ;print(nvar)

  print("")
  print("file is ["+filename+"]")
  print("")

  do i=0,nvar-1
    var1 = varnames(i)
    temp1 = file_${suffix01}->\$var1\$

    if (any(ismissing(temp1))) then
      print("  WARNING: variable ["+var1+"] has missing data")
    end if

    delete(temp1)
  end do

EOF
#*** case: "check-filevar-missing" end ***

#*** case: "scatter-sort" start ***
elif [ $casename_work -a $casename_work == "scatter-sort" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   sort xdata and ydata by zdata and plot a scattering plot with X and Y
;--------------------
  
;------------------
; general setting
;------------------

  wks_name = "test111"
  wks_type = "png"

  title       = ""
  xaxisstring = ""
  yaxisstring = ""
  gsnleftstring = ""
  gsnrightstring = ""
  lgtitlestring = ""
  xymarker = 16

  nbin = 10               ; number of bin
  colormap = "rainbow"    ; define a colormap
  colors_all = ignorant_select_colormap(colormap, 999, True)
  dim_colors_all = dimsizes(colors_all(:,0))

;-------
; data
;-------
  ;npts   = 200
  ;xdata = random_normal(120.,3.,npts)
  ;ydata = random_normal(5.,1.,npts)
  ;zdata = random_normal(15.,1.,npts)

;-----------
; sort data
;-----------
  plotvars = sort_for_xyplot(xdata, ydata, zdata, nbin)
  xplotvar = plotvars(0,:,:)
  yplotvar = plotvars(1,:,:)
  labels   = plotvars@nbin_labels
  ;print(labels)

  xval_min = min(xplotvar)
  xval_max = max(xplotvar)
  yval_min = min(yplotvar)
  yval_max = max(yplotvar)

;-------------------
; set work station
;-------------------
;  wks_type = "png"
;  wks_type@wkWidth = 1600
;  wks_type@wkHeight = 1200
;
  wks = gsn_open_wks(wks_type,wks_name)

  gsn_define_colormap(wks,colormap)
;  gsn_draw_colormap(wks)

;----------------
; set resources
;----------------

  opt = True

;*** share res ***
  res = True
  res@gsnFrame = False
;  res@gsnDraw = False
  res@gsnMaximize = True

  res@xyMarkLineMode = "Markers"
  ;res@xyMonoMarkerColor = False
  ;res@xyMonoLineColor = False

  ncolors = dimsizes(labels)
  colors = toint(fspan(2,dim_colors_all-1,ncolors))  ; use colors spreading in the colormap
  res@xyMarkerColors = colors
  res@xyMarker = xymarker

  res@tmXTOn = False
  res@tmYROn = False

  ;res@trXMaxF = xval_max
  ;res@trXMinF = xval_min
  ;res@trYMaxF = yval_max
  ;res@trYMinF = yval_min

;  res@vpXF = 0.13 ;0.12
  res@tiMainString = title
  res@tiMainFontHeightF = 0.015

  res@tiYAxisString = yaxisstring
  res@tiXAxisString = xaxisstring
  res@gsnLeftString = gsnleftstring
  res@gsnRightString = gsnrightstring
  ;res@tiYAxisFontHeightF  = 0.02

;---Set some legend resurces
  res@pmLegendDisplayMode    = "Always"         ; Turn on the legend
  res@lgOrientation          = "horizontal"     ; Default is vertical
  res@pmLegendWidthF         = 0.75             ; Make it wider
  res@pmLegendOrthogonalPosF = 0.             ; Move it up slightly
  res@lgPerimOn              = False            ; Turn off the perimeter box
  res@lgTitleString          = lgtitlestring
  res@lgTitlePosition        = "bottom"
  res@xyExplicitLabels       = labels           ; Set the legend labels

;-------
; plot
;-------

  plot = gsn_csm_xy(wks, xplotvar, yplotvar, res)

  ;lnres = True
  ;gsn_polyline(wks,plot,(/val_min,val_max/),(/val_min,val_max/),lnres)

  frame(wks)

  delete(colors)
  delete(plotvars)
  delete(xplotvar)
  delete(yplotvar)
  delete(labels)
  delete(res)

EOF
#*** case: "scatter-sort" end ***

#*** case: "cesm-cn_map-flexible" start ***
elif [ $casename_work -a $casename_work == "cesm-cn_map-flexible" ]; then

cat >> $ncl_name << EOF
;--------------------
; Description:
;   plot CESM files, variables, and time stpes
;--------------------

;-------------------
; general settings
;-------------------
  ;varvars = (/${var01}/)
  varvars = (/${var01}/)
  nvar = dimsizes(varvars)  

  tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
  ;tt2 = 1
  tt2 = 9999

  option_plot = True
  option_plot@choice1 = "fig_1var_nfiles-name_nvars_nsteps"		; At each figure, plot a varaible from different files
  ;option_plot@choice2 = "fig_nvars_1file-name_nfiles_nsteps"		; At each figure, plot many variables in a file
  ;option_plot@choice3 = "fig-1var_ntimes-name_nvars_nfiles"		; At each figure, plot a variable at many time steps in a file
  ;option_plot@choice4 = "fig_1var_nfiles_sameLB-name_nvars_nsteps"	; At each figure, plot a variable and diff in different files and use the same labelbar for all time steps.
									; This can be used to make animation or movie.
  ;option_plot@choice5 = "fig_1var_2files_siglvl-name_nvars"             ; At each figure, plot a variable from the base file and diff between another file with significane level
  ;option_plot@choice6 = "fig_nvars_tavg_siglvl-nfiles"			;  At each figure, plot many variables in a file

  opt_2Ddata = True                                                     ; use ignorant_convert_2Ddata to read variables
  ;opt_2Ddata@return_type = "time_lat_lon-plev"  
  ;opt_2Ddata@plev = 600.
  ;opt_2Ddata@do_lon_mono = True

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname + var + "-step-" + t
  stepname = "month"
EOF

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  cat >> $ncl_name << EOF

  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

  ;*** choice 5: set t-test significance level ***
  siglvl = 0.05                      ; significance level 
  siglev = 100.*(1.-siglvl)
  iflag= False

  ;*** print mean on figures ***
  mean_format = "%7.2f"
  mean_prefix = "mean: "

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False
  ;res@gsnAddCyclic = False

  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
 
  ;res@gsnCenterString = ""
  
  opt  = True
  opt_cncolors = True  ; a logical varialbe to control availabe features in this procedure
;  opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
;  opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
;                                             ; False - contour levels will be computed in this procedure
;  opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
;  opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
;  opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
;      
;  opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
;  opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
;  opt_cncolors@colormap_negative_index_end = 2             ; the least negative color

  opt_cnmap = True
;  opt_cnmap@LatWeighted = True (default)    ; do average considering latitude transformation effects
;                                              ; if turn on, data_input coordinate variable's MUST in correct format
;  opt_cnmap@MeanFormat = "%7.3f" (default)  ; set mean value format
;  opt_cnmap@MeanPrefix = "mean: " (default) ; set prefix of mean value

  opt_change = True

  resp = True    ; panel res
  resp@gsnMaximize = True

  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_vars@cnFillPalette = "WhiteBlueGreenYellowRed"

  res_diff_vars = res

  ;*** res for plotting t-test results ***
  res_sig = res
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = False

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,4/)

  res_sig@cnInfoLabelOn = False

;------------------------------------------
; check input time steps & set time steps
;------------------------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if

  ntime = tt2-tt1+1

  delete(ftemp1)

;--------------------------------------------------------------
; option_plot, choice 1,  "fig_1var_nfiles-name_nvars"
;-------------------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_1var_nfiles-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 1: plot every variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ; set plot variables
  plot_varvar_baseAdiff = new( nfile, "graphic" )
  plot_varvar_allAvalue = new( nfile, "graphic" )
  plot_varvar_allAdiff  = new( nfile, "graphic" )

  ; compute panel row# and column# 
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nfile)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  opt_2Ddata@time_step = tt

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars             ; plot res
    res_diff_vars1 = res_diff_vars   ; plot res

    ;if ( varvar .eq. "" ) then
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = ""
    ;end if

    ; set wks name, "all" means all variables and "M" means minus
    wks_name_baseAdiff = plotname+varvar+"-"+stepname1+"-"+suffixes(nfile-1)+"_allM"+suffixes(nfile-1)
    wks_baseAdiff = gsn_open_wks(wks_type, wks_name_baseAdiff)

    wks_name_allAvalue = plotname+varvar+"-"+stepname1+"-all_values"
    wks_allAvalue = gsn_open_wks(wks_type, wks_name_allAvalue)

    wks_name_allAdiff = plotname+varvar+"-"+stepname1+"-allM"+suffixes(nfile-1)
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    ;varvar_base = filetemp_any->\$varvar\$(tt,:,:)

    change_var_atts(varvar, varvar_base, res_vars1, opt_change)
    change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

    ; plot
    res_vars1@tiMainString = suffix_base

    plot_varvar_baseAdiff(0) = gsn_csm_contour_map_avg(wks_baseAdiff, varvar_base, res_vars1, opt_cnmap)
    plot_varvar_allAvalue(0) = gsn_csm_contour_map_avg(wks_allAvalue, varvar_base, res_vars1, opt_cnmap)

    res_diff_vars1@tiMainString = suffix_base+" - "+suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_contour_map_avg(wks_allAdiff, diff(varvar_base,varvar_base), res_diff_vars1, opt_cnmap)

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      varvar_any = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)

      change_var_atts(varvar, varvar_any, res_vars1, opt_change)
      change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)

      ; plot 
      varvar_anyMbase = diff(varvar_any,varvar_base)
      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base

      delete(opt_cncolors)
      opt_cncolors = True

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_baseAdiff(ff+1) = gsn_csm_contour_map_avg(wks_baseAdiff, varvar_anyMbase(:,:), res_diff_vars1, opt_cnmap)

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_allAdiff(ff+1) = gsn_csm_contour_map_avg(wks_allAdiff, varvar_anyMbase, res_diff_vars1, opt_cnmap)

      res_vars1@tiMainString = suffix_any
      plot_varvar_allAvalue(ff+1) = gsn_csm_contour_map_avg(wks_allAvalue, varvar_any, res_vars1, opt_cnmap)

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)

    ; panel
    resp@txString =  varvar+" - "+stepname1
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_baseAdiff, plot_varvar_baseAdiff, (/1,row1,nfile-row1/), resp)
    print("Done. Create ["+wks_name_baseAdiff+"]")

    resp@txString =  varvar+" - "+stepname1
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

    resp@txString =  varvar+" - "+stepname1
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAvalue, plot_varvar_allAvalue, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAvalue+"]")

    delete(res_vars1)
    delete(res_diff_vars1)
  end do ; end do of vars

end do ; end do of time steps

  delete(plot_varvar_baseAdiff)
  delete(plot_varvar_allAvalue)
  delete(plot_varvar_allAdiff)
end if ; end if of choice1: option_plot = "fig_1var_nfiles-name_nvars_nsteps"

;------------------------------------------------------------
; option_plot, choice2, "fig_nvars_1file-name_nfiles_nsteps"
;------------------------------------------------------------

if ( isatt(option_plot,"choice2") .and. option_plot@choice2 .eq. "fig_nvars_1file-name_nfiles_nsteps" ) then

  print("")
  print("---------------------------------------------------------")
  print("choice 2: plot all variable of iindividual file and diff")
  print("---------------------------------------------------------")

  ; set graphic variable
  plot_varvar_any = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; compute panel row# and column#
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  opt_2Ddata@time_step = tt

  ; loop for all files
  do ff=0,nfile-1
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("procees file ["+filename_any+"] ...")

    ; set f=suffix
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks
    wks_name_any      = plotname+"all_vars-"+suffix_any+"-"+stepname1
    wks_name_anyMbase = plotname+"all_vars-"+suffix_any+"M"+suffix_base+"-"+stepname1

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for each variable
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("  process variable ["+varvar+"] ...")

      ;*** set res for diff vars ***
      res_vars1 = res_vars             ; plot res
      res_diff_vars1 = res_diff_vars   ; plot res

      ; read variable and rearrange
      varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
      varvar_any  = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)
      ;varvar_base = filetemp_base->\$varvar\$(tt,:,:)
 
      change_var_atts(varvar, varvar_base, res_vars1, opt_change)
      change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

      change_var_atts(varvar, varvar_any, res_vars1, opt_change)
      change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)

      varvar_anyMbase = diff(varvar_any,varvar_base)

      ; plot
      res_vars1@tiMainString = varvar
      plot_varvar_any(vv) = gsn_csm_contour_map_avg(wks_any, varvar_any(:,:), res_vars1, opt_cnmap)
 
      res_diff_vars1@tiMainString = varvar

      delete(opt_cncolors)
      opt_cncolors = True

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_anyMbase(vv) = gsn_csm_contour_map_avg(wks_anyMbase, varvar_anyMbase(:,:), res_diff_vars1, opt_cnmap)

      delete(varvar_any)
      delete(varvar_base)
      delete(varvar_anyMbase)

      delete(res_vars1)
      delete(res_diff_vars1)
    end do ; end do of vars

    ; panel
    resp@txString =  suffix_any+" - "+stepname1
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" MINUS "+suffix_base+" - "+stepname1
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files
end do ; end do of time steps

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)

end if ; end if of choice2: option_plot = "fig_nvars_1file-name_nfiles"

;--------------------------------------------------------------
; option_plot, choice 3, "fig-1var_ntimes-name_nvars_nfiles"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice3") .and. option_plot@choice3 .eq. "fig-1var_ntimes-name_nvars_nfiles" ) then

  print("")
  print("----------------------------------------------------------------------")
  print("choice 3: plot all time steps of each variable in every file and diff")
  print("----------------------------------------------------------------------")

  ; set plot variables
  ntime = tt2-tt1+1
  plot_varvar_any = new (ntime,"graphic")
  plot_varvar_anyMbase = new (ntime,"graphic")

  ; base file
  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

 ; compute panel row# and column#
  row1 = toint(sqrt(ntime))
  pp1 = sqrt(ntime)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  ; use the same label bar for all plots
  option_sameLB       = True
  ;option_sameLB       = False
  max_levels_any      = 15
  max_levels_anyMbase = 15

; loop for files
do ff=0,nfile-1
 
  ; set process file
  filename_any = infilenames(ff)
  filetemp_any = addfile(filename_any,"r")
  print("")
  print("process ["+filename_any+"] ...")

  suffix_any  = suffixes(ff)
  suffix_anyMbase = suffix_any+"M"+suffix_base
 
  ; loop for variables
  do vv=0,nvar-1

    varvar = varvars(vv)
    print("")
    print("  process ["+varvar+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars             ; plot res
    res_diff_vars1 = res_diff_vars   ; plot res

    ;if ( varvar .eq. "" ) then
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = ""
    ;end if

    ; set wks
    wks_name_any      = plotname+"all_"+stepname+"-"+varvar+"-"+suffix_any
    wks_name_anyMbase = plotname+"all_"+stepname+"-"+varvar+"-"+suffix_any+"M"+suffix_base

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; read a varialbe
    if ( isatt(opt_2Ddata,"time_step") ) then
      delete(opt_2Ddata@time_step)
    end if

    varvar_base0 = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    varvar_base  = varvar_base0(tt1:tt2,:,:)

    varvar_any0 = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
    varvar_any  = varvar_any0(tt1:tt2,:,:)

    change_var_atts(varvar, varvar_base, res_vars1, opt_change)
    change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

    change_var_atts(varvar, varvar_any, res_vars1, opt_change)
    change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)

    varvar_anyMbase = diff(varvar_any,varvar_base)

    if (option_sameLB) then   ; use the same label bar for all time steps
      ; determine max and min values for any values
      varvar_any_max      = max(varvar_any)
      varvar_any_min      = min(varvar_any)
    
      mnmxint_any = nice_mnmxintvl(varvar_any_min, varvar_any_max, max_levels_any, False)
      cnmin_any = mnmxint_any(0)
      cnmax_any = mnmxint_any(1)
      cnint_any = mnmxint_any(2)
    
      res_vars1@cnLevelSelectionMode = "ManualLevels"
      res_vars1@cnMinLevelValF = cnmin_any
      res_vars1@cnMaxLevelValF = cnmax_any
      res_vars1@cnLevelSpacingF = cnint_any
    
      ; determine max and min values for any diff values
      varvar_anyMbase_max = max(varvar_anyMbase)
      varvar_anyMbase_min = min(varvar_anyMbase)
    
      mnmxint_anyMbase = nice_mnmxintvl(varvar_anyMbase_min, varvar_anyMbase_max, max_levels_anyMbase, False)
      cnmin_anyMbase = mnmxint_anyMbase(0)
      cnmax_anyMbase = mnmxint_anyMbase(1)
      cnint_anyMbase = mnmxint_anyMbase(2)
    
      res_diff_vars1@cnLevelSelectionMode = "ManualLevels"
      res_diff_vars1@cnMinLevelValF = cnmin_anyMbase
      res_diff_vars1@cnMaxLevelValF = cnmax_anyMbase
      res_diff_vars1@cnLevelSpacingF = cnint_anyMbase
    end if  ; end if of option_sameLB

    ; plot each time step
    tcount = 0
    do tt=tt1,tt2
      ss1 = sprinti("%2.2i",tt+1)
      stepname1 = stepname+ss1

      if (varvar.eq."U" .or. varvar.eq."V") then
        opt_cncolors@colormap_positive = "MPL_Greens"
        opt_cncolors@colormap_negative = "MPL_Purples"
        cnColors_PosNeg(varvar_any(tcount,:,:), res_vars1, opt_cncolors)
      end if

      ; plot
      res_vars1@tiMainString = stepname1
      plot_varvar_any(tcount) = gsn_csm_contour_map_avg(wks_any, varvar_any(tcount,:,:), res_vars1, opt_cnmap)

      res_diff_vars1@tiMainString = stepname1

      delete(opt_cncolors)
      opt_cncolors = True

      if (option_sameLB) then
        opt_cncolors@cnlevels_predefine = True
      end if  ; end if of option_sameLB

      cnColors_PosNeg(varvar_anyMbase(tcount,:,:), res_diff_vars1, opt_cncolors)
      plot_varvar_anyMbase(tcount) = gsn_csm_contour_map_avg(wks_anyMbase, varvar_anyMbase(tcount,:,:), res_diff_vars1, opt_cnmap)

      tcount = tcount + 1
    end do

    ; panel
    resp@txString =  varvar+" - "+suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  varvar+" - "+suffix_any+" MINUS "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

    delete(varvar_base)
    delete(varvar_base0)
    delete(varvar_any)
    delete(varvar_any0)
    delete(res_vars1)
    delete(res_diff_vars1)

    end do ; end do of vars
  end do ; end do of files

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)

end if ; end if of choice3: option_plot = "fig-1var_ntimes-name_nvars_nfiles"

;--------------------------------------------------------------
; option_plot, choice 4,  "fig_1var_nfiles_diff-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice4") .and. option_plot@choice4 .eq. "fig_1var_nfiles_sameLB-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 4: plot a variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ;*************
  ; user setup
  ;*************
  ; set string
  gsnleftstrings = new(nvar, "string")
  gsnrightstrings = gsnleftstrings
  gsnleftstrings = ""

  ; set contour levels for values and diff
  max_levels_all      = 15 
  max_levels_allMbase = 15

  ; set plot variables
  plot_varvar_allAdiff  = new( nfile*2-1, "graphic" )

  ;***************
  ; program start
  ;***************
  ; set panel #column & #row
  row1 = nfile        ; #column of upper row
  column1 = nfile-1   ; #column of lower row

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for variables
do vv=0,nvar-1
  varvar = varvars(vv)

  ;*** set res ***
  res_vars1 = res_vars
  res_diff_vars1 = res_diff_vars

  ;if ( varvar .eq. "" ) then
  ; res_vars1@gsnLeftString = ""
  ; res_diff_vars1@gsnLeftString = ""
  ;end if

  ;*************************************
  ; set common contour values and diff 
  ;*************************************

  ; read all files
  varvar_all = ignorant_get_var_files(infilenames,varvar)

  change_var_atts(varvar, varvar_all, res_vars1, opt_change)
  change_var_atts(varvar, varvar_all, res_diff_vars1, opt_change)

  varvar_allMbase = varvar_all

  do ff=0,nfile-1
    varvar_allMbase(ff,:,:,:) = diff(varvar_all(ff,:,:,:),varvar_all(nfile-1,:,:,:))
  end do

  ; determine max and min values for all values
  varvar_all_max      = max(varvar_all)
  varvar_all_min      = min(varvar_all)

  mnmxint_all = nice_mnmxintvl(varvar_all_min, varvar_all_max, max_levels_all, False)
  cnmin_all = mnmxint_all(0)
  cnmax_all = mnmxint_all(1)
  cnint_all = mnmxint_all(2)

  res_vars1@cnLevelSelectionMode = "ManualLevels"
  res_vars1@cnMinLevelValF = cnmin_all
  res_vars1@cnMaxLevelValF = cnmax_all
  res_vars1@cnLevelSpacingF = cnint_all

  ; determine max and min values for all diff values
  varvar_allMbase_max = max(varvar_allMbase)
  varvar_allMbase_min = min(varvar_allMbase)

  mnmxint_allMbase = nice_mnmxintvl(varvar_allMbase_min, varvar_allMbase_max, max_levels_allMbase, False)
  cnmin_allMbase = mnmxint_allMbase(0)
  cnmax_allMbase = mnmxint_allMbase(1)
  cnint_allMbase = mnmxint_allMbase(2)

  res_diff_vars1@cnLevelSelectionMode = "ManualLevels"
  res_diff_vars1@cnMinLevelValF = cnmin_allMbase
  res_diff_vars1@cnMaxLevelValF = cnmax_allMbase
  res_diff_vars1@cnLevelSpacingF = cnint_allMbase
  
  ; determine diff fill colors
  opt_cncolors@cnlevels_predefine = True
  cnColors_PosNeg(varvar_all(0,0,:,:),res_diff_vars1,opt_cncolors)
  
  ; loop for time steps
  do tt=tt1,tt2
    ss1 = sprinti("%4.4i",tt+1)
    stepname1 = stepname+ss1
    opt_2Ddata@time_step = tt

    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;wks_name_allAdiff = plotname+varvar+"-"+stepname1+"-all_values-allM"+suffixes(nfile-1)
    ;wks_name_allAdiff = plotname+varvar+"-all_values-allM"+suffixes(nfile-1)+"-"+stepname1
    wks_name_allAdiff = plotname+"all_values-allM"+suffixes(nfile-1)+"-"+varvar+"-"+stepname1
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    ;varvar_base = filetemp_base->\$varvar\$(tt,:,:)

    change_var_atts(varvar, varvar_base, res_vars1, opt_change)
    change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

    res_vars1@tiMainString = suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_contour_map_avg(wks_allAdiff, varvar_base, res_vars1, opt_cnmap)

    ;******************************
    ; plot variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      varvar_any = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)

      change_var_atts(varvar, varvar_any, res_vars1, opt_change)
      change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)
     
      varvar_anyMbase = diff(varvar_any,varvar_base)

      ; plot 
      res_vars1@tiMainString = suffix_any
      plot_varvar_allAdiff(ff+1)     = gsn_csm_contour_map_avg(wks_allAdiff, varvar_any, res_vars1, opt_cnmap)

      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base
      plot_varvar_allAdiff(ff+nfile) = gsn_csm_contour_map_avg(wks_allAdiff, varvar_anyMbase, res_diff_vars1, opt_cnmap)

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)

    ; panel
    resp@txString =  varvar+" - "+stepname+"_"+ss1
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

  end do ; end do of time steps

  delete(varvar_all)
  delete(varvar_allMbase)
  delete(res_vars1)
  delete(res_diff_vars1)

end do ; end do of vars

  delete(plot_varvar_allAdiff)
end if ; end if of choice4: option_plot = "fig_1var_nfiles_sameLB-name_nvars_nsteps"

;--------------------------------------------------------------
; option_plot, choice 5,  "fig_1var_2files_siglvl-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice5") .and. option_plot@choice5 .eq. "fig_1var_2files_siglvl-name_nvars" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 5: plot every variable of two files and diff with t-test overlay")
  print("--------------------------------------------------------------------------")

  ;******************************
  ; get lat and lon dimensions
  ;******************************

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

  nlat = -1
  nlon = -1

  if ( isdim(filetemp_base,"lat") ) then
    nlat = dimsizes(filetemp_base&lat)
  end if

  if ( isdim(filetemp_base,"lon") ) then
    nlon = dimsizes(filetemp_base&lon)
  end if

  ;****************************************
  ; set panel plot, row and column number
  ;****************************************
  plot = new(2,"graphic")
  row1    = 1
  column1 = 2

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars
    res_diff_vars1 = res_diff_vars

    opt_cncolors = True

    ;if ( varvar .eq. "" ) then
    ; ;opt_cncolors = False
    ; ;opt_cncolors@cnlevels_predefine = False
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = " at "+siglev+"% level"
    ;end if

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base0 = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    varvar_base  = varvar_base0(tt1:tt2,:,:)

    change_var_atts(varvar, varvar_base, res_vars1, opt_change)
    change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2

      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      print("  process file ["+suffix_any+" , "+suffix_base+"] ...")

      ; read variables and rearrange
      varvar_any0 = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      varvar_any  = varvar_any0(tt1:tt2,:,:)

      change_var_atts(varvar, varvar_any, res_vars1, opt_change)
      change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)

      ;wksname_anyMbase_siglvl = plotname+varvar+"-"+suffix_anyMbase+"_siglvl-"+varvar
      wksname_anyMbase_siglvl = plotname+suffix_anyMbase+"_siglvl-"+varvar
      wks_anyMbase_siglvl = gsn_open_wks(wks_type, wksname_anyMbase_siglvl)

      ;************ 
      ; do t-test
      ;************
      prob = varvar_any(0,:,:)
      prob@long_name = "significance level"
      prob@units = "NONE"

      do j=0,nlat-1
      do i=0,nlon-1
        xtmp = varvar_any(:,j,i)
        ytmp = varvar_base(:,j,i)
    
      ;*** compute time-average and variance ***
        xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
        yAve = dim_avg_Wrap (ytmp)
        xVar = dim_variance_Wrap (xtmp)         ; calculate variances
        yVar = dim_variance_Wrap (ytmp)
    
      ;*** get size ***
        xN = dimsizes(xtmp)
        yN = dimsizes(ytmp)
    
        prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
      end do
      end do
        
      alpha = prob
      alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2

      ;**********************
      ; set plot variables
      ;**********************
      varvar_base_avg = dim_avg_n_Wrap(varvar_base,0)
      varvar_any_avg  = dim_avg_n_Wrap(varvar_any ,0)

      varvar_anyMbase_avg = diff(varvar_any_avg,varvar_base_avg)
      varvar_anyMbase_siglev = alpha

      ;********
      ; plot
      ;********
   
      ; plot varvar_base
      res_vars1@tiMainString = suffix_base
      res_vars1@gsnCenterString = (mean_prefix + sprintf(mean_format,lat_wgt_avg(varvar_base_avg)))
      plot_base_avg = gsn_csm_contour_map(wks_anyMbase_siglvl, varvar_base_avg, res_vars1)

      ; plot varvar_anyMbase with siglvl
      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base+" at "+siglev+"% level for ("+tt1+"- "+tt2+") "+stepname
      res_diff_vars1@gsnCenterString = (mean_prefix + sprintf(mean_format,lat_wgt_avg(varvar_anyMbase_avg)))

      opt1 = opt_cncolors
      cnColors_PosNeg(varvar_anyMbase_avg,res_diff_vars1,opt1)

      if (opt_cncolors) then
        cnColors_PosNeg(varvar_anyMbase_avg,res_diff_vars1,opt_cncolors)
      end if

      plot_anyMbase_siglev = gsn_csm_contour_map_overlay(wks_anyMbase_siglvl, varvar_anyMbase_avg, varvar_anyMbase_siglev, res_diff_vars1, res_sig)

      ;*************
      ; panel plot
      ;*************
      plot(0) = plot_base_avg
      plot(1) = plot_anyMbase_siglev
      gsn_panel(wks_anyMbase_siglvl ,plot, (/row1,column1/),resp)

      delete(prob)
      delete(alpha)
      delete(varvar_any0)
      delete(varvar_any)
      delete(wksname_anyMbase_siglvl)
      delete(wks_anyMbase_siglvl)
    end do ; end do of files

    delete(varvar_base0)
    delete(varvar_base)
    delete(res_vars1)
    delete(res_diff_vars1)
    delete(opt_cncolors)

  end do ; end do of vars

end if ; end if of choice5: option_plot = "fig_1var_2files_siglvl-name_nvars"

;--------------------------------------------------------------
; option_plot, choice 6,  "fig_nvars_tavg_siglvl-nfiles"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice6") .and. option_plot@choice6 .eq. "fig_nvars_tavg_siglvl-nfiles" ) then

  print("")
  print("------------------------------------------------------------------------------------------------")
  print("choice 6: plot time-avgeraged all variable of individual file and diff with significance level") 
  print("------------------------------------------------------------------------------------------------")

  ; set graphic variable
  plot_varvar_any = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; compute panel row# and column#
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  do ff=0,nfile-1
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("procees file ["+filename_any+"] ...")

    ; set f=suffix
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)

    ; set wks
    wks_name_any      = plotname+"all_vars_tavg-"+suffix_any
    wks_name_anyMbase = plotname+"all_vars_tavg-"+suffix_any+"M"+suffix_base+"-siglvl"

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for each variable
    do vv=0,nvar-1
      varvar = varvars(vv)
      print("  process variable ["+varvar+"] ...")

      ;*** set res for diff vars ***
      res_vars1 = res_vars             ; plot res
      res_diff_vars1 = res_diff_vars   ; plot res

      varvar_base0 = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
      varvar_base  = varvar_base0(tt1:tt2,:,:)

      varvar_any0 = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      varvar_any  = varvar_any0(tt1:tt2,:,:)

      change_var_atts(varvar, varvar_base, res_vars1, opt_change)
      change_var_atts(varvar, varvar_base, res_diff_vars1, opt_change)

      change_var_atts(varvar, varvar_any, res_vars1, opt_change)
      change_var_atts(varvar, varvar_any, res_diff_vars1, opt_change)

      varvar_anyMbase = diff(varvar_any,varvar_base)
      varvar_base_tavg      = dim_avg_n_Wrap(varvar_base,0)
      varvar_any_tavg       = dim_avg_n_Wrap(varvar_any,0)
      varvar_anyMbase_tavg  = dim_avg_n_Wrap(varvar_anyMbase,0)
     
      ; plot
      res_vars1@tiMainString = varvar
      plot_varvar_any(vv) = gsn_csm_contour_map_avg(wks_any, varvar_any_tavg(:,:), res_vars1, opt_cnmap)

      res_diff_vars1@tiMainString = varvar

      delete(opt_cncolors)
      opt_cncolors = True
      ;cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      
      opt11 = True
      opt11@siglvl = siglvl 
      res_diff_vars1@gsnCenterString = (mean_prefix + sprintf(mean_format,lat_wgt_avg(varvar_anyMbase_tavg)))
      plot_varvar_anyMbase(vv) = gsn_csm_contour_map_siglvl(wks_anyMbase,varvar_any, varvar_base,res_diff_vars1,res_sig,opt11)  

      delete(varvar_any0)
      delete(varvar_any)
      delete(varvar_any_tavg)
      delete(varvar_base0)
      delete(varvar_base)
      delete(varvar_base_tavg)
      delete(varvar_anyMbase)
      delete(varvar_anyMbase_tavg)

      delete(res_vars1)
      delete(res_diff_vars1)
    end do ; end do of vars

    ; panel
    resp@txString =  suffix_any+" - avg over ("+tt1+"-"+tt2+") "+stepname
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" MINUS "+suffix_base+", at "+siglev+"% level for ("+tt1+"- "+tt2+") "+stepname
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)  

end if ; end if of choice6: option_plot = "fig_nvars_tavg_siglvl-nfiles"

EOF

#*** case: "cesm-cn_map-flexible" end ***

#*** case: "scam-time_series-flexible" start ***
elif [ $casename_work -a $casename_work == "scam-time_series-flexible" ]; then
cat >> $ncl_name << EOF

;-------------------
; general settings
;-------------------
  varvars = (/${var01}/)

EOF
  # write all file names to variable $infilenames
  cat >> $ncl_name << EOF
  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

cat >> $ncl_name << EOF

  suffixes = infilenames

  suffixes = (/${suffix01}/) ; suffix of each file

  tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
  tt2 = 9999

  option_plot = True
  option_plot@choice1 = "fig_nvars_nfiles-name_nfiles"  ; choice of plots

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname+[respective name], search "wks_name" for the name of each plot

  nfile = dimsizes(infilenames)
  nvar = dimsizes(varvars)  

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False

  ;res@trYMinF = .
  ;res@trXMaxF = .

  res_diff = res ; diff res

  res@tiXAxisString = "time step"

  opt  = True
  ;opt@legend_mean = False

  resp = True    ; panel res

  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_diff_vars = res

;--------------------------
; check input time steps
;--------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if
  
  delete(ftemp1)

;----------------------------------------------------
; option_plot, choice 1, "fig_nvars_nfiles-name_nfiles"
;----------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_nvars_nfiles-name_nfiles" ) then

  ; set plot wks
  plot_varvar_all      = new (nvar,"graphic")
  plot_varvar_allMbase = new (nvar,"graphic")
  plot_varvar_any      = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  ; base file
  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; set panel row & column
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  ; set wks, "all" means all variables, "M" means minus
  wks_name_all      = plotname+"all_files-all_vars"
  wks_name_allMbase = plotname+"all"+"M"+suffixes(nfile-1)+"-all_vars"
  wks_all = gsn_open_wks(wks_type, wks_name_all)
  wks_allMbase = gsn_open_wks(wks_type, wks_name_allMbase)

  ;*******************************************************
  ; plot each variable from all files on the same figure
  ;*******************************************************
  ; loop for each variable
  do vv=0,nvar-1 
    varvar = varvars(vv)
    print("process ALL ["+varvar+"] ...")

    ; read variable from all files
    varvar_all0 = ignorant_get_var_files(infilenames,varvar)
    varvar_all = varvar_all0(:,tt1:tt2,0,0)

    ; all variables minus base variables
    varvar_allMbase = varvar_all
    do ff=0,nfile-1
      varvar_allMbase(ff,:) = diff(varvar_all(ff,:),varvar_all(nfile-1,:))
    end do

    ; set time series 
    ntime = dimsizes(varvar_all(0,:))
    time_all = fspan(tofloat(tt1),tofloat(tt2),ntime)

    ; plot all variables
    res_vars@tiMainString = varvar
    plot_varvar_all(vv) = ignorant_xy(wks_all, time_all, varvar_all, suffixes, res_vars, opt)
 
    ; plot all varialbes minus base variable
    res_diff_vars@tiMainString = varvar
    plot_varvar_allMbase(vv) = ignorant_xy(wks_allMbase, time_all, varvar_allMbase, suffixes, res_diff_vars,opt)

  end do

  resp@txString =  "ALL variables"
  gsn_panel(wks_all, plot_varvar_all, (/row1,column1/), resp)
  print("Done. Create ["+wks_name_all+"]")

  resp@txString =  "all files MINUS "+suffixes(nfile-1)
  gsn_panel(wks_allMbase, plot_varvar_allMbase, (/row1,column1/), resp)
  print("Done. Create ["+wks_name_allMbase+"]")

  ;*******************************************
  ; plot each variable with respective file
  ;*******************************************

  ; loop for files
  do ff=0,nfile-1
    ; set file name of the read-in file
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("process file ["+filename_any+"] ...")

    ; set suffix for the read-in file and base file
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks for the read-in file and base file
    wks_name_any      = plotname+suffix_any+"-all_vars"
    wks_any      = gsn_open_wks(wks_type, wks_name_any)

    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-all_vars"
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for variables
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("process var ["+varvar+"] ...")

      varvar_any = filetemp_any->\$varvar\$(tt1:tt2,0,0)
      varvar_base = filetemp_base->\$varvar\$(tt1:tt2,0,0)

      ntime = dimsizes(varvar_any)
      time_any = fspan(tofloat(tt1),tofloat(tt2),ntime)

      ;nfactor =
      ;varvar_any = multiply(varvar_any , nfactor)
      ;varvar_any@units = ""
      ;varvar_any = unit_convert(varvar_any , "" , "")

      ;nfactor =
      ;varvar_base = multiply(varvar_base , nfactor)
      ;varvar_base@units = ""
      ;varvar_base = unit_convert(varvar_base , "" , "")

      varvar_anyMbase = diff(varvar_any,varvar_base)

      ; plot each variable of the read-in file
      res_vars@tiMainString = varvar
      plot_varvar_any(vv) = ignorant_xy(wks_any, time_any, varvar_any, suffix_any, res_vars, opt)
  
      ; plot each diff of the read-in file
      res_diff_vars@tiMainString = varvar
      plot_varvar_anyMbase(vv) = ignorant_xy(wks_anyMbase, time_any, varvar_anyMbase, suffix_any, res_diff_vars,opt)

      delete(varvar_any)
      delete(varvar_base)
      delete(varvar_anyMbase)
    end do ; end do of vars

    ; panel plots
    resp@txString =  suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" MINUS "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files

end if ; end if of option_plot = "fig_nvars_nfiles-name_nfiles" 

EOF
#*** case: "scam-time_series-flexible" end ***

#*** case: "scam-time_pressure-flexible" start ***
elif [ $casename_work -a $casename_work == "scam-time_pressure-flexible" ]; then
cat >> $ncl_name << EOF

;-------------------
; general settings
;-------------------
  varvars = (/${var01}/)    ; process variable
  nvar = dimsizes(varvars)  

  tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
  tt2 = 9999

  option_plot = True
  option_plot@choice1 = "fig_1var_nfiles-name_nvars"
  option_plot@choice2 = "fig_nvars_1file-name_nfiles"

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname + var + "-step-" + t
  stepname = "step"

EOF
  # write all file names to variable $infilenames
  cat >> $ncl_name << EOF
  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done
cat >> $ncl_name << EOF
                  
  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnYAxisIrregular2Linear = True
  res@trYReverse = True

  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  res_diff = res ; diff res

  res@tiYAxisString = "Pressure (hPa)"
  res@tiXAxisString = ""

  opt  = True
  opt_cncolors = True  ; a logical varialbe to control availabe features in this procedure
;  opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
;  opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
;                                             ; False - contour levels will be computed in this procedure
;  opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
;  opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
;  opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
;      
;  opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
;  opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
;  opt_cncolors@colormap_negative_index_end = 2             ; the least negative color
  resp = True    ; panel res

  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_vars@cnFillPalette = "amwg"

  res_diff_vars = res

;------------------------------------------
; check input time steps & set time steps
;------------------------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if

  ntime = tt2-tt1+1
  time_base = fspan(tofloat(tt1),tofloat(tt2),ntime)
  time_any = time_base

  delete(ftemp1)

;--------------------------------------------------------------
; option_plot, choice 1,  "fig_1var_nfiles-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_1var_nfiles-name_nvars" ) then
 
  print("") 
  print("---------------------------------------------------------")
  print("option: plot each variable of multiple files and diff")
  print("---------------------------------------------------------")

  ; set plot variables
  plot_varvar_baseAdiff = new( nfile, "graphic" )
  plot_varvar_allAvalue = new( nfile, "graphic" )
  plot_varvar_allAdiff  = new( nfile, "graphic" )

  ; compute panel row# and column# 
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nfile)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+"] ...")

    ;******************************
    ; plot variables of base file
    ;******************************

    ; set wks name, "all" means all variables and "M" means minus
    wks_name_baseAdiff = plotname+varvar+"-"+suffixes(nfile-1)+"_allM"+suffixes(nfile-1)
    wks_baseAdiff = gsn_open_wks(wks_type, wks_name_baseAdiff)

    wks_name_allAvalue = plotname+varvar+"-all_values"
    wks_allAvalue = gsn_open_wks(wks_type, wks_name_allAvalue)

    wks_name_allAdiff = plotname+varvar+"-allM"+suffixes(nfile-1)
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ; calculate pressure coordinate
    hyam_base = filetemp_base->hyam ; read from a file the mid-layer coef
    hybm_base = filetemp_base->hybm ; read from a file
    hyai_base = filetemp_base->hyai ; read from a file the level coef
    hybi_base = filetemp_base->hybi ; read from a file
    ps_base   = filetemp_base->PS   ; surface pressure [Pa]
    p0_base   = 100000.      ; since ps is in Pa or [ f->P0]
    pm_base = pres_hybrid_ccm(ps_base,p0_base,hyam_base,hybm_base)
    pi_base = pres_hybrid_ccm(ps_base,p0_base,hyai_base,hybi_base)

    lev_base = pm_base(0,:,0,0)/100.
    ilev_base = pi_base(0,:,0,0)/100.

    ; assign correct pressure coordinate to read-in variables, i.e. lev(layers) or ilev(levels)
    varvar_base0 = filetemp_base->\$varvar\$(tt1:tt2,:,0,0)
    dimnames_base = getvardims(varvar_base0)
    if ( dimnames_base(1) .eq. "lev" ) then
      varvar_base = varvar_base0(lev|:,time|:)
      varvar_base&lev = lev_base
      varvar_base&time = time_base
    else if ( dimnames_base(1) .eq. "ilev" ) then
      varvar_base = varvar_base0(ilev|:,time|:)
      varvar_base&ilev = ilev_base
      varvar_base&time = time_base
    end if
    end if

    ;nfactor =
    ;varvar_base = multiply(varvar_base , nfactor)
    ;varvar_base@units = ""
    ;varvar_base = unit_convert(varvar_base , "" , "")

    ; plot
    res_vars@tiMainString = suffix_base
    plot_varvar_baseAdiff(0) = gsn_csm_contour(wks_baseAdiff, varvar_base, res_vars)
    plot_varvar_allAvalue(0) = gsn_csm_contour(wks_allAvalue, varvar_base, res_vars)

    res_diff_vars@tiMainString = suffix_base+" MINUS "+suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_contour(wks_allAdiff, diff(varvar_base,varvar_base), res_diff_vars)

    ;******************************
    ; plot variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base
  
      ; calculate pressure coordiante
      hyam_any = filetemp_any->hyam ; read from a file the mid-layer coef
      hybm_any = filetemp_any->hybm ; read from a file
      hyai_any = filetemp_any->hyai ; read from a file the level coef
      hybi_any = filetemp_any->hybi ; read from a file
      ps_any   = filetemp_any->PS   ; surface pressure [Pa]
      p0_any   = 100000.      ; since ps is in Pa or [ f->P0]
      pm_any = pres_hybrid_ccm(ps_any,p0_any,hyam_any,hybm_any)
      pi_any = pres_hybrid_ccm(ps_any,p0_any,hyai_any,hybi_any)
  
      lev_any = pm_any(0,:,0,0)/100.
      ilev_any = pi_any(0,:,0,0)/100.

      ; read variables and rearrange
      varvar_any0 = filetemp_any->\$varvar\$(tt1:tt2,:,0,0)

      dimnames_any = getvardims(varvar_any0)
      if ( dimnames_any(1) .eq. "lev" ) then
        varvar_any = varvar_any0(lev|:,time|:)
        varvar_any&lev = lev_any
        varvar_any&time = time_any
      else if ( dimnames_any(1) .eq. "ilev" ) then
        varvar_any = varvar_any0(ilev|:,time|:)
        varvar_any&ilev = ilev_any
        varvar_any&time = time_any
      end if
      end if

      ;nfactor =
      ;varvar_any = multiply(varvar_any , nfactor)
      ;varvar_any@units = ""
      ;varvar_any = unit_convert(varvar_any , "" , "")

      ; plot 
      varvar_anyMbase = diff(varvar_any,varvar_base)
      res_diff_vars@tiMainString = suffix_any+" MINUS "+suffix_base

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars, opt_cncolors)
      plot_varvar_baseAdiff(ff+1) = gsn_csm_contour(wks_baseAdiff, varvar_anyMbase(:,:), res_diff_vars)
      plot_varvar_allAdiff(ff+1) = gsn_csm_contour(wks_allAdiff, varvar_anyMbase, res_diff_vars)

      res_vars@tiMainString = suffix_any
      plot_varvar_allAvalue(ff+1) = gsn_csm_contour(wks_allAvalue, varvar_any, res_vars)

    end do ; end do of files

    delete(varvar_any0)
    delete(varvar_base0)
    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)

    ; panel
    resp@txString =  varvar
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_baseAdiff, plot_varvar_baseAdiff, (/1,row1,nfile-row1/), resp)
    print("Done. Create ["+wks_name_baseAdiff+"]")

    resp@txString =  varvar
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

    resp@txString =  varvar
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAvalue, plot_varvar_allAvalue, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAvalue+"]")

  end do ; end do of vars

end if ; end if of option_plot = "fig_1var_nfiles-name_nvars_nsteps"

;------------------------------------------------------------
; option_plot, choice2, "fig_nvars_1file-name_nfiles"
;------------------------------------------------------------

if ( isatt(option_plot,"choice2") .and. option_plot@choice2 .eq. "fig_nvars_1file-name_nfiles" ) then

  print("")
  print("---------------------------------------------------------")
  print("option: plot all variable of iindividual file and diff")
  print("---------------------------------------------------------")

  ; set graphic variable
  plot_varvar_any = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; compute panel row# and column#
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  ; loop for all files
  do ff=0,nfile-1
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("procees file ["+filename_any+"] ...")

    ; set f=suffix
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks
    wks_name_any      = plotname+suffix_any+"-all_vars"
    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-all_vars"

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; compute pressure coordinate
    hyam_any = filetemp_any->hyam ; read from a file the mid-layer coef
    hybm_any = filetemp_any->hybm ; read from a file
    hyai_any = filetemp_any->hyai ; read from a file the level coef
    hybi_any = filetemp_any->hybi ; read from a file
    ps_any   = filetemp_any->PS   ; surface pressure [Pa]
    p0_any   = 100000.      ; since ps is in Pa or [ f->P0]
    pm_any = pres_hybrid_ccm(ps_any,p0_any,hyam_any,hybm_any)
    pi_any = pres_hybrid_ccm(ps_any,p0_any,hyai_any,hybi_any)

    lev_any = pm_any(0,:,0,0)/100.
    ilev_any = pi_any(0,:,0,0)/100.

    hyam_base = filetemp_base->hyam ; read from a file the mid-layer coef
    hybm_base = filetemp_base->hybm ; read from a file
    hyai_base = filetemp_base->hyai ; read from a file the level coef
    hybi_base = filetemp_base->hybi ; read from a file
    ps_base   = filetemp_base->PS   ; surface pressure [Pa]
    p0_base   = 100000.      ; since ps is in Pa or [ f->P0]
    pm_base = pres_hybrid_ccm(ps_base,p0_base,hyam_base,hybm_base)
    pi_base = pres_hybrid_ccm(ps_base,p0_base,hyai_base,hybi_base)

    lev_base = pm_base(0,:,0,0)/100.
    ilev_base = pi_base(0,:,0,0)/100.

    ; loop for each variable
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("  process variable ["+varvar+"] ...")

      ; read variable and rearrange
      varvar_any0 = filetemp_any->\$varvar\$(tt1:tt2,:,0,0)
      varvar_base0 = filetemp_base->\$varvar\$(tt1:tt2,:,0,0)
      
      dimnames_any = getvardims(varvar_any0)
      if ( dimnames_any(1) .eq. "lev" ) then
        varvar_any = varvar_any0(lev|:,time|:)
        varvar_any&lev = lev_any
        varvar_any&time = time_any
      else if ( dimnames_any(1) .eq. "ilev" ) then
        varvar_any = varvar_any0(ilev|:,time|:)
        varvar_any&ilev = ilev_any
        varvar_any&time = time_any
      end if
      end if

      dimnames_base = getvardims(varvar_base0)
      if ( dimnames_base(1) .eq. "lev" ) then
        varvar_base = varvar_base0(lev|:,time|:)
        varvar_base&lev = lev_base
        varvar_base&time = time_base
      else if ( dimnames_base(1) .eq. "ilev" ) then
        varvar_base = varvar_base0(ilev|:,time|:)
        varvar_base&ilev = ilev_base
        varvar_base&time = time_base
      end if
      end if

      ;nfactor =
      ;varvar_any = multiply(varvar_any , nfactor)
      ;varvar_any@units = ""
      ;varvar_any = unit_convert(varvar_any , "" , "")

      ;nfactor =
      ;varvar_base = multiply(varvar_base , nfactor)
      ;varvar_base@units = ""
      ;varvar_base = unit_convert(varvar_base , "" , "")

      varvar_anyMbase = diff(varvar_any,varvar_base)

      ; plot
      res_vars@tiMainString = varvar
      plot_varvar_any(vv) = gsn_csm_contour(wks_any, varvar_any(:,:), res_vars)
 
      res_diff_vars@tiMainString = varvar
      cnColors_PosNeg(varvar_anyMbase, res_diff_vars, opt_cncolors)
      plot_varvar_anyMbase(vv) = gsn_csm_contour(wks_anyMbase, varvar_anyMbase(:,:), res_diff_vars)

      delete(varvar_any0)
      delete(varvar_base0)
      delete(varvar_any)
      delete(varvar_base)
      delete(varvar_anyMbase)
    end do ; end do of vars

    ; panel
    resp@txString =  suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" Minus "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files

end if ; end if of option_plot = "fig_nvars_1file-name_nfiles"

EOF
#*** case: "scam-time_pressure-flexible" end ***

#*** case: "cesm-print-vars" start ***
elif [ $casename_work -a $casename_work == "cesm-print-vars" ]; then
cat >> $ncl_name << EOF
;#################
; Description:
;   Given input files, this script will diagnose some variables and print them on screen:
;     1. Time-average, area-mean with weighting on cosine of latitude
;     2. Time standard deviation of area mean
;     3. Time standard error of area mean
;
;   Also, this script can write out these diagnose variables to the input files
;#################

;-------------
; open files
;-------------

EOF

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  cat >> $ncl_name << EOF
  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

  ;varnames@writeout = True	; write these diagnosed variables into input files
  varnames@writeout = False

  varnames = (/${var01}/)
  ;varnames = (/"U 300","V 600","T 210","Q 550","CLOUD 900"/)
  ;varnames = (/"FLUS","FLDS","FLNS","FSUS","FSDS","FSNS","LHFLX","SHFLX","RADSURF"/)   ; surface energy budget
  ;varnames = (/"FLUT","FSNTOA","RADTOA"/)                                              ; TOA energy budget
  ;varnames = (/"FLNT","FSNT","RADMT"/)                                                 ; Model top energy budget
  ;varnames = (/"FLUT","FLUTC","LWCF","FSNTOA","FSNTOAC","SWCF"/)			; LW & SW cloud forcing at the TOA and surface
  ;varnames = (/"FLDS","FLDSC","LWCF_SURF","FSDS","FSDSC","SWCF_SURF"/)

  ;varnames_diagnose = (/"FLUS","FSUS","FSDTOA","RADMT","RADTOA","PRECT","RADCOOL_MT_TO_SURF","LWCOOL_MT_TO_SURF","SWWARM_MT_TO_SURF","RADSURF","OMEGA500","RADCOOL_TOA_TO_SURF","LWCOOL_TOA_TO_SURF","SWWARM_TOA_TO_SURF","LWCF_SURF"/) 
  nvar = dimsizes(varnames)

  ; available varnames_diagnose, update 03/02/2018
  ;   EVAP			: Evaporation rate, converted from latent heat flux
  ;   FLDSC			: Clearsky Downwelling longwave flux at surface (assume blackbody surface)
  ;   FLUS 			: Upward LW flux at the surface
  ;   FSUS			: Upward SW flux at the surface
  ;   FSDTOA			: Downward SW flux at the TOA, i.e. SOLIN
  ;   LWCF_SURF			: LW cloud forcing at the surface	
  ;   LWCOOL_MT_TO_SURF 	: LW radiative cooling rate betweem model top and surface, +cooling, -warming
  ;   LWCOOL_TOA_TO_SURF	: LW radiative cooling rate betweem the TOA and surface, +cooling, -warming
  ;   OMEGA at a pressure level	: OMEGA at a certain pressure level, e.g. OMEGA500
  ;   P_minus_E			: Precipitaion minus Evaporation rate. Note that the evaporation rate is converted from the latent heat flux
  ;   PRECT 			: Total (conv+stratiform) precipitation rate
  ;   RADCOOL_MT_TO_SURF 	: Net radiative cooling rate betweem model top and surface, +cooling, -warming
  ;   RADCOOL_TOA_TO_SURF 	: Net radiative cooling rate betweem the TOA and surface, +cooling, -warming
  ;   RADMT 			: Radiation balance (SW+LW) at the model top, +cooling, -warming
  ;   RADSURF 			: Surface energy imbalance (SW-LW-SH-LH), +warming, -cooling
  ;   RADTOA 			: Radiation balance (SW+LW) at the TOA, +cooling, -warming
  ;   SWCF_SURF			: SW cloud forcing at the surface, +:warming, -: cooling
  ;   SWWARM_TOA_TO_SURF 	: SW radiative warming rate betweem the TOA and surface, +warming, -cooling
  ;   SWWARM_MT_TO_SURF 	: SW radiative warming rate betweem model top and surface, +warming, -cooling
  ;   [var]" "[number]          : a variable at a certain pressure level, e.g. "T 850", "Q 500"

;---------------
; program start
;---------------

  if ( isatt(varnames, "writeout") .and. varnames@writeout ) then
    file_status = "w"
  else
    file_status = "r"
  end if

  ; set base file
  filename_base = infilenames(nfile-1)
  file_base   = addfile(filename_base, file_status)
  suffix_base = suffixes(nfile-1)

  string_all      = new(nfile, "string")
  string_allMbase = string_all

;---------------------------
; compute every variable
;---------------------------

do vv=0,nvar-1
  varname = varnames(vv)

  ;*** variables for interpolation ***
  option_interp = False

  if (.not.ismissing(str_match(varname," "))) then
    string11 = str_split(varname," ")
    var_interp    = string11(0)
    plev_interp   = tofloat(string11(1))
    varname = string11(0)+string11(1)
    option_interp = True
  end if
    
do ff=0,nfile-1
  filename_any = infilenames(ff)
  suffix_any   = suffixes(ff)
  file_any = addfile( filename_any , file_status )

  suffix_anyMbase = suffix_any+" MINUS "+suffix_base

  ;*** if varname is in read-in files ***
  if (isfilevar(file_any, varname)) then
    var_any  = file_any->\$varname\$
    var_base = file_base->\$varname\$

    varname@printout  = True
    copy_VarAtts(var_any,varname)

    ;*** change units ***
    if (varname.eq."PRECC" .or. varname.eq."PRECL" .or. varname.eq."PRECT") then
      var_any = unit_convert(var_any,"m/s","mm/day")
      var_base = unit_convert(var_base,"m/s","mm/day")
    end if

    option_interp = False
  end if

  ;*** if variables need to be interpolated ***
  if (option_interp) then
    varcesm_name      = var_interp
    plev              = plev_interp
    plev@long_name    = "pressure"
    plev@units        = "hPa"

    hyai_any = file_any->hyai      ; hybrid A coefficient at layer interface
    hybi_any = file_any->hybi      ; hybrid B coefficient at layer interface
    hyam_any = file_any->hyam      ; hybrid A coefficient at layer midpoints
    hybm_any = file_any->hybm      ; hybrid B coefficient at layer midpoints
    ps_any   = file_any->PS        ; surface pressures  in Pa
    p0_any   = file_any->P0        ; reference pressure in Pa
    varcesm_any = file_any->\$varcesm_name\$
  
    hyai_base = file_base->hyai      ; hybrid A coefficient at layer interface
    hybi_base = file_base->hybi      ; hybrid B coefficient at layer interface
    hyam_base = file_base->hyam      ; hybrid A coefficient at layer midpoints
    hybm_base = file_base->hybm      ; hybrid B coefficient at layer midpoints
    ps_base   = file_base->PS        ; surface pressures  in Pa
    p0_base   = file_base->P0        ; reference pressure in Pa
    varcesm_base = file_base->\$varcesm_name\$
  
    varcesm_plev_any = vinth2p(varcesm_any, hyam_any, hybm_any, plev, ps_any, 1, p0_any/100., 1, False)
    copy_VarAtts(varcesm_any, varcesm_plev_any)
  
    varcesm_plev_base = vinth2p(varcesm_base, hyam_base, hybm_base, plev, ps_base, 1, p0_base/100., 1, False)
    copy_VarAtts(varcesm_base, varcesm_plev_base)
  
    varcesm_plev_any0  = varcesm_plev_any(:,0,:,:)  ; reduce dimesion from (time,plev,lat,lon) to (time,lat,lon)
    varcesm_plev_base0 = varcesm_plev_base(:,0,:,:) ; reduce dimesion from (time,plev,lat,lon) to (time,lat,lon)

    var_any  = varcesm_plev_any0
    var_base = varcesm_plev_base0

    varname@printout  = True
    varname@long_name = varcesm_name+" at "+plev+" hPa"
    if (isatt(var_base,"units")) then
      varname@units = var_base@units
    end if

    if (varcesm_name .eq. "Q") then
      varname@units = "g/kg"
      var_any  = multiply(var_any ,1000.)
      var_base = multiply(var_base,1000.)
    end if
    if (varcesm_name .eq. "OMEGA") then
      varname@units = "hPa/day"
      var_any  = multiply(var_any ,86400./100.)
      var_base = multiply(var_base,86400./100.)
    end if
  end if  ; end if of option_interp

  if ( varname .eq. "SWCF_SURF" ) then
    varname@printout  = True
    varname@long_name = "SW cloud forcing at the surface, +:warming, -: cooling"
    varname@units     = "W/m2"

    FSDS_any = file_any->FSDS
    FSDSC_any = file_any->FSDSC

    FSDS_base = file_base->FSDS
    FSDSC_base = file_base->FSDSC

    SWCF_SURF_any = diff(FSDS_any, FSDSC_any)
    SWCF_SURF_base = diff(FSDS_base, FSDSC_base)

    var_any  = SWCF_SURF_any
    var_base = SWCF_SURF_base
  end if

  if ( varname .eq. "FLDSC" ) then
    varname@printout  = True
    varname@long_name = "Clearsky Downwelling longwave flux at surface (assume blackbody surface)"
    varname@units     = "W/m2"

    FLNS_any   = file_any->FLNS
    FLDS_any   = file_any->FLDS
    FLNSC_any  = file_any->FLNSC
    FLDSC_any0 = plus(FLNS_any,FLDS_any)
    FLDSC_any  = diff(FLDSC_any0,FLNSC_any)

    FLNS_base   = file_base->FLNS
    FLDS_base   = file_base->FLDS
    FLNSC_base  = file_base->FLNSC
    FLDSC_base0 = plus(FLNS_base,FLDS_base)
    FLDSC_base  = diff(FLDSC_base0,FLNSC_base)

    var_any  = FLDSC_any
    var_base = FLDSC_base
  end if

  if ( varname .eq. "P_minus_E" ) then
    varname@printout  = True
    varname@long_name = "Precipitaion minus Evaporation rate"
    varname@units     = "mm/day"

    ; precipitation rate
    if (isfilevar(file_base,"PRECT")) then
      PRECT_any = file_any->PRECT
      PRECT_base = file_base->PRECT
    else
      PRECC_any = file_any->PRECC
      PRECC_base = file_base->PRECC

      PRECL_any = file_any->PRECL
      PRECL_base = file_base->PRECL

      PRECT_any = plus(PRECC_any,PRECL_any)
      PRECT_base = plus(PRECC_base,PRECL_base)
    end if

    PRECT_any  = unit_convert(PRECT_any,"m/s","mm/day")
    PRECT_base = unit_convert(PRECT_base,"m/s","mm/day")

    ; evaporation rate is converted by the latent heat flux
    LHFLX_any = file_any->LHFLX
    LHFLX_base = file_base->LHFLX

    EVAP_any  = unit_convert(LHFLX_any , "W/m2", "mm/day")
    EVAP_base = unit_convert(LHFLX_base, "W/m2", "mm/day")

    PmE_any  = diff(PRECT_any,EVAP_any)
    PmE_base = diff(PRECT_base,EVAP_base)

    var_any  = PmE_any
    var_base = PmE_base
  end if

  if ( varname .eq. "EVAP" ) then
    varname@printout  = True
    varname@long_name = "Evaporation rate (converted from latent heat flux)"
    varname@units     = "mm/day"

    LHFLX_any = file_any->LHFLX
    LHFLX_base = file_base->LHFLX

    EVAP_any  = unit_convert(LHFLX_any , "W/m2", "mm/day")
    EVAP_base = unit_convert(LHFLX_base, "W/m2", "mm/day")

    var_any  = EVAP_any
    var_base = EVAP_base
  end if
 
  if ( varname .eq. "LWCF_SURF" ) then
    varname@printout  = True
    varname@long_name = "LW cloud forcing at the surface, +:warming, -: cooling"
    varname@units     = "W/m2"

    FLDS_any = file_any->FLDS
    FLDSC_any = file_any->FLDSC

    FLDS_base = file_base->FLDS
    FLDSC_base = file_base->FLDSC

    LWCF_SURF_any = diff(FLDS_any, FLDSC_any)
    LWCF_SURF_base = diff(FLDS_base, FLDSC_base)

    var_any  = LWCF_SURF_any
    var_base = LWCF_SURF_base
  end if

  if ( varname .eq. "FLUS" ) then
    varname@printout  = True
    varname@long_name = "Upward LW flux at the surface"
    varname@units     = "W/m2"

    FLDS_any  = file_any->FLDS
    FLDS_base = file_base->FLDS
    FLNS_any  = file_any->FLNS
    FLNS_base = file_base->FLNS

    FLUS_any  = plus(FLDS_any,FLNS_any)
    FLUS_base = plus(FLDS_base,FLNS_base)

    var_any  = FLUS_any
    var_base = FLUS_base
  end if

  if ( varname .eq. "FSUS" ) then
    varname@printout  = True
    varname@long_name = "Upward SW flux at the surface"
    varname@units     = "W/m2"

    FSDS_any = file_any->FSDS
    FSDS_base = file_base->FSDS
    FSNS_any = file_any->FSNS
    FSNS_base = file_base->FSNS
  
    FSUS_any = diff(FSDS_any,FSNS_any)
    FSUS_base = diff(FSDS_base,FSNS_base)
  
    var_any = FSUS_any
    var_base = FSUS_base
  end if

  if ( varname .eq. "FSDTOA" ) then
    varname@printout  = True
    varname@long_name = "Downward SW flux at the TOA, i.e. SOLIN"
    varname@units     = "W/m2"

    FSNTOA_any = file_any->FSNTOA
    FSNTOA_base = file_base->FSNTOA
    FSUTOA_any = file_any->FSUTOA
    FSUTOA_base = file_base->FSUTOA

    FSDTOA_any = plus(FSUTOA_any,FSNTOA_any)
    FSDTOA_base = plus(FSUTOA_base,FSNTOA_base)

    var_any = FSDTOA_any
    var_base = FSDTOA_base
  end if

  if ( varname .eq. "RADMT" ) then
    varname@printout  = True
    varname@long_name = "Radiation balance (SW+LW) at the model top, +:gain energy, -:lose energy"
    varname@units     = "W/m2"

    FSNT_any = file_any->FSNT
    FSNT_base = file_base->FSNT
    FLNT_any = file_any->FLNT
    FLNT_base = file_base->FLNT

    RADMT_any = diff(FSNT_any,FLNT_any)
    RADMT_base = diff(FSNT_base,FLNT_base)

    var_any = RADMT_any
    var_base = RADMT_base
  end if

  if ( varname .eq. "RADTOA" ) then
    varname@printout  = True
    varname@long_name = "Radiation balance (SW+LW) at the TOA, +:gain energy, -:lose energy"
    varname@units     = "W/m2"

    FSNTOA_any = file_any->FSNTOA
    FSNTOA_base = file_base->FSNTOA
    FLUT_any = file_any->FLUT
    FLUT_base = file_base->FLUT

    RADTOA_any = diff(FSNTOA_any,FLUT_any)
    RADTOA_base = diff(FSNTOA_base,FLUT_base)

    var_any = RADTOA_any
    var_base = RADTOA_base
  end if

  if ( varname .eq. "PRECT" ) then
    varname@printout  = True
    varname@long_name = "Total (conv+stratiform) precipitation rate"
    varname@units     = "mm/day"

    PRECC_any  = file_any->PRECC
    PRECC_base = file_base->PRECC
    PRECL_any  = file_any->PRECL
    PRECL_base = file_base->PRECL

    PRECT_any  = plus(PRECC_any,PRECL_any)
    PRECT_base = plus(PRECC_base,PRECL_base)

    var_any  = PRECT_any
    var_base = PRECT_base
    var_any  = unit_convert(var_any,"m/s","mm/day")
    var_base = unit_convert(var_base,"m/s","mm/day")
  end if

  if ( varname .eq. "RADCOOL_MT_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "Net radiative cooling rate betweem model top and surface, +:cooling, -:warming"
    varname@units     = "W/m2"

    FLNT_any  = file_any->FLNT
    FLNT_base = file_base->FLNT
    FLNS_any  = file_any->FLNS
    FLNS_base = file_base->FLNS
  
    FSNT_any  = file_any->FSNT
    FSNT_base = file_base->FSNT
    FSNS_any  = file_any->FSNS
    FSNS_base = file_base->FSNS
  
    LWCOOL_any  = diff(FLNT_any,FLNS_any)
    SWWARM_any  = diff(FSNT_any,FSNS_any)
    RADCOOL_any = diff(LWCOOL_any,SWWARM_any)
  
    LWCOOL_base  = diff(FLNT_base,FLNS_base)
    SWWARM_base  = diff(FSNT_base,FSNS_base)
    RADCOOL_base = diff(LWCOOL_base,SWWARM_base)

    var_any = RADCOOL_any
    var_base = RADCOOL_base
  end if

  if ( varname .eq. "LWCOOL_MT_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "LW radiative cooling rate betweem model top and surface, +:cooling, -:warming"
    varname@units     = "W/m2"

    FLNT_any  = file_any->FLNT
    FLNT_base = file_base->FLNT
    FLNS_any  = file_any->FLNS
    FLNS_base = file_base->FLNS
  
    LWCOOL_any  = diff(FLNT_any,FLNS_any)
    LWCOOL_base  = diff(FLNT_base,FLNS_base)

    var_any = LWCOOL_any
    var_base = LWCOOL_base
  end if

  if ( varname .eq. "SWWARM_MT_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "SW radiative warming rate betweem model top and surface, +:warming, -:cooling"
    varname@units     = "W/m2"
  
    FSNT_any  = file_any->FSNT
    FSNT_base = file_base->FSNT
    FSNS_any  = file_any->FSNS
    FSNS_base = file_base->FSNS
  
    SWWARM_any  = diff(FSNT_any,FSNS_any)
    SWWARM_base  = diff(FSNT_base,FSNS_base)

    var_any = SWWARM_any
    var_base = SWWARM_base
  end if

  if ( varname .eq. "RADCOOL_TOA_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "Net radiative cooling rate betweem the TOA and surface, +:cooling, -:warming"
    varname@units     = "W/m2"

    FLUT_any  = file_any->FLUT
    FLUT_base = file_base->FLUT
    FLNS_any  = file_any->FLNS
    FLNS_base = file_base->FLNS
  
    FSNTOA_any  = file_any->FSNTOA
    FSNTOA_base = file_base->FSNTOA
    FSNS_any  = file_any->FSNS
    FSNS_base = file_base->FSNS
  
    LWCOOL_any  = diff(FLUT_any,FLNS_any)
    SWWARM_any  = diff(FSNTOA_any,FSNS_any)
    RADCOOL_any = diff(LWCOOL_any,SWWARM_any)
  
    LWCOOL_base  = diff(FLUT_base,FLNS_base)
    SWWARM_base  = diff(FSNTOA_base,FSNS_base)
    RADCOOL_base = diff(LWCOOL_base,SWWARM_base)

    var_any = RADCOOL_any
    var_base = RADCOOL_base
  end if

  if ( varname .eq. "LWCOOL_TOA_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "LW radiative cooling rate betweem the TOA and surface, +:cooling, -:warming"
    varname@units     = "W/m2"

    FLUT_any  = file_any->FLUT
    FLUT_base = file_base->FLUT
    FLNS_any  = file_any->FLNS
    FLNS_base = file_base->FLNS
  
    LWCOOL_any  = diff(FLUT_any,FLNS_any)
    LWCOOL_base  = diff(FLUT_base,FLNS_base)

    var_any = LWCOOL_any
    var_base = LWCOOL_base
  end if

  if ( varname .eq. "SWWARM_TOA_TO_SURF" ) then
    varname@printout  = True
    varname@long_name = "SW radiative warming rate betweem the TOA and surface, +:warming, -:cooling"
    varname@units     = "W/m2"
  
    FSNTOA_any  = file_any->FSNTOA
    FSNTOA_base = file_base->FSNTOA
    FSNS_any  = file_any->FSNS
    FSNS_base = file_base->FSNS
  
    SWWARM_any  = diff(FSNTOA_any,FSNS_any)
    SWWARM_base  = diff(FSNTOA_base,FSNS_base)

    var_any = SWWARM_any
    var_base = SWWARM_base
  end if

  if ( varname .eq. "RADSURF" ) then
    varname@printout  = True
    varname@long_name = "Surface energy imbalance (SW-LW-SH-LH), +:gain energy, -:lose energy"
    varname@units     = ""

    SHFLX_any  = file_any->SHFLX
    SHFLX_base = file_base->SHFLX
    FLNS_any   = file_any->FLNS
    FLNS_base  = file_base->FLNS
  
    LHFLX_any  = file_any->LHFLX
    LHFLX_base = file_base->LHFLX
    FSNS_any   = file_any->FSNS
    FSNS_base  = file_base->FSNS
  
    RADSURF_any  = LHFLX_any
    RADSURF_base = LHFLX_base
  
    RADSURF_any = FSNS_any - FLNS_any - SHFLX_any - LHFLX_any
    RADSURF_base = FSNS_base - FLNS_base - SHFLX_base - LHFLX_base
  
    var_any = RADSURF_any
    var_base = RADSURF_base
  end if

  dd1 = dimsizes(var_base)  ; if input varialbe name is wrong, NCL will fail here
  total_t = dd1(0)

  var_any_gbmean        = lat_wgt_avg(var_any)
  var_any_gbmean_tmmean = dim_avg(var_any_gbmean)
  var_any_gbmean_std    = stddev(var_any_gbmean)
  var_any_gbmean_se     = divide(var_any_gbmean_std, sqrt(total_t))

  var_base_gbmean        = lat_wgt_avg(var_base)
  var_base_gbmean_tmmean = dim_avg(var_base_gbmean)
  var_base_gbmean_std    = stddev(var_base_gbmean)
  var_base_gbmean_se     = divide(var_base_gbmean_std, sqrt(total_t))

  var_anyMbase               = diff(var_any, var_base)
  var_anyMbase_gbmean        = lat_wgt_avg(var_anyMbase)
  var_anyMbase_gbmean_tmmean = dim_avg(var_anyMbase_gbmean)
  var_anyMbase_gbmean_std    = stddev(var_anyMbase_gbmean)
  var_anyMbase_gbmean_se     = divide(var_anyMbase_gbmean_std, sqrt(total_t))

  string_all (ff) = varname+", "+suffix_any+", "+" area-mean, time-average: "+var_any_gbmean_tmmean+  \\
                                ", "+" area-mean, time standard deviation: "+var_any_gbmean_std+ \\
                                ", "+" area-mean, time standard error: "+var_any_gbmean_se

  string_allMbase(ff) = varname+", "+suffix_anyMbase+", "+" area-mean time-average: "+var_anyMbase_gbmean_tmmean+  \\
                                     ", "+" area-mean, time standard deviation: "+var_anyMbase_gbmean_std+ \\
                                     ", "+" area-mean, time standard error: "+var_anyMbase_gbmean_se

  if ( isatt(varnames, "writeout") .and. varnames@writeout ) then
    copy_VarAtts(varname,var_any)
    if ( isatt(var_any,"printout") ) then
      delete(var_any@printout)
    end if
    if ( isatt(var_any,"writeout") ) then
      delete(var_any@writeout)
    end if

    ;printVarSummary(var_any)

    print("")
    print("*****************************")
    print("write ["+varname+"] into the file ["+filename_any+"] ...")
    file_any->\$varname\$ = var_any
    print("Done. write ["+varname+"] into the file ["+filename_any+"]")
    print("*****************************")
  end if

  delete(var_any)

end do  ; end do of files
  
  ;************
  ; print out 
  ;************
  if (varname@printout) then

    ;*** print input files ***
    print("")
    print("*****************************")
    print("input files")
      do ff=0,nfile-1
        print("  "+suffixes(ff)+": ["+infilenames(ff)+"]")
      end do
    print("*****************************")
    print("")
  
    ;*** print variable name ***
    print("--------------------------")
    print("[Variable]: "+varname)
    print("[Long name]: "+varname@long_name)
    print("[Units]: "+varname@units)
    print("[total time steps for standard error]: "+total_t)
    print("")
  
    ;*** print results ***
    do ff=0,nfile-1
      print(""+string_all(ff))
    end do
  
    print("")
  
    ;*** print difference results ***
    do ff=0,nfile-1
      print(""+string_allMbase(ff))
    end do
    
  end if ; end if of varname@printout

  ;******************
  ; delete variables
  ;******************
  delete(varname)

  if (option_interp) then
    delete(var_interp)
    delete(plev_interp)
  end if
end do ; end do of vars 

EOF

#*** case: "cesm-print-vars" end ***


#*** case: "cesm-xy-flexible" start ***
elif [ $casename_work -a $casename_work == "cesm-xy-flexible" ]; then
cat >> $ncl_name << EOF
;--------------------
; Description:
;   plot CESM outputs on XY plot flexibly.
;   Current options: 1. var_latlon_avg_L_time          , e.g. time series of global-avg OLR
;                    2. pressure_L_var_latlontime_avg  , e.g. vertical profile ot global mean temperauture
;--------------------

;-------------------
; general settings
;-------------------
  varvars = (/${var01}/)
  nvar = dimsizes(varvars)
EOF

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  cat >> $ncl_name << EOF
  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

  ;*** wks ***
  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname+[respective name], search "wks_name" for the name of each plot

  ;*** plot res ***
  txString_ALL = "Year 1 - CESM1.1.1 slab-ocean"

  tiXAxisString = "Month"
  tiYAxisString = "units"

  ;tiMainString_start = ""
  ;tiMainString_end = ""
  ;tiMainString_start = "global-averaged"
  tiMainString_end = "global-averaged"

  ;*** plot choice ***
  option_plot = True
  option_plot@choice1 = "fig_nvars_nfiles-name_nfiles"  ; choice of plots

  ;option_plot@individual_file = True  ; plot each file on different figures

  ;*** plot type ***
  option_type = True   ; attribute @yvar_L_xvar, L looks like axises and the orign at cartesain coordiante

    ;option_type@x_coordinate = "12months"   ; set x coordinate to 12 months

    ;--- option_type@var_latlon_avg_L_time ---
    option_type@var_latlon_avg_L_time = True
    tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
    tt2 = 9999

    ;--- option_type@pressure_L_var_latlontime_avg ---
    ;option_type@pressure_L_var_latlontime_avg = True

    plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., \\
      250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., \\
      850., 875., 900., 925., 950., 975., 1000./)
    plev@long_name = "Pressure"
    plev@units     = "hPa"

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False

  if ( isatt(option_type, "x_coordinate") .and. option_type@x_coordinate .eq. "12months") then
    ;*** month coordinate ***
    time_month = fspan(0.,11.,12)
    res@tmXBMode = "Explicit"
    res@tmXBValues = time_month
    ;res@tmXBLabels = (/"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"/)
    res@tmXBLabels = (/"1","2","3","4","5","6","7","8","9","10","11","12"/)

    res@trXMinF = 0.
    res@trXMaxF = 11.

    res@xyMarkLineMode  = "MarkLines"  ; "Lines" "Markers"
    res@xyMonoMarker = True
    res@xyMarker = 4

    ;res@xyLineColors = (/2,2,4,4/)
    ;res@xyMarkerColors = res@xyLineColors
  end if

  ;res@trYMinF = .
  ;res@trXMaxF = .

  res_diff = res ; diff res

  opt  = True
  ;opt@legend_mean = False

  resp = True    ; panel res

;--------------------------
; check input time steps
;--------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if
  
  delete(ftemp1)

;----------------------------------------------------
; option_plot, choice 1, "fig_nvars_nfiles-name_nfiles"
;----------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_nvars_nfiles-name_nfiles" ) then

  ; set plot wks
  plot_varvar_all      = new (nvar,"graphic")
  plot_varvar_allMbase = new (nvar,"graphic")
  plot_varvar_any      = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  ; base file
  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; set panel row & column
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  ; set wks, "all" means all variables, "M" means minus
  wks_name_all      = plotname+"all_files-all_vars"
  wks_name_allMbase = plotname+"all"+"M"+suffixes(nfile-1)+"-all_vars"
  wks_all = gsn_open_wks(wks_type, wks_name_all)
  wks_allMbase = gsn_open_wks(wks_type, wks_name_allMbase)

  ;*******************************************************
  ; plot each variable from all files on the same figure
  ;*******************************************************
  ; loop for each variable
  file1 = addfiles(infilenames,"r")

  do vv=0,nvar-1 
    varvar = varvars(vv)
    print("process ALL ["+varvar+"] ...")

    ;--------------------------------------
    ; option_type@var_latlon_avg_L_time
    ;--------------------------------------
    if ( isatt(option_type,"var_latlon_avg_L_time") .and. option_type@var_latlon_avg_L_time ) then

      ; read variable from all files
      varvar_all0 = ignorant_get_var_files(infilenames,varvar)  ; get vars (files,time,lat,lon)
      ;printVarSummary(varvar_all0)

      ;varvar_all0 = unit_convert(varvar_all0,"","")
 
      varvar_all1 = lat_wgt_avg(varvar_all0) ; lat-weighted averafe, vars (files,time)
      ;printVarSummary(varvar_all1)
  
      varvar_all = varvar_all1(:,tt1:tt2)
  
      ; all variables minus base variables
      varvar_allMbase = varvar_all
      do ff=0,nfile-1
        varvar_allMbase(ff,:) = diff(varvar_all(ff,:),varvar_all(nfile-1,:))
      end do
  
      ; set time series 
      ntime = dimsizes(varvar_all(0,:))
      time_all = fspan(tofloat(tt1),tofloat(tt2),ntime)
  
      ;*** set plot variables ***
      var_xx_all      = time_all
      var_xx_allMbase = time_all
      var_yy_all      = varvar_all
      var_yy_allMbase = varvar_allMbase

      ;*** set res ***
      res@tiXAxisString = tiXAxisString
      if ( tiMainString_end .eq. "" ) then
        res@tiMainString = varvar
      else
        res@tiMainString = varvar+" ("+tiMainString_end+")"
      end if
      ;if ( tiMainString_start .eq. "" ) then
      ;  res_vars@tiMainString = varvar
      ;  res_diff_vars@tiMainString = varvar
      ;else
      ;  res_vars@tiMainString = tiMainString_start+" - "+varvar
      ;  res_diff_vars@tiMainString = tiMainString_start+" - "+varvar
      ;end if

      res_vars = res
      res_diff_vars = res
  
      if (tiYAxisString .eq. "units") then
        res_vars@tiYAxisString = varvar_all@units
        res_diff_vars@tiYAxisString = varvar_all@units
      end if
    end if  ; end if of option_type@var_latlon_avg_L_time

    ;-------------------------------------------
    ; option_type@pressure_L_var_latlontime_avg
    ;-------------------------------------------

    ; read variables
    if ( isatt(option_type,"pressure_L_var_latlontime_avg") .and. option_type@pressure_L_var_latlontime_avg ) then
      hyai_all = ignorant_get_var_files(infilenames,"hyai") 
      hybi_all = ignorant_get_var_files(infilenames,"hybi") 
      hyam_all = ignorant_get_var_files(infilenames,"hyam") 
      hybm_all = ignorant_get_var_files(infilenames,"hybm") 
      PS_all   = ignorant_get_var_files(infilenames,"PS") 
      P0_all   = ignorant_get_var_files(infilenames,"P0") 
      varvar_all = ignorant_get_var_files(infilenames,varvar)

      if (iscoord(varvar_all,"lev")) then
        hyaw_all = hyam_all(0,:)
        hybw_all = hybm_all(0,:)
        P0       = P0_all(0,0)
      else if (iscoord(varvar_all,"ilev")) then
        hyaw_all = hyai_all(0,:)
        hybw_all = hybi_all(0,:)
        P0       = P0_all(0,0)
      end if 
      end if 
 
      ; do interpolation
      varvar_all_plev = vinth2p(varvar_all, hyaw_all, hybw_all, plev, PS_all, 1, P0/100., 1, False)
      copy_VarAtts(varvar_all, varvar_all_plev)

      ; do time & lat & lon average
      varvar_all_plev_tavg = dim_avg_n_Wrap(varvar_all_plev,1)
      varvar_all_plev_tavg_ijavg = lat_wgt_avg(varvar_all_plev_tavg)

      ; all variables minus base variables
      varvar_allMbase_plev_tavg_ijavg = varvar_all_plev_tavg_ijavg
      do ff=0,nfile-1
        varvar_allMbase_plev_tavg_ijavg(ff,:) = diff(varvar_all_plev_tavg_ijavg(ff,:),varvar_all_plev_tavg_ijavg(nfile-1,:))
      end do

      ; set plot variables
      var_xx_all      = varvar_all_plev_tavg_ijavg
      var_yy_all      = plev
      var_xx_allMbase = varvar_allMbase_plev_tavg_ijavg
      var_yy_allMbase = plev
;printVarSummary(varvar_all)
;printVarSummary(varvar_all_plev)
;printVarSummary(varvar_all_plev_tavg)
;printVarSummary(varvar_all_plev_tavg_ijavg)
;printVarSummary(varvar_allMbase_plev_tavg_ijavg)

      ;*** set res ***
      opt@legend_mean = False

      if ( tiMainString_end .eq. "" ) then
        res@tiMainString = varvar
      else
        res@tiMainString = varvar+" ("+tiMainString_end+")"
      end if

      res@trYReverse = True
      res@tiXAxisString = var_xx_all@units
      res_vars = res
      res_diff_vars = res

      delete(hyaw_all)
      delete(hybw_all)
      delete(varvar_all)
      delete(varvar_all_plev)
      delete(varvar_all_plev_tavg)
      delete(varvar_all_plev_tavg_ijavg)
      delete(varvar_allMbase_plev_tavg_ijavg)
    end if  ; end if of option_type@pressure_L_var_latlontime_avg

    ; plot all variables
    plot_varvar_all(vv) = ignorant_xy(wks_all, var_xx_all, var_yy_all, suffixes, res_vars, opt)
 
    ; plot all varialbes minus base variable
    plot_varvar_allMbase(vv) = ignorant_xy(wks_allMbase, var_xx_allMbase, var_yy_allMbase, suffixes, res_diff_vars,opt)

    delete(var_xx_all)
    delete(var_yy_all)
    delete(var_xx_allMbase)
    delete(var_yy_allMbase)

  end do

  resp@txString =  txString_ALL
  gsn_panel(wks_all, plot_varvar_all, (/row1,column1/), resp)
  print("Done. Create ["+wks_name_all+"]")

  resp@txString =  "all files MINUS "+suffixes(nfile-1)
  gsn_panel(wks_allMbase, plot_varvar_allMbase, (/row1,column1/), resp)
  print("Done. Create ["+wks_name_allMbase+"]")

  ;*******************************************
  ; plot each variable with respective file
  ;*******************************************

if ( isatt(option_plot,"individual_file") .and. option_plot@individual_file ) then

  ; loop for files
  do ff=0,nfile-1
    ; set file name of the read-in file
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("process file ["+filename_any+"] ...")

    ; set suffix for the read-in file and base file
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks for the read-in file and base file
    wks_name_any      = plotname+suffix_any+"-all_vars"
    wks_any      = gsn_open_wks(wks_type, wks_name_any)

    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-all_vars"
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for variables
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("process var ["+varvar+"] ...")

      ;--------------------------------------
      ; option_type@var_latlon_avg_L_time
      ;--------------------------------------
      if ( isatt(option_type,"var_latlon_avg_L_time") .and. option_type@var_latlon_avg_L_time ) then

        varvar_any0  = filetemp_any->\$varvar\$(tt1:tt2,:,:)
        varvar_base0 = filetemp_base->\$varvar\$(tt1:tt2,:,:)

        ;varvar_base0 = unit_convert(varvar_base0, "" , "")
        ;varvar_any0  = unit_convert(varvar_any0 , "" , "")

        varvar_any  = lat_wgt_avg(varvar_any0)
        varvar_base = lat_wgt_avg(varvar_base0)
        varvar_anyMbase = diff(varvar_any,varvar_base)
  
        ntime = dimsizes(varvar_any)
        time_any = fspan(tofloat(tt1),tofloat(tt2),ntime)
 
        ;*** set plot variables ***
        var_xx_any      = time_any
        var_xx_anyMbase = time_any
        var_yy_any      = varvar_any
        var_yy_anyMbase = varvar_anyMbase

        ;*** set res ***
        res@tiXAxisString = tiXAxisString
        if ( tiMainString_end .eq. "" ) then
          res@tiMainString = varvar
        else
          res@tiMainString = varvar+" ("+tiMainString_end+")"
        end if
        if (tiYAxisString .eq. "units") then
          res@tiYAxisString = varvar_all@units
        end if
        ;if ( tiMainString_start .eq. "" ) then
        ;  res_vars@tiMainString = varvar
        ;  res_diff_vars@tiMainString = varvar
        ;else
        ;  res_vars@tiMainString = tiMainString_start+" - "+varvar
        ;  res_diff_vars@tiMainString = tiMainString_start+" - "+varvar
        ;end if
  
        res_vars = res
        res_diff_vars = res

      end if  ; end if of option_type@var_latlon_avg_L_time

      ;-------------------------------------------
      ; option_type@pressure_L_var_latlontime_avg
      ;-------------------------------------------
  
      ; read variables
      if ( isatt(option_type,"pressure_L_var_latlontime_avg") .and. option_type@pressure_L_var_latlontime_avg ) then
        hyai_any = filetemp_any->hyai      ; hybrid A coefficient at layer interface
        hybi_any = filetemp_any->hybi      ; hybrid B coefficient at layer interface
        hyam_any = filetemp_any->hyam      ; hybrid A coefficient at layer midpoints
        hybm_any = filetemp_any->hybm      ; hybrid B coefficient at layer midpoints
        PS_any   = filetemp_any->PS        ; surface pressures  in Pa
        P0_any   = filetemp_any->P0        ; reference pressure in Pa
        varvar_any = filetemp_any->\$varvar\$
      
        hyai_base = filetemp_base->hyai      ; hybrid A coefficient at layer interface
        hybi_base = filetemp_base->hybi      ; hybrid B coefficient at layer interface
        hyam_base = filetemp_base->hyam      ; hybrid A coefficient at layer midpoints
        hybm_base = filetemp_base->hybm      ; hybrid B coefficient at layer midpoints
        PS_base   = filetemp_base->PS        ; surface pressures  in Pa
        P0_base   = filetemp_base->P0        ; reference pressure in Pa
        varvar_base = filetemp_base->\$varvar\$
  
        if (iscoord(varvar_any,"lev")) then
          hyaw_any  = hyam_any
          hybw_any  = hybm_any
          hyaw_base = hyam_base
          hybw_base = hybm_base
        else if (iscoord(varvar_any,"ilev")) then
          hyaw_any  = hyai_any
          hybw_any  = hybi_any
          hyaw_base = hyai_base
          hybw_base = hybi_base
        end if
        end if
  
        ; do interpolation
        varvar_any_plev = vinth2p(varvar_any, hyaw_any, hybw_any, plev, PS_any, 1, P0_any/100., 1, False)
        copy_VarAtts(varvar_any, varvar_any_plev)
  
        ; do time & lat & lon average
        varvar_any_plev_tavg = dim_avg_n_Wrap(varvar_any_plev,0)
        varvar_any_plev_tavg_ijavg = lat_wgt_avg(varvar_any_plev_tavg)

;printVarSummary(varvar_any)
;printVarSummary(varvar_any_plev)
;printVarSummary(varvar_any_plev_tavg)
;printVarSummary(varvar_any_plev_tavg_ijavg)
;printVarSummary(varvar_anyMbase_plev_tavg_ijavg)

        ; do interpolation
        varvar_base_plev = vinth2p(varvar_base, hyaw_base, hybw_base, plev, PS_base, 1, P0_base/100., 1, False)
        copy_VarAtts(varvar_base, varvar_base_plev)
  
        ; do time & lat & lon average
        varvar_base_plev_tavg = dim_avg_n_Wrap(varvar_base_plev,0)
        varvar_base_plev_tavg_ijavg = lat_wgt_avg(varvar_base_plev_tavg)

        varvar_anyMbase_plev_tavg_ijavg = diff(varvar_any_plev_tavg_ijavg,varvar_base_plev_tavg_ijavg)
 
        ; set plot variables
        var_xx_any      = varvar_any_plev_tavg_ijavg
        var_yy_any      = plev
        var_xx_anyMbase = varvar_anyMbase_plev_tavg_ijavg
        var_yy_anyMbase = plev
  
        ;*** set res ***
        opt@legend_mean = False
  
        if ( tiMainString_end .eq. "" ) then
          res@tiMainString = varvar
        else
          res@tiMainString = varvar+" ("+tiMainString_end+")"
        end if
  
        res@trYReverse = True
        res@tiXAxisString = var_xx_any@units
        res_vars = res
        res_diff_vars = res
  
        delete(hyaw_any)
        delete(hybw_any)
        delete(varvar_any)
        delete(varvar_any_plev)
        delete(varvar_any_plev_tavg)
        delete(varvar_any_plev_tavg_ijavg)
        delete(varvar_anyMbase_plev_tavg_ijavg)

        delete(hyaw_base)
        delete(hybw_base)
        delete(varvar_base)
        delete(varvar_base_plev)
        delete(varvar_base_plev_tavg)
        delete(varvar_base_plev_tavg_ijavg)
      end if  ; end if of option_type@pressure_L_var_latlontime_avg

      ; plot each variable of the read-in file
      plot_varvar_any(vv) = ignorant_xy(wks_any, var_xx_any, var_yy_any, suffix_any, res_vars, opt)
  
      ; plot each diff of the read-in file
      plot_varvar_anyMbase(vv) = ignorant_xy(wks_anyMbase, var_xx_anyMbase, var_yy_anyMbase, suffix_any, res_diff_vars,opt)

      delete(var_xx_any)
      delete(var_yy_any)
      delete(var_xx_anyMbase)
      delete(var_yy_anyMbase)

    end do ; end do of vars

    ; panel plots
    resp@txString =  suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" MINUS "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files
end if ; end if of option_plot@individual_file

end if ; end if of option_plot = "fig_nvars_nfiles-name_nfiles" 


EOF
#*** case: "cesm-xy-flexible" end ***


#*** case: "cesm-cn_2dim-flexible" start ***
elif [ $casename_work -a $casename_work == "cesm-cn_2dim-flexible" ]; then

cat >> $ncl_name << EOF
;--------------------
; Description:
;   plot 2-D contour from CESM files
;     1. Pressure (Y) v.s. time (X) of variables that are averaged over lat & lon
;     2. Latitude (Y) v.s. time (X) of variables that are averaged over lon
;--------------------

;-------------------
; general settings
;-------------------
  varvars = (/${var01}/)
  nvar = dimsizes(varvars)  

  tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
  tt2 = 0
  ;tt2 = 9999

  option_plot = True
  ;option_plot@choice1 = "fig_1var_nfiles-name_nvars_nsteps"		; DONE. At each figure, plot a varaible from different files
  option_plot@choice2 = "fig_nvars_1file-name_nfiles_nsteps"		; DONE. At each figure, plot many variables in a file

  ;option_plot@choice3 = "fig-1var_ntimes-name_nvars_nfiles"		; N/A. At each figure, plot a variable at many time steps in a file
  ;option_plot@choice4 = "fig_1var_nfiles_sameLB-name_nvars_nsteps"	; N/A. At each figure, plot a variable and diff in different files and use the same labelbar for all time steps.
									; N/A. This can be used to make animation or movie.
  ;option_plot@choice5 = "fig_1var_2files_siglvl-name_nvars"            ; N/A At each figure, plot a variable from the base file and diff between another file with significane level

  opt_2Ddata = True  							; option for ignorant_convert_2Ddata
  ;opt_2Ddata@return_type = "pressure_time-latlon_avg"
  ;opt_2Ddata@return_type = "lat_time-lon_avg"
  opt_2Ddata@return_type = "pressure_lat-timelon_avg"

  ;opt_2Ddata@plev = (/1., 2., 3., 5., 7., 10., 20., 30., 50., 70., 100., 125., 150., 175., 200., 225., 250., 300., 350., 400., 450., 500., 550., 600., 650., 700., 750., 775., 800., 825., 850., 875., 900., 925., 950., 975., 1000./)  ; user-defined pressure levels. Default is from 1 hPa to 1000. hPa

  opt_2Ddata@time_coordinate = "monthly"

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname + var + "-step-" + t
  stepname = "month"


EOF

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  cat >> $ncl_name << EOF

  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

  ;*** choice 5: set t-test significance level ***
  siglvl = 0.05                      ; significance level 
  siglev = 100.*(1.-siglvl)
  iflag= False

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False

  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False

  if ( isatt(opt_2Ddata, "return_type") .and. opt_2Ddata@return_type .eq. "pressure_lat-timelon_avg") then
    ;res@gsnYAxisIrregular2Log = True
    res@gsnYAxisIrregular2Linear = True
    res@trYReverse = True
  end if

  if ( isatt(opt_2Ddata, "return_type") .and. opt_2Ddata@return_type .eq. "pressure_time-latlon_avg") then
    ;res@gsnYAxisIrregular2Log = True
    res@gsnYAxisIrregular2Linear = True
    res@trYReverse = True
    res@cnFillMode = "RasterFill"
  end if

  if ( isatt(opt_2Ddata, "return_type") .and. opt_2Ddata@return_type .eq. "lat_time-lon_avg") then
    if ( isatt(opt_2Ddata, "time_coordinate") .and. opt_2Ddata@time_coordinate .eq. "monthly") then
      ;*** month coordinate ***
        time_month = fspan(0.,11.,12)
        res@tmXBMode = "Explicit"
        res@tmXBValues = time_month
        ;res@tmXBLabels = (/"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"/)
        res@tmXBLabels = (/"1","2","3","4","5","6","7","8","9","10","11","12"/)

      ;*** latitude coordinate ***
      ;  res@tmYLMode = "Manual"
      ;  res@tmYLTickStartF = -5.
      ;  res@tmYLTickEndF = 20.
      ;  res@tmYLTickSpacingF = 5.
    end if
  end if

  opt_cncolors = True  ; a logical varialbe to control availabe features in this procedure
;  opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
;  opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
;                                             ; False - contour levels will be computed in this procedure
;  opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
;  opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
;  opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
;      
;  opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
;  opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
;  opt_cncolors@colormap_negative_index_end = 2             ; the least negative color

  opt_cnmap = True
;  opt_cnmap@LatWeighted = True (default)    ; do average considering latitude transformation effects
;                                              ; if turn on, data_input coordinate variable's MUST in correct format
;  opt_cnmap@MeanFormat = "%7.3f" (default)  ; set mean value format
;  opt_cnmap@MeanPrefix = "mean: " (default) ; set prefix of mean value

  resp = True    ; panel res

  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_vars@cnFillPalette = "WhiteBlueGreenYellowRed"

  res_diff_vars = res

  ;*** res for plotting t-test results ***
  res_sig = res
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = False

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,4/)

  res_sig@cnInfoLabelOn = False

;------------------------------------------
; check input time steps & set time steps
;------------------------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if

  ntime = tt2-tt1+1

  delete(ftemp1)

;--------------------------------------------------------------
; option_plot, choice 1,  "fig_1var_nfiles-name_nvars"
;-------------------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_1var_nfiles-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("option: plot every variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ; set plot variables
  plot_varvar_baseAdiff = new( nfile, "graphic" )
  plot_varvar_allAvalue = new( nfile, "graphic" )
  plot_varvar_allAdiff  = new( nfile, "graphic" )

  ; compute panel row# and column# 
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nfile)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars
    res_diff_vars1 = res_diff_vars

    ;if ( varvar .eq. "" ) then
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = ""
    ;end if

    ; set wks name, "all" means all variables and "M" means minus
    wks_name_baseAdiff = plotname+varvar+"-"+stepname1+"-"+suffixes(nfile-1)+"_allM"+suffixes(nfile-1)
    wks_baseAdiff = gsn_open_wks(wks_type, wks_name_baseAdiff)

    wks_name_allAvalue = plotname+varvar+"-"+stepname1+"-all_values"
    wks_allAvalue = gsn_open_wks(wks_type, wks_name_allAvalue)

    wks_name_allAdiff = plotname+varvar+"-"+stepname1+"-allM"+suffixes(nfile-1)
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)

    ;if ( isatt(opt_2Ddata, "return_type") .and. opt_2Ddata@return_type .eq. "lat_time-lon_avg") then
    ;  if ( isatt(opt_2Ddata, "time_coordinate") .and. opt_2Ddata@time_coordinate .eq. "monthly") then
    ;    varvar_base&time = time_month
    ;  end if
    ;end if

    ;if (varvar.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    ;if (varvar_base@units.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    if (varvar.eq."PRECC" .or. varvar.eq."PRECL" .or. varvar.eq."PRECT") then
      varvar_base = unit_convert(varvar_base,"m/s","mm/day")
    end if

    if (varvar_base@units.eq."Pa/s") then
      varvar_base = unit_convert(varvar_base,"Pa/s","hPa/day")
    end if

    ; plot
    if (varvar.eq."OMEGA") then
      opt_cncolors@colormap_positive = "MPL_Blues"
      opt_cncolors@colormap_positive_index_end = 97

      opt_cncolors@colormap_negative = "MPL_Reds"              
      opt_cncolors@colormap_negative_index_start = 97         ; the most  negative color
      opt_cncolors@colormap_negative_index_end = 2             ; the least negative color
      cnColors_PosNeg(varvar_base, res_vars1, opt_cncolors)

      delete(opt_cncolors)
      opt_cncolors = True
    end if

    res_vars1@tiMainString = suffix_base
    plot_varvar_baseAdiff(0) = gsn_csm_contour(wks_baseAdiff, varvar_base, res_vars1)
    plot_varvar_allAvalue(0) = gsn_csm_contour(wks_allAvalue, varvar_base, res_vars1)

    res_diff_vars1@tiMainString = suffix_base+" MINUS "+suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_contour(wks_allAdiff, diff(varvar_base,varvar_base), res_diff_vars1)

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)
      varvar_any = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)

      ;if ( isatt(opt_2Ddata, "return_type") .and. opt_2Ddata@return_type .eq. "lat_time-lon_avg") then
      ;  if ( isatt(opt_2Ddata, "time_coordinate") .and. opt_2Ddata@time_coordinate .eq. "monthly") then
      ;    varvar_any&time = time_month
      ;  end if
      ;end if

      ;if (varvar.eq."") then
      ;  varvar_any = unit_convert(varvar_any,"","")
      ;end if

      ;if (varvar_any@units.eq."") then
      ;  varvar_any = unit_convert(varvar_any,"","")
      ;end if

      if (varvar.eq."PRECC" .or. varvar.eq."PRECL" .or. varvar.eq."PRECT") then
        varvar_base = unit_convert(varvar_base,"m/s","mm/day")
      end if

      if (varvar_any@units.eq."Pa/s") then
        varvar_any = unit_convert(varvar_any,"Pa/s","hPa/day")
      end if

      ; plot 
      varvar_anyMbase = diff(varvar_any,varvar_base)
      res_diff_vars1@tiMainString = suffix_any+" MINUS "+suffix_base

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_baseAdiff(ff+1) = gsn_csm_contour(wks_baseAdiff, varvar_anyMbase(:,:), res_diff_vars1)

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_allAdiff(ff+1) = gsn_csm_contour(wks_allAdiff, varvar_anyMbase, res_diff_vars1)

      res_vars1@tiMainString = suffix_any
      plot_varvar_allAvalue(ff+1) = gsn_csm_contour(wks_allAvalue, varvar_any, res_vars1)

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)

    ; panel
    resp@txString =  varvar
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_baseAdiff, plot_varvar_baseAdiff, (/1,row1,nfile-row1/), resp)
    print("Done. Create ["+wks_name_baseAdiff+"]")

    resp@txString =  varvar
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

    resp@txString =  varvar
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAvalue, plot_varvar_allAvalue, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAvalue+"]")

    delete(res_vars1)
    delete(res_diff_vars1)

  end do ; end do of vars

end do ; end do of time steps

  delete(plot_varvar_baseAdiff)
  delete(plot_varvar_allAvalue)
  delete(plot_varvar_allAdiff)
end if ; end if of choice1: option_plot = "fig_1var_nfiles-name_nvars_nsteps"

;------------------------------------------------------------
; option_plot, choice2, "fig_nvars_1file-name_nfiles_nsteps"
;------------------------------------------------------------

if ( isatt(option_plot,"choice2") .and. option_plot@choice2 .eq. "fig_nvars_1file-name_nfiles_nsteps" ) then

  print("")
  print("---------------------------------------------------------")
  print("option: plot all variable of iindividual file and diff")
  print("---------------------------------------------------------")

  ; set graphic variable
  plot_varvar_any = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; compute panel row# and column#
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  ; loop for all files
  do ff=0,nfile-1
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("procees file ["+filename_any+"] ...")

    ; set f=suffix
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks
    wks_name_any      = plotname+suffix_any+"-"+stepname1+"-all_vars"
    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-"+stepname1+"-all_vars"

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for each variable
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("  process variable ["+varvar+"] ...")


      ;*** set res for diff vars ***
      res_vars1 = res_vars
      res_diff_vars1 = res_diff_vars

      ;if ( varvar .eq. "" ) then
      ; res_vars1@gsnLeftString = ""
      ; res_diff_vars1@gsnLeftString = ""
      ;end if

      ; read variable and rearrange
      varvar_any  = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata) 
      varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata) 

      ;if (varvar.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any ,"","")
      ;end if

      ;if (varvar_base@units.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any ,"","")
      ;end if

      if (varvar.eq."PRECC" .or. varvar.eq."PRECL" .or. varvar.eq."PRECT") then
        varvar_base = unit_convert(varvar_base,"m/s","mm/day")
        varvar_any  = unit_convert(varvar_any ,"m/s","mm/day")
      end if

      if (varvar_base@units.eq."Pa/s") then
        varvar_any  = unit_convert(varvar_any ,"Pa/s","hPa/day")
        varvar_base = unit_convert(varvar_base,"Pa/s","hPa/day")
      end if

      if (varvar.eq."OMEGA") then
        opt_cncolors@colormap_positive = "MPL_Blues"
        opt_cncolors@colormap_positive_index_end = 97

        opt_cncolors@colormap_negative = "MPL_Reds"              
        opt_cncolors@colormap_negative_index_start = 97         ; the most  negative color
        opt_cncolors@colormap_negative_index_end = 2             ; the least negative color
        cnColors_PosNeg(varvar_base, res_vars1, opt_cncolors)

        delete(opt_cncolors)
        opt_cncolors = True
      end if

      varvar_anyMbase = diff(varvar_any,varvar_base)

      ; plot
      res_vars1@tiMainString = varvar
      plot_varvar_any(vv) = gsn_csm_contour(wks_any, varvar_any(:,:), res_vars1)
 
      res_diff_vars1@tiMainString = varvar
      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_anyMbase(vv) = gsn_csm_contour(wks_anyMbase, varvar_anyMbase(:,:), res_diff_vars1)

      delete(varvar_any)
      delete(varvar_base)
      delete(varvar_anyMbase)

      delete(res_vars1)
      delete(res_diff_vars1)
    end do ; end do of vars

    ; panel
    resp@txString =  suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" Minus "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files
end do ; end do of files

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)

end if ; end if of choice2: option_plot = "fig_nvars_1file-name_nfiles"

;--------------------------------------------------------------
; option_plot, choice 3, "fig-1var_ntimes-name_nvars_nfiles"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice3") .and. option_plot@choice3 .eq. "fig-1var_ntimes-name_nvars_nfiles" ) then

  print("")
  print("----------------------------------------------------------------------")
  print("option: plot all time steps of each variable in every file and diff")
  print("----------------------------------------------------------------------")

  ; set plot variables
  ntime = tt2-tt1+1
  plot_varvar_any = new (ntime,"graphic")
  plot_varvar_anyMbase = new (ntime,"graphic")

  ; base file
  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

 ; compute panel row# and column#
  row1 = toint(sqrt(ntime))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

; loop for files
do ff=0,nfile-1
 
  ; set process file
  filename_any = infilenames(ff)
  filetemp_any = addfile(filename_any,"r")
  print("")
  print("process ["+filename_any+"] ...")

  suffix_any  = suffixes(ff)
  suffix_anyMbase = suffix_any+"M"+suffix_base
 
  ; loop for variables
  do vv=0,nvar-1

    varvar = varvars(vv)
    print("")
    print("  process ["+varvar+"] ...")

    ; set wks
    wks_name_any      = plotname+suffix_any+"-"+varvar+"-all_"+stepname
    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-"+varvar+"-all_"+stepname

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; read a varialbe
    varvar_base = filetemp_base->\$varvar\$(tt1:tt2,:,:)

    varvar_any = filetemp_any->\$varvar\$(tt1:tt2,:,:)
    varvar_anyMbase = diff(varvar_any,varvar_base)

    ;nfactor =
    ;varvar_base = multiply(varvar_base , nfactor)
    ;varvar_base@units = ""
    ;varvar_base = unit_convert(varvar_base , "" , "")

    ;nfactor =
    ;varvar_any = multiply(varvar_any , nfactor)
    ;varvar_any@units = ""
    ;varvar_any = unit_convert(varvar_any , "" , "")

    ; plot each time step
    tcount = 0
    do tt=tt1,tt2
      ss1 = sprinti("%2.2i",tt+1)
      stepname1 = stepname+ss1

      ; plot
      res_vars@tiMainString = stepname1
      plot_varvar_any(tcount) = gsn_csm_contour_map_avg(wks_any, varvar_any(tcount,:,:), res_vars, opt_cnmap)

      res_diff_vars@tiMainString = stepname1
      cnColors_PosNeg(varvar_anyMbase(tcount,:,:), res_diff_vars, opt_cncolors)
      plot_varvar_anyMbase(tcount) = gsn_csm_contour_map_avg(wks_anyMbase, varvar_anyMbase(tcount,:,:), res_diff_vars, opt_cnmap)

      tcount = tcount + 1
    end do

    ; panel
    resp@txString =  varvar+" - "+suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  varvar+" - "+suffix_any+" Minus "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

    end do ; end do of vars
  end do ; end do of files

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)

end if ; end if of choice3: option_plot = "fig-1var_ntimes-name_nvars_nfiles"

;--------------------------------------------------------------
; option_plot, choice 4,  "fig_1var_nfiles_diff-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice4") .and. option_plot@choice4 .eq. "fig_1var_nfiles_sameLB-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("option: plot a variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ;*************
  ; user setup
  ;*************
  ; set string
  gsnleftstrings = new(nvar, "string")
  gsnrightstrings = gsnleftstrings
  gsnleftstrings = ""

  ; set contour levels for values and diff
  max_levels_all      = 15 
  max_levels_allMbase = 15

  ; set plot variables
  plot_varvar_allAdiff  = new( nfile*2-1, "graphic" )

  ;***************
  ; program start
  ;***************
  ; set panel #column & #row
  row1 = nfile        ; #column of upper row
  column1 = nfile-1   ; #column of lower row

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for variables
do vv=0,nvar-1
  varvar = varvars(vv)

  ;*** set res ***
  res@gsnLeftString = gsnleftstrings(vv)
  res_vars = res
  res_vars@cnFillPalette = "WhiteBlueGreenYellowRed"
  res_diff_vars = res

  ;*************************************
  ; set common contour values and diff 
  ;*************************************

  ; read all files
  varvar_all = ignorant_get_var_files(infilenames,varvar)
  varvar_allMbase = varvar_all

  do ff=0,nfile-1
    varvar_allMbase(ff,:,:,:) = diff(varvar_all(ff,:,:,:),varvar_all(nfile-1,:,:,:))
  end do

  ; determine max and min values for all values
  varvar_all_max      = max(varvar_all)
  varvar_all_min      = min(varvar_all)

  mnmxint_all = nice_mnmxintvl(varvar_all_min, varvar_all_max, max_levels_all, False)
  cnmin_all = mnmxint_all(0)
  cnmax_all = mnmxint_all(1)
  cnint_all = mnmxint_all(2)

  res_vars@cnLevelSelectionMode = "ManualLevels"
  res_vars@cnMinLevelValF = cnmin_all
  res_vars@cnMaxLevelValF = cnmax_all
  res_vars@cnLevelSpacingF = cnint_all

  ; determine max and min values for all diff values
  varvar_allMbase_max = max(varvar_allMbase)
  varvar_allMbase_min = min(varvar_allMbase)

  mnmxint_allMbase = nice_mnmxintvl(varvar_allMbase_min, varvar_allMbase_max, max_levels_allMbase, False)
  cnmin_allMbase = mnmxint_allMbase(0)
  cnmax_allMbase = mnmxint_allMbase(1)
  cnint_allMbase = mnmxint_allMbase(2)

  res_diff_vars@cnLevelSelectionMode = "ManualLevels"
  res_diff_vars@cnMinLevelValF = cnmin_allMbase
  res_diff_vars@cnMaxLevelValF = cnmax_allMbase
  res_diff_vars@cnLevelSpacingF = cnint_allMbase
  
  ; determine diff fill colors
  opt_cncolors@cnlevels_predefine = True
  cnColors_PosNeg(varvar_all(0,0,:,:),res_diff_vars,opt_cncolors)
  
  ; loop for time steps
  do tt=tt1,tt2
    ss1 = sprinti("%4.4i",tt+1)
    stepname1 = stepname+ss1

    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;wks_name_allAdiff = plotname+varvar+"-"+stepname1+"-all_values-allM"+suffixes(nfile-1)
    wks_name_allAdiff = plotname+varvar+"-all_values-allM"+suffixes(nfile-1)+"-"+stepname1
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = filetemp_base->\$varvar\$(tt,:,:)
    res_vars@tiMainString = suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_contour_map_avg(wks_allAdiff, varvar_base, res_vars, opt_cnmap)

    ;******************************
    ; plot variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      varvar_any = filetemp_any->\$varvar\$(tt,:,:)
     
      varvar_anyMbase = diff(varvar_any,varvar_base)

      ;nfactor =
      ;varvar_any = multiply(varvar_any , nfactor)
      ;varvar_any@units = ""
      ;varvar_any = unit_convert(varvar_any , "" , "")

      ; plot 
      res_vars@tiMainString = suffix_any
      plot_varvar_allAdiff(ff+1)     = gsn_csm_contour_map_avg(wks_allAdiff, varvar_any, res_vars, opt_cnmap)

      res_diff_vars@tiMainString = suffix_any+" MINUS "+suffix_base
      plot_varvar_allAdiff(ff+nfile) = gsn_csm_contour_map_avg(wks_allAdiff, varvar_anyMbase, res_diff_vars, opt_cnmap)

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)

    ; panel
    resp@txString =  varvar+" - "+stepname+"_"+ss1
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

  end do ; end do of time steps

  delete(varvar_all)
  delete(varvar_allMbase)
  delete(res_vars)
  delete(res_diff_vars)

end do ; end do of vars

  delete(plot_varvar_allAdiff)
end if ; end if of choice4: option_plot = "fig_1var_nfiles_sameLB-name_nvars_nsteps"

;--------------------------------------------------------------
; option_plot, choice 5,  "fig_1var_2files_siglvl-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice5") .and. option_plot@choice5 .eq. "fig_1var_2files_siglvl-name_nvars" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("option: plot every variable of two files and diff with t-test overlay")
  print("--------------------------------------------------------------------------")

  ;******************************
  ; get lat and lon dimensions
  ;******************************

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

  nlat = -1
  nlon = -1

  if ( isdim(filetemp_base,"lat") ) then
    nlat = dimsizes(filetemp_base&lat)
  end if

  if ( isdim(filetemp_base,"lon") ) then
    nlon = dimsizes(filetemp_base&lon)
  end if

  ;****************************************
  ; set panel plot, row and column number
  ;****************************************
  plot = new(2,"graphic")
  row1    = 1
  column1 = 2

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+"] ...")

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = filetemp_base->\$varvar\$(tt1:tt2,:,:)

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2

      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      print("  process file ["+suffix_any+" , "+suffix_base+"] ...")

      ; read variables and rearrange
      varvar_any = filetemp_any->\$varvar\$(tt1:tt2,:,:)

      wksname_anyMbase_siglvl = plotname+varvar+"-"+suffix_anyMbase+"_siglvl"
      wks_anyMbase_siglvl = gsn_open_wks(wks_type, wksname_anyMbase_siglvl)

      ;************ 
      ; do t-test
      ;************
      prob = varvar_any(0,:,:)
      prob@long_name = "significance level"
      prob@units = "NONE"

      do j=0,nlat-1
      do i=0,nlon-1
        xtmp = varvar_any(:,j,i)
        ytmp = varvar_base(:,j,i)
    
      ;*** compute time-average and variance ***
        xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
        yAve = dim_avg_Wrap (ytmp)
        xVar = dim_variance_Wrap (xtmp)         ; calculate variances
        yVar = dim_variance_Wrap (ytmp)
    
      ;*** get size ***
        xN = dimsizes(xtmp)
        yN = dimsizes(ytmp)
    
        prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
      end do
      end do
        
      alpha = prob
      alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2

      ;**********************
      ; set plot variables
      ;**********************
      varvar_base_avg = dim_avg_n_Wrap(varvar_base,0)
      varvar_any_avg  = dim_avg_n_Wrap(varvar_any ,0)

      varvar_anyMbase_avg = diff(varvar_any_avg,varvar_base_avg)
      varvar_anyMbase_siglev = alpha

      ;********
      ; plot
      ;********
   
      ; plot varvar_base
      res_vars@tiMainString = suffix_base
      plot_base_avg = gsn_csm_contour_map(wks_anyMbase_siglvl, varvar_base_avg, res_vars)

      ; plot varvar_anyMbase with siglvl
      res_diff_vars@tiMainString = suffix_any+" - "+suffix_base+" at "+siglev+"% level for ("+tt1+"- "+tt2+") "+stepname

      opt1 = opt_cncolors
      cnColors_PosNeg(varvar_anyMbase_avg,res_diff_vars,opt1)

      plot_anyMbase_siglev = gsn_csm_contour_map_overlay(wks_anyMbase_siglvl, varvar_anyMbase_avg, varvar_anyMbase_siglev, res_diff_vars, res_sig)

      ;*************
      ; panel plot
      ;*************
      plot(0) = plot_base_avg
      plot(1) = plot_anyMbase_siglev
      gsn_panel(wks_anyMbase_siglvl ,plot, (/row1,column1/),resp)

      delete(prob)
      delete(alpha)
      delete(varvar_any)
      delete(wksname_anyMbase_siglvl)
      delete(wks_anyMbase_siglvl)
    end do ; end do of files

    delete(varvar_base)

  end do ; end do of vars

end if ; end if of choice5: option_plot = "fig_1var_2files_siglvl-name_nvars"

EOF
#*** case: "cesm-cn_2dim-flexible" end ***

#*** case: "cesm-wind_cn_map-flexible" start ***
elif [ $casename_work -a $casename_work == "cesm-wind_cn_map-flexible" ]; then
cat >> $ncl_name << EOF

;--------------------
; Description:
;   plot CESM files, variables, wind barb, and time stpes
;--------------------

;-------------------
; general settings
;-------------------
  varvars = (/${var01}/)
  ;varvars = (/${var01}/)
  nvar = dimsizes(varvars)  

  varvar_U = "U"   ; zonal wind variable name
  varvar_V = "V"   ; meridional wind variable name
  ;plev_uv = (/925.,825.,500./)
  plev_uv = (/600.,125./)
  nplev   = dimsizes(plev_uv)

  opt_2Ddata_uv = True
  opt_2Ddata_uv@do_lon_mono = True
  opt_2Ddata_uv@return_type = "time_lat_lon-plev"

  ;opt_2Ddata_uv@plev = (/925.,825.,500./)
  ;nplev = dimsizes(opt_2Ddata_uv@plev)

  tt1 = 0      ; process time step from tt1 to tt2. If tt2 exceeds the max steps, the max steps will use instead.
  ;tt2 = 1
  tt2 = 9999
  ;tt2 = 1

  option_plot = True
  ;option_plot@choice1 = "fig_1var_nfiles-name_nvars_nsteps"		; Done. At each figure, plot a varaible from different files
  ;option_plot@choice2 = "fig_nvars_1file-name_nfiles_nsteps"		; Done. At each figure, plot many variables in a file
  ;option_plot@choice3 = "fig-1var_ntimes-name_nvars_nfiles"		; Done. At each figure, plot a variable at many time steps in a file
  option_plot@choice4 = "fig_1var_nfiles_sameLB-name_nvars_nsteps"	; Done. At each figure, plot a variable and diff in different files and use the same labelbar for all time steps.
									; Yet. This can be used to make animation or movie.
  ;option_plot@choice5 = "fig_1var_2files_siglvl-name_nvars"            ; At each figure, plot a variable from the base file and diff between another file with significane level

  opt_2Ddata = True                                                     ; use ignorant_convert_2Ddata to read variables
  ;opt_2Ddata@return_type = "time_lat_lon-lon_mono"                     ; Turn on if need to change lon from 0~360 to -180~180
  ;opt_2Ddata@return_type = "time_lat_lon-plev"  
  ;opt_2Ddata@plev = 600.
  ;opt_2Ddata@plev = 125.
  opt_2Ddata@do_lon_mono = True

  wks_type = "png"
  plotname = "test111-"  ; plot name is plotname + var + "-step-" + t
  stepname = "month"

EOF

  cat >> $ncl_name << EOF

  infilenames = (/  \\
EOF

  for (( j=0; j<${num_files}; j=j+1 ))
  do
     if [ $j -eq $((num_files-1)) ]; then
       cat >> $ncl_name << EOF
                  "${infile[$j]}" /)
EOF
     else
       cat >> $ncl_name << EOF
                  "${infile[$j]}", \\
EOF
     fi
  done

  cat >> $ncl_name << EOF

  nfile = dimsizes(infilenames)

  suffixes = infilenames
  suffixes = (/${suffix01}/)

  ;*** choice 5: set t-test significance level ***
  siglvl = 0.05                      ; significance level 
  siglev = 100.*(1.-siglvl)
  iflag= False

;----------------
; set resources
;----------------

  res  = True
  res@gsnFrame = False
  res@gsnDraw = False
  res@gsnAddCyclic = False

  res@mpLimitMode = "LatLon"
  res@mpMaxLatF = 40.
  res@mpMinLatF = -40.
  res@mpMaxLonF = 55.
  res@mpMinLonF = -20.

  res_uv = res
  res_uv@gsnScalarContour        = True               ; set True to use gsn_csm_vector_scalar_map 

  res_uv@vcRefMagnitudeF         = 10.                ; make vectors larger
  res_uv@vcRefLengthF            = 0.050              ; ref vec length
  res_uv@vcGlyphStyle            = "WindBarb"         ; select wind barbs 
  res_uv@vcMinDistanceF          = 0.04               ; reduce to thin out windbarbs
  res_uv@vcRefAnnoOn             = False              ; turn off reference vector annotation

  res_uv@mpFillOn                = False
  res_uv@mpOutlineOn             = True               ; turn on map outline

  res@cnFillOn = True
  res@cnLinesOn = False
  res@cnLineLabelsOn = False
 
  ;res@gsnCenterString = ""
  
  opt  = True
  opt_cncolors = True  ; a logical varialbe to control availabe features in this procedure
;  opt_cncolors@max_levels = 15  ; level for using function nice_mnmxintvl
;  opt_cncolors@cnlevels_predefine = False    ; True  - contour levels are given in res
;                                             ; False - contour levels will be computed in this procedure
;  opt_cncolors@colormap_positive = "WhiteYellowOrangeRed"  ; colormap for plotting positive colors
;  opt_cncolors@colormap_positive_index_start = 2           ; the least positive color
;  opt_cncolors@colormap_positive_index_end = 999           ; the most  positive color
;      
;  opt_cncolors@colormap_negative = "MPL_GnBu"              ; colormap for plotting negative colors
;  opt_cncolors@colormap_negative_index_start = 127         ; the most  negative color
;  opt_cncolors@colormap_negative_index_end = 2             ; the least negative color

  opt_cnmap = True
;  opt_cnmap@LatWeighted = True (default)    ; do average considering latitude transformation effects
;                                              ; if turn on, data_input coordinate variable's MUST in correct format
;  opt_cnmap@MeanFormat = "%7.3f" (default)  ; set mean value format
;  opt_cnmap@MeanPrefix = "mean: " (default) ; set prefix of mean value

  resp = True    ; panel res
  resp@gsnMaximize = True

  ;*** "fig_nvars_1file-name_nfiles_nsteps" changable parts ***
  ;*** "fig-1var_ntimes-name_nvars_nfiles"  changable parts *** 
  res_vars = res
  res_vars@cnFillPalette = "WhiteBlueGreenYellowRed"
  copy_VarAtts(res_uv,res_vars)

  res_diff_vars = res
  copy_VarAtts(res_uv,res_diff_vars)

  ;*** res for plotting t-test results ***
  res_sig = res
  res_sig@cnLevelSelectionMode = "ExplicitLevels"
  res_sig@cnLevels = (/siglev/)
  res_sig@cnLinesOn = False

  res_sig@cnLineThicknessF = 3.

  res_sig@cnMonoFillColor = False
  res_sig@cnFillColors = (/-1,1/)

  res_sig@cnMonoFillPattern = False
  res_sig@cnFillPatterns = (/0,4/)

  res_sig@cnInfoLabelOn = False

;------------------------------------------
; check input time steps & set time steps
;------------------------------------------
  ftemp1 = addfile(infilenames(nfile-1),"r")
  fdims = getfiledimsizes(ftemp1)
  fdims_name = getvardims(ftemp1)
  nfdim = dimsizes(fdims)

  do i=0,nfdim-1
    if (fdims_name(i) .eq. "time") then
      timemax = fdims(i)-1
    end if
  end do

  if ( tt1 .gt. timemax .or. tt1 .lt. 0 ) then
    tt1 = 0
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  else if ( tt2 .gt. timemax ) then
    tt2 = timemax
    print("WARNING: given time step is out of range, set to 0 to MAX steps")
  end if
  end if

  ntime = tt2-tt1+1

  delete(ftemp1)

;--------------------------------------------------------------
; option_plot, choice 1,  "fig_1var_nfiles-name_nvars"
;-------------------------------------------------------------

if ( isatt(option_plot,"choice1") .and. option_plot@choice1 .eq. "fig_1var_nfiles-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 1: plot every variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ; set plot variables
  plot_varvar_baseAdiff = new( nfile, "graphic" )
  plot_varvar_allAvalue = new( nfile, "graphic" )
  plot_varvar_allAdiff  = new( nfile, "graphic" )

  ; compute panel row# and column# 
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nfile)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for pressure levels
do pp=0,nplev-1
  plev1 = plev_uv(pp)
  opt_2Ddata_uv@plev = plev1

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  opt_2Ddata@time_step = tt
  opt_2Ddata_uv@time_step = tt

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars             ; plot res
    res_diff_vars1 = res_diff_vars   ; plot res

    ;if ( varvar .eq. "" ) then
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = ""
    ;end if

    ; set wks name, "all" means all variables and "M" means minus
    wks_name_baseAdiff = plotname+"wind_"+plev1+"hPa-"+varvar+"-"+stepname1+"-"+suffixes(nfile-1)+"_allM"+suffixes(nfile-1)
    wks_baseAdiff = gsn_open_wks(wks_type, wks_name_baseAdiff)

    wks_name_allAvalue = plotname+"wind_"+plev1+"hPa-"+varvar+"-"+stepname1+"-all_values"
    wks_allAvalue = gsn_open_wks(wks_type, wks_name_allAvalue)

    wks_name_allAdiff = plotname+"wind_"+plev1+"hPa-"+varvar+"-"+stepname1+"-allM"+suffixes(nfile-1)
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    U_base      = ignorant_convert_2Ddata(filename_base,varvar_U,opt_2Ddata_uv)
    V_base      = ignorant_convert_2Ddata(filename_base,varvar_V,opt_2Ddata_uv)

    ;varvar_base = filetemp_any->\$varvar\$(tt,:,:)

    ;if (varvar.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    ;if (varvar_base@units.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    if (U_base@units.eq."m/s") then
      U_base = unit_convert(U_base,"m/s","knots")
    end if

    if (V_base@units.eq."m/s") then
      V_base = unit_convert(V_base,"m/s","knots")
    end if

    if (varvar_base@units .eq. "W/m2") then
      res_vars1@gsnRightString = "W m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    if (varvar_base@units .eq. "gram/m2") then
      res_vars1@gsnRightString = "g m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    ; plot
    res_vars1@tiMainString = suffix_base

    if (varvar.eq."U" .or. varvar.eq."V") then
      opt_cncolors@colormap_positive = "MPL_Greens"
      opt_cncolors@colormap_negative = "MPL_Purples"
      cnColors_PosNeg(varvar_base, res_vars1, opt_cncolors)
    end if

    ;plot_varvar_baseAdiff(0) = gsn_csm_contour_map_avg(wks_baseAdiff, varvar_base, res_vars1, opt_cnmap)
    ;plot_varvar_allAvalue(0) = gsn_csm_contour_map_avg(wks_allAvalue, varvar_base, res_vars1, opt_cnmap)
    ;res_diff_vars1@tiMainString = suffix_base+" - "+suffix_base
    ;plot_varvar_allAdiff(0) = gsn_csm_contour_map_avg(wks_allAdiff, diff(varvar_base,varvar_base), res_diff_vars1, opt_cnmap)

    plot_varvar_baseAdiff(0) = gsn_csm_vector_scalar_map(wks_baseAdiff, U_base, V_base, varvar_base, res_vars1)
    plot_varvar_allAvalue(0) = gsn_csm_vector_scalar_map(wks_allAvalue, U_base, V_base, varvar_base, res_vars1)

    res_diff_vars1@tiMainString = suffix_base+" - "+suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_vector_scalar_map(wks_allAdiff, U_base, V_base, diff(varvar_base,varvar_base), res_vars1) 

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      varvar_any = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      U_any      = ignorant_convert_2Ddata(filename_any,varvar_U,opt_2Ddata_uv)
      V_any      = ignorant_convert_2Ddata(filename_any,varvar_V,opt_2Ddata_uv)

      if (U_any@units.eq."m/s") then
        U_any = unit_convert(U_any,"m/s","knots")
      end if
 
      if (V_any@units.eq."m/s") then
        V_any = unit_convert(V_any,"m/s","knots")
      end if
 
     ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)

      ;if (varvar.eq."") then
      ;  varvar_any = unit_convert(varvar_any,"","")
      ;end if

      ;if (varvar_any@units.eq."") then
      ;  varvar_any = unit_convert(varvar_any,"","")
      ;end if

      ; plot 
      varvar_anyMbase = diff(varvar_any,varvar_base)
      U_anyMbase      = diff(U_any,U_base)
      V_anyMbase      = diff(V_any,V_base)

      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base

      delete(opt_cncolors)
      opt_cncolors = True

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_baseAdiff(ff+1) = gsn_csm_vector_scalar_map(wks_baseAdiff, U_anyMbase, V_anyMbase, varvar_anyMbase(:,:), res_diff_vars1)

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_allAdiff(ff+1) = gsn_csm_vector_scalar_map(wks_allAdiff, U_anyMbase, V_anyMbase, varvar_anyMbase, res_diff_vars1)

      res_vars1@tiMainString = suffix_any
      plot_varvar_allAvalue(ff+1) = gsn_csm_vector_scalar_map(wks_allAvalue, U_any, V_any ,varvar_any, res_vars1)

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(varvar_anyMbase)
    delete(U_any)
    delete(U_base)
    delete(U_anyMbase)
    delete(V_any)
    delete(V_base)
    delete(V_anyMbase)

    ; panel
    resp@txString =  "wind at "+plev1+" hPa - "+varvar+" - "+stepname1
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_baseAdiff, plot_varvar_baseAdiff, (/1,row1,nfile-row1/), resp)
    print("Done. Create ["+wks_name_baseAdiff+"]")

    ;resp@txString =  varvar+" - "+stepname1
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

    ;resp@txString =  varvar+" - "+stepname1
    resp@gsnPanelRowSpec = False
    gsn_panel(wks_allAvalue, plot_varvar_allAvalue, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAvalue+"]")

    delete(res_vars1)
    delete(res_diff_vars1)
  end do ; end do of vars

end do ; end do of time steps
end do ; end do of plev

  delete(plot_varvar_baseAdiff)
  delete(plot_varvar_allAvalue)
  delete(plot_varvar_allAdiff)
end if ; end if of option_plot = "fig_1var_nfiles-name_nvars_nsteps"

;------------------------------------------------------------
; option_plot, choice2, "fig_nvars_1file-name_nfiles_nsteps"
;------------------------------------------------------------

if ( isatt(option_plot,"choice2") .and. option_plot@choice2 .eq. "fig_nvars_1file-name_nfiles_nsteps" ) then

  print("")
  print("---------------------------------------------------------")
  print("choice 2: plot all variable of iindividual file and diff")
  print("---------------------------------------------------------")

  ; set graphic variable
  plot_varvar_any = new (nvar,"graphic")
  plot_varvar_anyMbase = new (nvar,"graphic")

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")

  ; compute panel row# and column#
  row1 = toint(sqrt(nvar))
  pp1 = sqrt(nvar)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

; loop for pressure levels
do pp=0,nplev-1
  plev1 = plev_uv(pp)
  opt_2Ddata_uv@plev = plev1

; loop for time steps
do tt=tt1,tt2
  ss1 = sprinti("%2.2i",tt+1)
  stepname1 = stepname+ss1

  opt_2Ddata@time_step = tt
  opt_2Ddata_uv@time_step = tt

  ; loop for all files
  do ff=0,nfile-1
    filename_any = infilenames(ff)
    filetemp_any = addfile(filename_any,"r")
    print("")
    print("procees file ["+filename_any+"] ...")

    ; set f=suffix
    suffix_any  = suffixes(ff)
    suffix_base = suffixes(nfile-1)
 
    ; set wks
    wks_name_any      = plotname+suffix_any+"-"+stepname1+"-wind_"+plev1+"hPa-all_vars"
    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-"+stepname1+"-wind_"+plev1+"hPa-all_vars"

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; loop for each variable
    do vv=0,nvar-1 
      varvar = varvars(vv)
      print("  process variable ["+varvar+"] ...")

      ;*** set res for diff vars ***
      res_vars1 = res_vars             ; plot res
      res_diff_vars1 = res_diff_vars   ; plot res

      ; read variable and rearrange
      varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
      U_base      = ignorant_convert_2Ddata(filename_base,varvar_U,opt_2Ddata_uv)
      V_base      = ignorant_convert_2Ddata(filename_base,varvar_V,opt_2Ddata_uv)

      varvar_any  = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      U_any       = ignorant_convert_2Ddata(filename_any,varvar_U,opt_2Ddata_uv)
      V_any       = ignorant_convert_2Ddata(filename_any,varvar_V,opt_2Ddata_uv)

      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)
      ;varvar_base = filetemp_base->\$varvar\$(tt,:,:)

      ;if (varvar.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any,"","")
      ;end if
  
      ;if (varvar_base@units.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any,"","")
      ;end if
  
      if (varvar_base@units .eq. "W/m2") then
        res_vars1@gsnRightString = "W m~S~-2"
        res_diff_vars1@gsnRightString = res_vars1@gsnRightString
      end if
  
      if (varvar_base@units .eq. "gram/m2") then
        res_vars1@gsnRightString = "g m~S~-2"
        res_diff_vars1@gsnRightString = res_vars1@gsnRightString
      end if

      varvar_anyMbase = diff(varvar_any,varvar_base)
      U_anyMbase      = diff(U_any,U_base)
      V_anyMbase      = diff(V_any,V_base)

      ; plot
      res_vars1@tiMainString = varvar
      plot_varvar_any(vv) = gsn_csm_vector_scalar_map(wks_any, U_any, V_any, varvar_any, res_vars1)
      res_diff_vars1@tiMainString = varvar

      delete(opt_cncolors)
      opt_cncolors = True

      cnColors_PosNeg(varvar_anyMbase, res_diff_vars1, opt_cncolors)
      plot_varvar_anyMbase(vv) = gsn_csm_vector_scalar_map(wks_anyMbase, U_anyMbase, V_anyMbase, varvar_anyMbase , res_diff_vars1)

      delete(varvar_any)
      delete(varvar_base)
      delete(varvar_anyMbase)

      delete(U_any)
      delete(V_any)
      delete(U_base)
      delete(V_base)
      delete(U_anyMbase)
      delete(V_anyMbase)

      delete(res_vars1)
      delete(res_diff_vars1)
    end do ; end do of vars

    ; panel
    resp@txString =  suffix_any+" - "+stepname1+" - wind at "+plev1+" hPa"
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  suffix_any+" MINUS "+suffix_base+" - "+stepname1+" - wind at "+plev1+" hPa"
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

  end do   ; end do of files
end do ; end do of files
end do ; end do of plev

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)

end if ; end if of option_plot = "fig_nvars_1file-name_nfiles"

;--------------------------------------------------------------
; option_plot, choice 3, "fig-1var_ntimes-name_nvars_nfiles"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice3") .and. option_plot@choice3 .eq. "fig-1var_ntimes-name_nvars_nfiles" ) then

  print("")
  print("----------------------------------------------------------------------")
  print("choice 3: plot all time steps of each variable in every file and diff")
  print("----------------------------------------------------------------------")

  ; set plot variables
  ntime = tt2-tt1+1
  plot_varvar_any = new (ntime,"graphic")
  plot_varvar_anyMbase = new (ntime,"graphic")

  ; base file
  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

 ; compute panel row# and column#
  row1 = toint(sqrt(ntime))
  pp1 = sqrt(ntime)-tofloat(row1)
  if (pp1 .gt. 0.5) then
    row1 = row1+1
  end if
  column1 = row1+1

; loop for plev
do pp=0,nplev-1
  plev1 = plev_uv(pp)
  opt_2Ddata_uv@plev = plev1  

; loop for files
do ff=0,nfile-1
 
  ; set process file
  filename_any = infilenames(ff)
  filetemp_any = addfile(filename_any,"r")
  print("")
  print("process ["+filename_any+"] ...")

  suffix_any  = suffixes(ff)
  suffix_anyMbase = suffix_any+"M"+suffix_base
 
  ; loop for variables
  do vv=0,nvar-1

    varvar = varvars(vv)
    print("")
    print("  process ["+varvar+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars             ; plot res
    res_diff_vars1 = res_diff_vars   ; plot res

    ;if ( varvar .eq. "" ) then
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = ""
    ;end if

    ; set wks
    wks_name_any      = plotname+suffix_any+"-"+varvar+"-wind_"+plev1+"hPa-all_"+stepname
    wks_name_anyMbase = plotname+suffix_any+"M"+suffix_base+"-"+varvar+"-wind_"+plev1+"hPa-all_"+stepname

    wks_any      = gsn_open_wks(wks_type, wks_name_any)
    wks_anyMbase = gsn_open_wks(wks_type, wks_name_anyMbase)

    ; read a varialbe
    if ( isatt(opt_2Ddata,"time_step") ) then
      delete(opt_2Ddata@time_step)
    end if

    varvar_base0 = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    U_base0      = ignorant_convert_2Ddata(filename_base,varvar_U,opt_2Ddata_uv)
    V_base0      = ignorant_convert_2Ddata(filename_base,varvar_V,opt_2Ddata_uv)
    varvar_base  = varvar_base0(tt1:tt2,:,:)
    U_base       = U_base0(tt1:tt2,:,:)
    V_base       = V_base0(tt1:tt2,:,:)

    varvar_any0  = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
    U_any0       = ignorant_convert_2Ddata(filename_any,varvar_U,opt_2Ddata_uv)
    V_any0       = ignorant_convert_2Ddata(filename_any,varvar_V,opt_2Ddata_uv)
    varvar_any   = varvar_any0(tt1:tt2,:,:)
    U_any        = U_any0(tt1:tt2,:,:)
    V_any        = V_any0(tt1:tt2,:,:)

    if (varvar_base@units .eq. "W/m2") then
      res_vars1@gsnRightString = "W m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    if (varvar_base@units .eq. "gram/m2") then
      res_vars1@gsnRightString = "g m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    ;if (varvar.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;  varvar_any  = unit_convert(varvar_any,"","")
    ;end if

    ;if (varvar_base@units.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;  varvar_any  = unit_convert(varvar_any,"","")
    ;end if


    varvar_anyMbase = diff(varvar_any,varvar_base)
    U_anyMbase      = diff(U_any,U_base)
    V_anyMbase      = diff(V_any,V_base)

    ; plot each time step
    tcount = 0
    do tt=tt1,tt2
      ss1 = sprinti("%2.2i",tt+1)
      stepname1 = stepname+ss1

      if (varvar.eq."U" .or. varvar.eq."V") then
        opt_cncolors@colormap_positive = "MPL_Greens"
        opt_cncolors@colormap_negative = "MPL_Purples"
        cnColors_PosNeg(varvar_any(tcount,:,:), res_vars1, opt_cncolors)
      end if

      ; plot
      res_vars1@tiMainString = stepname1
      plot_varvar_any(tcount) = gsn_csm_vector_scalar_map(wks_any, U_any(tcount,:,:), V_any(tcount,:,:), varvar_any(tcount,:,:), res_vars1)

      res_diff_vars1@tiMainString = stepname1

      delete(opt_cncolors)
      opt_cncolors = True

      cnColors_PosNeg(varvar_anyMbase(tcount,:,:), res_diff_vars1, opt_cncolors)
      plot_varvar_anyMbase(tcount) = gsn_csm_vector_scalar_map(wks_anyMbase, U_anyMbase(tcount,:,:), V_anyMbase(tcount,:,:), varvar_anyMbase(tcount,:,:), res_diff_vars1)

      tcount = tcount + 1
    end do

    ; panel
    resp@txString =  varvar+" - wind at "+plev1+" hPa - "+suffix_any
    gsn_panel(wks_any, plot_varvar_any, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_any+"]")

    resp@txString =  varvar+" - wind at "+plev1+" hPa - "+suffix_any+" MINUS "+suffix_base
    gsn_panel(wks_anyMbase, plot_varvar_anyMbase, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_anyMbase+"]")

    delete(varvar_base)
    delete(varvar_base0)
    delete(varvar_any)
    delete(varvar_any0)
    delete(V_base)
    delete(V_base0)
    delete(V_any)
    delete(V_any0)
    delete(U_base)
    delete(U_base0)
    delete(U_any)
    delete(U_any0)
    delete(res_vars1)
    delete(res_diff_vars1)

    end do ; end do of vars
  end do ; end do of files
end do ; end do of plev

  delete(plot_varvar_any)
  delete(plot_varvar_anyMbase)
end if ; end if of option_plot = "fig-1var_ntimes-name_nvars_nfiles"

;--------------------------------------------------------------
; option_plot, choice 4,  "fig_1var_nfiles_diff-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice4") .and. option_plot@choice4 .eq. "fig_1var_nfiles_sameLB-name_nvars_nsteps" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 4: plot a variable of multiple files and diff at each time step")
  print("--------------------------------------------------------------------------")

  ;*************
  ; user setup
  ;*************
  ; set string
  gsnleftstrings = new(nvar, "string")
  gsnrightstrings = gsnleftstrings
  gsnleftstrings = ""

  ; set contour levels for values and diff
  max_levels_all      = 15 
  max_levels_allMbase = 15

  ; set plot variables
  plot_varvar_allAdiff  = new( nfile*2-1, "graphic" )

  ;***************
  ; program start
  ;***************
  ; set panel #column & #row
  row1 = nfile        ; #column of upper row
  column1 = nfile-1   ; #column of lower row

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

; loop for plev
do pp=0,nplev-1
  plev1 = plev_uv(pp)
  opt_2Ddata_uv@plev = plev1

; loop for variables
do vv=0,nvar-1
  varvar = varvars(vv)

  ;*** set res ***
  res_vars1 = res_vars
  ;res_vars1@gsnLeftString = gsnleftstrings(vv)
  res_diff_vars1 = res_diff_vars
  ;res_diff_vars1@gsnLeftString = gsnleftstrings(vv)

  ;if ( varvar .eq. "" ) then
  ; res_vars1@gsnLeftString = ""
  ; res_diff_vars1@gsnLeftString = ""
  ;end if

  ;*************************************
  ; set common contour values and diff 
  ;*************************************

  ; read all files
  varvar_all = ignorant_get_var_files(infilenames,varvar)
  varvar_allMbase = varvar_all

  do ff=0,nfile-1
    varvar_allMbase(ff,:,:,:) = diff(varvar_all(ff,:,:,:),varvar_all(nfile-1,:,:,:))
  end do

  ; determine max and min values for all values
  varvar_all_max      = max(varvar_all)
  varvar_all_min      = min(varvar_all)

  mnmxint_all = nice_mnmxintvl(varvar_all_min, varvar_all_max, max_levels_all, False)
  cnmin_all = mnmxint_all(0)
  cnmax_all = mnmxint_all(1)
  cnint_all = mnmxint_all(2)

  res_vars1@cnLevelSelectionMode = "ManualLevels"
  res_vars1@cnMinLevelValF = cnmin_all
  res_vars1@cnMaxLevelValF = cnmax_all
  res_vars1@cnLevelSpacingF = cnint_all

  ; determine max and min values for all diff values
  varvar_allMbase_max = max(varvar_allMbase)
  varvar_allMbase_min = min(varvar_allMbase)

  mnmxint_allMbase = nice_mnmxintvl(varvar_allMbase_min, varvar_allMbase_max, max_levels_allMbase, False)
  cnmin_allMbase = mnmxint_allMbase(0)
  cnmax_allMbase = mnmxint_allMbase(1)
  cnint_allMbase = mnmxint_allMbase(2)

  res_diff_vars1@cnLevelSelectionMode = "ManualLevels"
  res_diff_vars1@cnMinLevelValF = cnmin_allMbase
  res_diff_vars1@cnMaxLevelValF = cnmax_allMbase
  res_diff_vars1@cnLevelSpacingF = cnint_allMbase
  
  ; determine diff fill colors
  opt_cncolors@cnlevels_predefine = True
  cnColors_PosNeg(varvar_all(0,0,:,:),res_diff_vars1,opt_cncolors)
  
  ; loop for time steps
  do tt=tt1,tt2
    ss1 = sprinti("%4.4i",tt+1)
    stepname1 = stepname+ss1

    opt_2Ddata@time_step = tt
    opt_2Ddata_uv@time_step = tt

    print("")
    print("process ["+varvar+", "+stepname1+"] ...")

    ;wks_name_allAdiff = plotname+varvar+"-"+stepname1+"-all_values-allM"+suffixes(nfile-1)
    wks_name_allAdiff = plotname+varvar+"-wind_"+plev1+"hPa-all_values-allM"+suffixes(nfile-1)+"-"+stepname1
    wks_allAdiff = gsn_open_wks(wks_type, wks_name_allAdiff)

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    U_base      = ignorant_convert_2Ddata(filename_base,varvar_U,opt_2Ddata_uv)
    V_base      = ignorant_convert_2Ddata(filename_base,varvar_V,opt_2Ddata_uv)

    ;varvar_base = filetemp_base->\$varvar\$(tt,:,:)

    if (varvar_base@units .eq. "W/m2") then
      res_vars1@gsnRightString = "W m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    if (varvar_base@units .eq. "gram/m2") then
      res_vars1@gsnRightString = "g m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    res_vars1@tiMainString = suffix_base
    plot_varvar_allAdiff(0) = gsn_csm_vector_scalar_map(wks_allAdiff, U_base, V_base, varvar_base, res_vars1)

    ;******************************
    ; plot variables except base file
    ;******************************

    do ff=0,nfile-2
      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      ; read variables and rearrange
      varvar_any = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      U_any      = ignorant_convert_2Ddata(filename_any,varvar_U,opt_2Ddata_uv)
      V_any      = ignorant_convert_2Ddata(filename_any,varvar_V,opt_2Ddata_uv)

      ;varvar_any = filetemp_any->\$varvar\$(tt,:,:)
     
      varvar_anyMbase = diff(varvar_any,varvar_base)
      U_anyMbase      = diff(U_any,U_base)
      V_anyMbase      = diff(V_any,V_base)

      ;if (varvar.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any,"","")
      ;end if

      ;if (varvar_base@units.eq."") then
      ;  varvar_base = unit_convert(varvar_base,"","")
      ;  varvar_any  = unit_convert(varvar_any,"","")
      ;end if

      if (varvar_base@units .eq. "W/m2") then
        res_vars1@gsnRightString = "W m~S~-2"
        res_diff_vars1@gsnRightString = res_vars1@gsnRightString
      end if

      if (varvar_base@units .eq. "gram/m2") then
        res_vars1@gsnRightString = "g m~S~-2"
        res_diff_vars1@gsnRightString = res_vars1@gsnRightString
      end if

      ; plot 
      res_vars1@tiMainString = suffix_any
      plot_varvar_allAdiff(ff+1) = gsn_csm_vector_scalar_map(wks_allAdiff, U_any, V_any, varvar_any, res_vars1) 

      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base
      plot_varvar_allAdiff(ff+nfile) = gsn_csm_vector_scalar_map(wks_allAdiff, U_anyMbase, V_anyMbase, varvar_anyMbase, res_diff_vars1) 

    end do ; end do of files

    delete(varvar_any)
    delete(varvar_base)
    delete(U_base)
    delete(V_base)
    delete(U_any)
    delete(V_any)
    delete(varvar_anyMbase)
    delete(U_anyMbase)
    delete(V_anyMbase)

    ; panel
    resp@txString =  varvar+" - wind at "+plev1+" hPa -"+stepname+"_"+ss1
    resp@gsnPanelRowSpec = True
    gsn_panel(wks_allAdiff, plot_varvar_allAdiff, (/row1,column1/), resp)
    print("Done. Create ["+wks_name_allAdiff+"]")

  end do ; end do of time steps

  delete(varvar_all)
  delete(varvar_allMbase)
  delete(res_vars1)
  delete(res_diff_vars1)

end do ; end do of vars
end do ; end do of plev

  delete(plot_varvar_allAdiff)
end if ; end if of option_plot = "fig_1var_nfiles_sameLB-name_nvars_nsteps"

;--------------------------------------------------------------
; option_plot, choice 5,  "fig_1var_2files_siglvl-name_nvars"
;--------------------------------------------------------------

if ( isatt(option_plot,"choice5") .and. option_plot@choice5 .eq. "fig_1var_2files_siglvl-name_nvars" ) then
 
  print("") 
  print("--------------------------------------------------------------------------")
  print("choice 5: plot every variable of two files and diff with t-test overlay")
  print("--------------------------------------------------------------------------")

  ;******************************
  ; get lat and lon dimensions
  ;******************************

  filename_base = infilenames(nfile-1)
  filetemp_base = addfile(filename_base,"r")
  suffix_base = suffixes(nfile-1)

  nlat = -1
  nlon = -1

  if ( isdim(filetemp_base,"lat") ) then
    nlat = dimsizes(filetemp_base&lat)
  end if

  if ( isdim(filetemp_base,"lon") ) then
    nlon = dimsizes(filetemp_base&lon)
  end if

  ;****************************************
  ; set panel plot, row and column number
  ;****************************************
  plot = new(2,"graphic")
  row1    = 1
  column1 = 2

  ; loop for variables
  do vv=0,nvar-1
    varvar = varvars(vv)
    print("")
    print("process ["+varvar+"] ...")

    ;*** set res for diff vars ***
    res_vars1 = res_vars
    res_diff_vars1 = res_diff_vars

    opt_cncolors = True

    ;if ( varvar .eq. "" ) then
    ; ;opt_cncolors = False
    ; ;opt_cncolors@cnlevels_predefine = False
    ; res_vars1@gsnLeftString = ""
    ; res_diff_vars1@gsnLeftString = " at "+siglev+"% level"
    ;end if

    ;******************************
    ; plot variables of base file
    ;******************************
    varvar_base0 = ignorant_convert_2Ddata(filename_base,varvar,opt_2Ddata)
    varvar_base  = varvar_base0(tt1:tt2,:,:)

    if (varvar_base@units .eq. "W/m2") then
      res_vars1@gsnRightString = "W m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    if (varvar_base@units .eq. "gram/m2") then
      res_vars1@gsnRightString = "g m~S~-2"
      res_diff_vars1@gsnRightString = res_vars1@gsnRightString
    end if

    ;if (varvar.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    ;if (varvar_base@units.eq."") then
    ;  varvar_base = unit_convert(varvar_base,"","")
    ;end if

    ;******************************
    ; plot* variables except base file
    ;******************************

    do ff=0,nfile-2

      ; set file name and suffix
      filename_any = infilenames(ff)
      filetemp_any = addfile(filename_any,"r")

      suffix_any  = suffixes(ff)
      suffix_anyMbase = suffix_any+"M"+suffix_base

      print("  process file ["+suffix_any+" , "+suffix_base+"] ...")

      ; read variables and rearrange
      varvar_any0 = ignorant_convert_2Ddata(filename_any,varvar,opt_2Ddata)
      varvar_any  = varvar_any0(tt1:tt2,:,:)

      wksname_anyMbase_siglvl = plotname+varvar+"-"+suffix_anyMbase+"_siglvl"
      wks_anyMbase_siglvl = gsn_open_wks(wks_type, wksname_anyMbase_siglvl)

      ;************ 
      ; do t-test
      ;************
      prob = varvar_any(0,:,:)
      prob@long_name = "significance level"
      prob@units = "NONE"

      do j=0,nlat-1
      do i=0,nlon-1
        xtmp = varvar_any(:,j,i)
        ytmp = varvar_base(:,j,i)
    
      ;*** compute time-average and variance ***
        xAve = dim_avg_Wrap (xtmp)              ; calculate means at each grid point 
        yAve = dim_avg_Wrap (ytmp)
        xVar = dim_variance_Wrap (xtmp)         ; calculate variances
        yVar = dim_variance_Wrap (ytmp)
    
      ;*** get size ***
        xN = dimsizes(xtmp)
        yN = dimsizes(ytmp)
    
        prob(j,i) = ttest(xAve,xVar,xN, yAve,yVar,yN, iflag, False)
      end do
      end do
        
      alpha = prob
      alpha = 100.*(1.-prob) ; A significance of 0.05 returned by ttest would yield 95% for alpha. This is often done for plotting.
                         ; ref: http://www.ncl.ucar.edu/Document/Functions/Built-in/ttest.shtml, Example 2

      ;**********************
      ; set plot variables
      ;**********************
      varvar_base_avg = dim_avg_n_Wrap(varvar_base,0)
      varvar_any_avg  = dim_avg_n_Wrap(varvar_any ,0)

      varvar_anyMbase_avg = diff(varvar_any_avg,varvar_base_avg)
      varvar_anyMbase_siglev = alpha

      ;********
      ; plot
      ;********
   
      ; plot varvar_base
      res_vars1@tiMainString = suffix_base
      plot_base_avg = gsn_csm_contour_map(wks_anyMbase_siglvl, varvar_base_avg, res_vars1)

      ; plot varvar_anyMbase with siglvl
      res_diff_vars1@tiMainString = suffix_any+" - "+suffix_base+" at "+siglev+"% level for ("+tt1+"- "+tt2+") "+stepname

      opt1 = opt_cncolors
      cnColors_PosNeg(varvar_anyMbase_avg,res_diff_vars1,opt1)

      if (opt_cncolors) then
        cnColors_PosNeg(varvar_anyMbase_avg,res_diff_vars1,opt_cncolors)
      end if

      plot_anyMbase_siglev = gsn_csm_contour_map_overlay(wks_anyMbase_siglvl, varvar_anyMbase_avg, varvar_anyMbase_siglev, res_diff_vars1, res_sig)

      ;*************
      ; panel plot
      ;*************
      plot(0) = plot_base_avg
      plot(1) = plot_anyMbase_siglev
      gsn_panel(wks_anyMbase_siglvl ,plot, (/row1,column1/),resp)

      delete(prob)
      delete(alpha)
      delete(varvar_any0)
      delete(varvar_any)
      delete(wksname_anyMbase_siglvl)
      delete(wks_anyMbase_siglvl)
    end do ; end do of files

    delete(varvar_base0)
    delete(varvar_base)
    delete(res_vars1)
    delete(res_diff_vars1)
    delete(opt_cncolors)

  end do ; end do of vars

end if ; end if of option_plot = "fig_1var_2files_siglvl-name_nvars"

EOF
#*** case: "cesm-wind_cn_map-flexible" end ***

#*** case: "newcase" start ***
#elif [ $casename_work -a $casename_work == "newcase" ]; then
#cat >> $ncl_name << EOF
#EOF
#*** case: "newcase" end ***

fi # end if of casename_work

#---------------------
# 6) write end of NCL
#---------------------
cat >> $ncl_name << EOF

end
EOF

#================
#  program end
#================

echo ' '
echo '----------------------------'
echo "ncl script name is  [$ncl_name]"
echo "read files      are [$filenames]"
echo "suffixes        are [$suffixnames]"
echo "read varibles   are [$varnames]"
echo "case            is  [$casename_work]"
echo ""
echo "modifications   are [${modify[@]}]"
echo "plot type       is  [$plot_type]"
echo "plot res        is  [${plot_res[@]}]"
echo '----------------------------'
echo ' '
echo "$ncl_name create successfully!"

exit 0

